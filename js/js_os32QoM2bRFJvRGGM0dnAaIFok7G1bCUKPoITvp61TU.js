/**
 * DO NOT EDIT THIS FILE.
 * See the following change record for more information,
 * https://www.drupal.org/node/2815083
 * @preserve
 **/

(function($, Drupal, drupalSettings, debounce, displace) {
    drupalSettings.dialog = $.extend({
        autoResize: true,
        maxHeight: '95%'
    }, drupalSettings.dialog);

    function resetPosition(options) {
        var offsets = displace.offsets;
        var left = offsets.left - offsets.right;
        var top = offsets.top - offsets.bottom;

        var leftString = (left > 0 ? '+' : '-') + Math.abs(Math.round(left / 2)) + 'px';
        var topString = (top > 0 ? '+' : '-') + Math.abs(Math.round(top / 2)) + 'px';
        options.position = {
            my: 'center' + (left !== 0 ? leftString : '') + ' center' + (top !== 0 ? topString : ''),
            of: window
        };
        return options;
    }

    function resetSize(event) {
        var positionOptions = ['width', 'height', 'minWidth', 'minHeight', 'maxHeight', 'maxWidth', 'position'];
        var adjustedOptions = {};
        var windowHeight = $(window).height();
        var option = void 0;
        var optionValue = void 0;
        var adjustedValue = void 0;
        for (var n = 0; n < positionOptions.length; n++) {
            option = positionOptions[n];
            optionValue = event.data.settings[option];
            if (optionValue) {
                if (typeof optionValue === 'string' && /%$/.test(optionValue) && /height/i.test(option)) {
                    windowHeight -= displace.offsets.top + displace.offsets.bottom;
                    adjustedValue = parseInt(0.01 * parseInt(optionValue, 10) * windowHeight, 10);

                    if (option === 'height' && event.data.$element.parent().outerHeight() < adjustedValue) {
                        adjustedValue = 'auto';
                    }
                    adjustedOptions[option] = adjustedValue;
                }
            }
        }

        if (!event.data.settings.modal) {
            adjustedOptions = resetPosition(adjustedOptions);
        }
        event.data.$element.dialog('option', adjustedOptions).trigger('dialogContentResize');
    }

    $(window).on({
        'dialog:aftercreate': function dialogAftercreate(event, dialog, $element, settings) {
            var autoResize = debounce(resetSize, 20);
            var eventData = {
                settings: settings,
                $element: $element
            };
            if (settings.autoResize === true || settings.autoResize === 'true') {
                $element.dialog('option', {
                    resizable: false,
                    draggable: false
                }).dialog('widget').css('position', 'fixed');
                $(window).on('resize.dialogResize scroll.dialogResize', eventData, autoResize).trigger('resize.dialogResize');
                $(document).on('drupalViewportOffsetChange.dialogResize', eventData, autoResize);
            }
        },
        'dialog:beforeclose': function dialogBeforeclose(event, dialog, $element) {
            $(window).off('.dialogResize');
            $(document).off('.dialogResize');
        }
    });
})(jQuery, Drupal, drupalSettings, Drupal.debounce, Drupal.displace);;
/**
 * @file
 * The Born Group module.
 *
 *
 * @category JS
 * @author Born Support <support@borngroup.com>
 * @copyright 2018 Copyright BORN Commerce Pvt Ltd, https://www.borngroup.com/
 * @license https://www.borngroup.com/ Private
 * @link http://digi.com.my/
 */

(function($, Drupal, drupalSettings) {
    "use strict";
    //overwritting the commonBehavior function of tabmegamenu(tb-megamenu-touch.js file) in order to stop main menu from redirecting
    Drupal.behaviors.commonBehavior = {
        attach: function(context, settings) {
            var $menu = $(".tb-megamenu ul.nav li.mega").has(".dropdown-menu");
            if (Drupal.TBMegaMenu) {
                Drupal.TBMegaMenu.createTouchMenu = function($menu) {
                    $menu.children("a").each(function() {
                        var $item = $(this);
                        $item.once().click(function(event) {
                            if (innerWidth > 768) {
                                var $uri = $item.attr('href');
                                window.location.href = $uri;
                            } else {
                                event.preventDefault();
                            }
                        });
                    });
                };
            }

            var $elements, fixedHeaderHeight, quickLinksSliderOptionShop, quickLinksSliderOption, $mainHeader,
                $secondaryNavigation, heightFixedHeader, resizeListener, innerWidth, error_input_id,
                $digiMainHeader = $(".digi-main-header"),
                $tbMegaMenuNav = $(".header-main-navigation-block .tb-megamenu-main .tb-megamenu-nav"),
                $footerAboutUsBlock = $(".footer-about-us-block"),
                $footerGetHelpBlock = $(".footer-get-help-block"),
                $footerPopularBlock = $(".footer-popular-block"),
                $footerMenusBlock = $(".footer-menus-block"),
                $tbMegaMenuSubMenu = $tbMegaMenuNav.find("> li.dropdown:not(.last-link,.quick-links-mobile) > div.tb-megamenu-submenu"),
                $productComparePhoneHeader = $(".product-compare-phone-header"),
                $whyShopWithUS = $(".why-shop-with-us"),
                $quickLinkCards = $(".promotion-quicklinks-card"),
                $upgradePlanForm = $(".block-upgrade-plan-block .upgrade-plan-form, #addon-wrapper, .gsm-profile-container"),
                $copTextBoxSelector = $(".block-upgrade-plan-block .upgrade-plan-form input,.gsm-profile-container .js-form-item-msisdn input"),
                $shopCardInner, $cardInner, $copClearSelector, $copSelector,
                $storeLocatorForm = $(".loc-search-box"),
                $storeLocatorInput, $storeLocatorClearText,
                scrolling = false,
                previousTop = 0,
                currentTop = 0,
                scrollDelta = 1,
                scrollOffset = 30,
                pause = 500,
                $quicklinksContentBlock,
                $quicklinksSection,
                $userMenuWrapper,
                $mydigiLink,
                $logoutMenu,
                $upfrontFee,
                $monthlyFee;

            /*to add target attribute for main navigation links*/
            $(".tb-megamenu-nav .open-in-new-tab > a").attr("target", "_blank");

            /*top to the page before load*/
            window.onbeforeunload = function() {
                if ($("body").hasClass("pupular-plan-clicked") === false) {
                    window.scrollTo(0, 0);
                }
            };

            function checkWidth() {
                return window.innerWidth;
            }

            innerWidth = checkWidth();

            quickLinksSliderOption = {
                dots: false,
                arrows: false,
                slidesToShow: 3,
                infinite: true,
                slidesToScroll: 1,
                centerMode: false,
                focusOnSelect: false,
                speed: 1000,
                variableWidth: true,
                cssEase: "ease-in-out",
                responsive: [{
                    breakpoint: 770,
                    settings: {
                        slidesToShow: 1,
                        draggable: true,
                        accessibility: false
                    }
                }]
            };
            $quicklinksContentBlock = $(".promotion-quicklinks-content-block");
            $quicklinksSection = $(".promotion-quicklinks-section");

            //to stop caching on forward and backward button on safari browser.
            $(window).bind("pageshow", function(event) {
                if (event.originalEvent.persisted) {
                    window.location.reload()
                }
            });

            function attachSlider() {

                $.each($quicklinksContentBlock, function() {
                    if (!$(this).hasClass("quick-link-no-slider")) { //if we need to apply slider
                        $(this).find(".field--items.slick-initialized").slick("unslick");
                        if (($(this).find(".field--items >.field--item").length > 1 && innerWidth <= 768) || $(this).find(".field--items >.field--item").length > 3) {
                            $(this).find(".field--items").not(".slick-initialized").slick(quickLinksSliderOption);
                        } else {
                            $(this).find(".field--items.slick-initialized").slick("unslick");
                        }
                    }
                });
                $.each($quicklinksSection, function() {
                    var $this = $(this);
                    if (!$this.hasClass("quick-link-no-slider")) { //if we need to apply slider
                        setTimeout(function() {
                            if ($this.find(".field--items").hasClass("slick-initialized")) {
                                $this.find(".field--items.slick-initialized").slick("unslick");
                            }
                            setTimeout(function() {
                                if (($this.find(".field--items >.field--item").length > 1 && innerWidth <= 768) || $this.find(".field--items >.field--item").length > 3) {
                                    $this.find(".field--items.slick-initialized").slick("unslick");
                                    $this.find(".field--items").not(".slick-initialized").slick(quickLinksSliderOption);
                                }
                                setTimeout(function() {
                                    $this.css("visibility", "visible");
                                }, 100);
                            }, 50);
                        }, 100);
                    }
                });
            }

            attachSlider();
            $quicklinksSection.once().on("click", ".slick-slide:not(.slick-active)", function(e) {
                e.preventDefault();
                var $slider = $(this).parents(".field--items");
                var index = $slider.slick("slickCurrentSlide");
                if (window.innerWidth <= 768) {
                    $slider.slick("slickGoTo", index + 1);
                } else {
                    $slider.slick("slickGoTo", index + 2);
                }
            });
            $quicklinksContentBlock.find(".slick-slide").once().on("click", function(e) {
                if (!$(this).hasClass("slick-active") && innerWidth <= 768) {
                    e.preventDefault();
                }
            });

            // Exclude page for error focus. eg '.class1, .class2'
            var focus_exclude = '.page-accounts';
            var form_with_error = $(".region-content form:visible");
            // Code to scroll-down to error element.
            if (form_with_error.find(".has-error").length > 0 && !$('body').is(focus_exclude)) {
                var form_with_error_id = form_with_error.attr("id");
                error_input_id = form_with_error.find(".has-error:first .error").attr("id");
                if ($("body").hasClass("page-postpaid-plans")) {
                    $("html, body").animate({
                        scrollTop: ($(".born-cop-form").offset().top) - ($(".navbar-fixed-wrapper").height())
                    }, 0);
                } else {
                    if (typeof error_input_id !== typeof undefined) {
                        setTimeout(function() {
                            error_input_id = form_with_error.find(".has-error:first .error").attr("id");
                            var errormsginput;
                            if ($("body").hasClass("page-personal-details") || $("body").hasClass("page-shipping-details")) {
                                errormsginput = $("#" + error_input_id).offset().top - ($(".navbar-fixed-wrapper").height() + 24);
                            } else {
                                errormsginput = $("#" + error_input_id).offset().top - ($(".navbar-fixed-wrapper").height());
                            }

                            if (form_with_error_id == 'born-campaigns-campaigns-plans-listing-cop') {
                                errormsginput = $("input[name='btl_plans']:checked").parents(".single-plan-details").offset().top - ($(".navbar-fixed-wrapper").height());
                            }
                            $("html, body").animate({
                                scrollTop: errormsginput
                            }, 1000);
                        });
                    }
                }
            }

            function isTouchDevice() {
                return "ontouchstart" in document.documentElement;
            }

            function containerMarginFixedHeader() {
                //height of fixed header
                if ($(".navbar-fixed-wrapper").length) {
                    if (!$(".navbar-fixed-wrapper").hasClass('is-hidden-scroll')) {
                        heightFixedHeader = $(".navbar-fixed-wrapper").height();
                        $(".main-container").css("margin-top", heightFixedHeader);
                    }
                }
            }

            function checkSimpleNavigation(currentTop) {
                //there's no secondary nav or secondary nav is below primary nav
                var productCompareLength = $productComparePhoneHeader.length;
                if (previousTop - currentTop > scrollDelta) {
                    //if scrolling up...

                    $mainHeader.removeClass("is-hidden");
                    $mainHeader.parent(".navbar-fixed-wrapper").removeClass("is-hidden-scroll");
                    $secondaryNavigation.removeClass("is-hidden");

                    if (productCompareLength) {
                        $productComparePhoneHeader.addClass("compare-header-quicklink");
                    }

                } else if (currentTop - previousTop > scrollDelta && currentTop > scrollOffset) {
                    //if scrolling down...
                    $mainHeader.addClass("is-hidden");
                    $mainHeader.parent(".navbar-fixed-wrapper").addClass("is-hidden-scroll");
                    $secondaryNavigation.addClass("is-hidden");

                    if (productCompareLength) {
                        $productComparePhoneHeader.removeClass("compare-header-quicklink");
                    }
                }
                if (currentTop === 0 && productCompareLength) {
                    $productComparePhoneHeader.removeClass("compare-header-quicklink");
                }
            }

            function autoHideHeader() {
                currentTop = $(window).scrollTop();
                checkSimpleNavigation(currentTop);

                previousTop = currentTop;
                scrolling = false;
            }

            function desktopMegaMenu() {
                var count = 0,
                    listCount, $ulSelector, headerHeight, maxHeight;
                /*hover effect of mega menu start*/
                $(".shop-main-link > a").addClass("tb-megamenu-clicked");
                if ($(".shop-main-link .tb-megamenu-subnav").hasClass("no-child")) {
                    $(".shop-main-link").removeClass("dropdown");
                }

                $ulSelector = $(".desktop-mega-menu > li.dropdown:not(.last-link) > .tb-megamenu-submenu ul.tb-megamenu-subnav");
                $($ulSelector).each(function() {
                    listCount = $(this).find(" > li").length;
                    if (listCount > count) {
                        count = listCount;
                    }
                });

                headerHeight = $digiMainHeader.innerHeight();

                $("body").off("mouseover", ".desktop-mega-menu > li.dropdown > a").on("mouseover", ".desktop-mega-menu > li.dropdown > a", function() {
                    if ($digiMainHeader.hasClass("hovered-on-submenu")) {
                        $digiMainHeader.addClass("off");
                        $digiMainHeader.removeClass("hovered-on-submenu");
                    } else {
                        $digiMainHeader.removeClass("off");
                    }
                    $digiMainHeader.addClass("header-white-bg font-black-hover");
                    $(this).next().css("opacity", "0");
                    $(this).next().addClass("show-sub-menu-desktop");
                    $(this).addClass("hover-color");
                    maxHeight = ((count + 1.5) * $(this).next().find("ul.tb-megamenu-subnav > li:nth-child(2)").innerHeight()) + headerHeight;
                    $digiMainHeader.height(maxHeight);

                    $(this).next().animate({
                        "opacity": "1"
                    }, 600);
                });

                $("body").off("mouseout", ".desktop-mega-menu > li.dropdown > a").on("mouseout", ".desktop-mega-menu > li.dropdown > a", function() {
                    $digiMainHeader.removeClass("header-white-bg font-black-hover hovered-on-submenu");
                    $(this).next().removeClass("show-sub-menu-desktop");
                    $(this).removeClass("hover-color");
                    $digiMainHeader.height("auto");
                });

                $("body").off("mouseover", ".desktop-mega-menu > li.dropdown > div.tb-megamenu-submenu").on("mouseover", ".desktop-mega-menu > li.dropdown > div.tb-megamenu-submenu", function() {
                    $digiMainHeader.addClass("header-white-bg font-black-hover off hovered-on-submenu");
                    $(this).addClass("show-sub-menu-desktop");
                    $(this).prev().addClass("hover-color");
                    maxHeight = ((count + 1.5) * $(this).find("ul.tb-megamenu-subnav > li:nth-child(2)").innerHeight()) + headerHeight;
                    $digiMainHeader.height(maxHeight);

                });

                $("body").off("mouseout", ".desktop-mega-menu > li.dropdown > div.tb-megamenu-submenu").on("mouseout", ".desktop-mega-menu > li.dropdown > div.tb-megamenu-submenu", function() {
                    $digiMainHeader.removeClass("header-white-bg font-black-hover");
                    $(this).removeClass("show-sub-menu-desktop");
                    $(this).prev().removeClass("hover-color");
                    $digiMainHeader.height("auto");
                });
                /*hover effect of mega menu end*/
            }

            /*COP on postpaid plans page and pdp page js*/
            /*Change button for mobile*/

            $(".block-upgrade-plan-block .msisdn-form-terms-and-conditions-conatiner .mobile-change-button").once().on("click", function() {
                $(".block-upgrade-plan-block .change-button").mousedown();
            });
            /*to restrict the user from entering alphabets and other characters*/
            $copSelector = $(".gsm-profile-container .js-form-item-msisdn input,.block-upgrade-plan-block .upgrade-plan-form .mobile-number input,.block-upgrade-plan-block .upgrade-plan-form .tac-verfication-form input, #addon-wrapper input");
            $copTextBoxSelector.on("keypress", function(evt) {
                evt = (evt) ? evt : window.event;
                var charCode = (evt.which) ? evt.which : evt.keyCode;
                if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                    return false;
                }
                return true;
            });

            /*to append the cross icon on input*/
            $copSelector.on("input", function(e) {
                var $clearText = $upgradePlanForm.find(".clear-text-container");
                if ($(this).parent().find(".clear-text-container").length === 0) {
                    $(this).parent().prepend('<div class="clear-text-container"><a class="clear-text" style="display:inline"></a></div>');
                } else if ($(this).val().length === 0) {
                    $clearText.hide();
                } else {
                    $clearText.show();
                }
            });
            setTimeout(function() {
                if ($copSelector.parents(".terms-and-conditions").length === 0 && $copSelector.hasClass("error")) {
                    $copSelector.trigger("input");
                }
            });
            $copClearSelector = ".gsm-profile-container .clear-text-container, .block-upgrade-plan-block .upgrade-plan-form .clear-text-container, #addon-wrapper  .clear-text-container";

            /*to clear the input box on click of cross icon*/
            $("body").on("click", $copClearSelector, function(e) {
                $upgradePlanForm.find("input:not(:hidden)").val("");
                $(this).hide();
            });

            $("body").on("input", ".block-upgrade-plan-block .upgrade-plan-form .nric-number-wrapper input", function(event) {
                if (this.value.length >= this.maxLength) {
                    if (this.parentNode.parentNode.nextSibling) {
                        this.parentNode.parentNode.nextSibling.children[0].children[0].focus();
                    }
                }
            });

            $upgradePlanForm.find(".block-upgrade-plan-block .nric-number input[type='text']").on("keyup", function() {
                var maxlength = parseInt($(this).attr("maxlength"));
                var length = $(this).val().length;
                if (length === maxlength) {
                    $(this).closest(".nric-text").next().find("input[type='text']").first().focus();
                }
            });

            var $copTncContainer = $upgradePlanForm.find(".msisdn-form-terms-and-conditions-conatiner");

            $copTncContainer.find(".form-type-checkbox input.form-checkbox").on("change", function() {
                if ($(this).is(":checked")) {
                    $copTncContainer.find(".btn-secondary").removeAttr("disabled");
                } else {
                    $copTncContainer.find(".btn-secondary").attr("disabled", "disabled");
                }
            });
            if ($copTncContainer && $copTncContainer.length > 0 && $copTncContainer.find(".form-type-checkbox input.form-checkbox").length > 0) {
                $copTncContainer.find(".form-type-checkbox input.form-checkbox").trigger("change");
            }
            /*COP code ends here*/

            /*Store locator search field clear text functionality start*/
            $storeLocatorInput = $storeLocatorForm.find('input');
            $storeLocatorInput.on("input", function(e) {
                var $clearText = $storeLocatorForm.find(".clear-text");
                if ($(this).parent().find(".clear-text").length === 0) {
                    $(this).parent().prepend('<div class="clear-text-container"><a class="clear-text" style="display: inline;"></a></div>');
                } else if ($(this).val().length === 0) {
                    $clearText.hide();
                } else {
                    $clearText.show();
                }
            });

            /*to clear the input box on click of cross icon*/
            $storeLocatorClearText = '.loc-search-box .clear-text';
            $("body").on("click", $storeLocatorClearText, function(e) {
                $storeLocatorForm.find("input").val("");
                $(this).hide();
            });

            /*Store locator search field clear text functionality end*/

            function reset() {
                $tbMegaMenuSubMenu.removeClass("show-sub-menu-mobile show-sub-menu-desktop");
                $digiMainHeader.removeClass("font-black-hover header-white-bg");
            }

            function resetDesktopMegaMenu() {
                $tbMegaMenuNav.addClass("desktop-mega-menu").removeClass("mobile-mega-menu");
                reset();
            }

            function resetMobileMegaMenu() {
                $tbMegaMenuNav.removeClass("desktop-mega-menu").addClass("mobile-mega-menu");
                reset();
            }

            function resetOnCloseOfMenu() {
                $tbMegaMenuSubMenu.removeClass("show-sub-menu-mobile");
                $(".top-link").removeClass("submenu-back");
                $(".close-submenu").remove();
            }

            function mobileMegaMenu() {
                $("body").off("click", ".mobile-mega-menu > li.dropdown > a").on("click", ".mobile-mega-menu > li.dropdown > a", function(e) {
                    if (innerWidth <= 768) {
                        e.preventDefault();
                        $digiMainHeader.removeClass("header-white-bg");
                        $tbMegaMenuSubMenu.removeClass("show-sub-menu-mobile show-sub-menu-desktop");
                        $(this).next().addClass("show-sub-menu-mobile");
                        $(".top-link .block-hamburger-menu-logo").append("<span class='pull-left back-navigation-button close-submenu'>BACK</span>");
                        $(".top-link").addClass("submenu-back");
                    } else {
                        $(this).next().removeClass("show-sub-menu-mobile");
                        $(".top-link").removeClass("submenu-back");
                    }
                });

                $("body").off("click", ".close-submenu").on("click", ".close-submenu", function() {
                    if (innerWidth <= 768) {
                        $tbMegaMenuSubMenu.removeClass("show-sub-menu-mobile");
                        $(".top-link").removeClass("submenu-back");
                        $(".close-submenu").remove();
                    }
                });
            }


            /*shop landing page */
            function hoverToolTip() {
                $shopCardInner = $(".why-shop-with-us .card-inner");
                if (innerWidth >= 769) {
                    $shopCardInner.on({
                        mouseover: function() {
                            $(this).find(".collapse-custom-shop").addClass("show-tooltip");
                        },
                        mouseout: function() {
                            $(this).find(".collapse-custom-shop").removeClass("show-tooltip");
                        }
                    });
                } else {
                    $(".why-shop-with-us .collapse-custom-shop").hide();
                    $shopCardInner.off("click");
                    $cardInner = $shopCardInner.click(function() {

                        $(this).find("img").toggleClass("expanded");
                        $(this).find(".collapse-custom-shop").slideToggle(400);
                        $(this).find(".glyphicon").toggleClass("glyphicon-minus glyphicon-plus");
                        return false;

                    });
                }

                if (isTouchDevice()) {
                    // on Mobile
                    $whyShopWithUS.find(".views-row").once().click(function() {
                        $(this).toggleClass("front-face");
                    });
                } else {
                    // on Desktop
                    $whyShopWithUS.find(".views-row").on({
                        mouseover: function() {
                            $(this).removeClass("front-face");
                        },
                        mouseout: function() {
                            $(this).addClass("front-face");
                        }
                    });
                }
            }

            function footerAccordion($this) {
                if (innerWidth <= 768) {
                    $this.parent().siblings("li").find("> ul").hide("slideup");
                    $this.parent().siblings("li").find("> a").removeClass("expanded");
                    var $parentMenu = $this.parent();
                    if ($parentMenu.find("ul.menu").is(":visible")) {
                        $parentMenu.find("> a").removeClass("expanded");
                    } else {
                        $parentMenu.find("> a").addClass("expanded");
                    }
                    $parentMenu.find("ul.menu").delay(500).toggle("slidetoggle");
                }
            }

            innerWidth = checkWidth();
            if (innerWidth > 769) {
                resetDesktopMegaMenu(); //to reset desktop mega menu
                desktopMegaMenu(); // to set the desktop mega menu
                $("body").find(".landscapeHide").remove();
            }
            if (innerWidth <= 768) {
                resetMobileMegaMenu(); //to reset mobile mega menu
                mobileMegaMenu(); //to set mobile mega menu
            }

            /**header and footer code ends here*/

            /*Footer responsive*/
            $footerMenusBlock.once().on("click", "> ul > li > a", function(e) { //About us
                e.preventDefault();
                footerAccordion($(this));
            });
            /*Footer responsive ends*/

            /*history-back-button on click should go to back page from history*/
            $('.history-back-button').once().on("click", function(e) {
                e.preventDefault();
                window.history.back();
            });


            /*Header for mobile JS starts here*/
            $tbMegaMenuNav.find("> li:first-child span").text("");

            //click on the hamburger icon
            $(".header-main-navigation-block .tb-megamenu-main .tb-megamenu-button").click(function(e) {
                if ($("body").hasClass("page-home")) {
                    $.scrollify.disable();
                }
                e.preventDefault();
                e.stopPropagation();
                $(".search-mobile").removeClass("hidden");
                $(".header-main-navigation-block .tb-megamenu-main .nav-collapse").addClass(" collapse in");
            });
            //click on remove icon
            $(".top-link .hamburger-close").click(function() {
                if ($("body").hasClass("page-home")) {
                    $.scrollify.enable();
                }
                $(".search-mobile").addClass("hidden");
                $(".hamburger-menu .tb-megamenu .nav-collapse.collapse.in").removeClass("in");
                $tbMegaMenuSubMenu.removeClass("show-sub-menu-mobile");
                $(".top-link").removeClass("submenu-back");
                $(".close-submenu").remove();
            });


            /*Header for mobile JS ends here*/
            hoverToolTip();
            quickLinksCardActions();
            containerMarginFixedHeader();

            quickLinksSliderOptionShop = {
                dots: false,
                arrows: false,
                slidesToShow: 1,
                infinite: true,
                slidesToScroll: 1,
                centerMode: false,
                focusOnSelect: true,
                speed: 1000,
                variableWidth: true,
                cssEase: "ease-in-out"
            };
            $(".view-shop-accessories .view-content").each(function(e) {
                if (!$(this).parents(".attachment, .why-shop-with-us, .general_group").length) {
                    $(this).addClass("slick-section-shop");
                }
            });
            /*Header for mobile JS ends here*/
            if (window.innerWidth <= 768) {
                $(".slick-section-shop").each(function(e) {
                    setTimeout(function() {
                        $(".slick-section-shop").slick(quickLinksSliderOptionShop);
                        setTimeout(function() {
                            $(".slick-section-shop").css("visibility", "visible");
                        }, 100);
                    }, 100);

                });
                $(".footer-wrap .top-button").show();
            }

            $('.device-info .paragraph--type--broadband-plan').first().addClass('active');
            $('.device-info .paragraph--type--broadband-plan').once().click(function() {
                $('.device-info .paragraph--type--broadband-plan').removeClass('active');
                $(this).addClass('active');
                $upfrontFee = $(this).find(".offer-text .field--item").html();
                $monthlyFee = $(this).find(".monthly-fee .field--item").html();
                $(".device-info .field--type-text-with-summary .upfront-fee span").html($upfrontFee);
                $(".device-info .field--type-text-with-summary .monthly-fee-value span").html($monthlyFee);
            });

            if (!$("body").hasClass("page-home")) {
                $(".footer-wrap .top-button").on("click", function() {
                    window.scrollTo(0, 0);
                });
            }


            /*
             * sticky header on other pages
             * */
            $mainHeader = $(".navbar-fixed-wrapper .not-home-page");
            $secondaryNavigation = $(".header-other-page");

            if ($(".not-home-page .header-top-menu-block").length) {
                $(window).on("scroll", function() {
                    if (!scrolling) {
                        scrolling = true;
                        (!window.requestAnimationFrame) ? setTimeout(autoHideHeader, 250): requestAnimationFrame(autoHideHeader);
                    }
                });
            }

            function slickAttachDetach() {
                /* broadband inner pages*/
                if (window.innerWidth <= 768) {
                    $(".device-info .field--name-field-plans").not(".slick-initialized").slick(quickLinksSliderOption);
                } else {
                    if ($('.device-info .field--name-field-plans').hasClass('slick-initialized')) {
                        $(".device-info .field--name-field-plans").slick('unslick');
                    }
                }
            }

            slickAttachDetach();
            /*window resize starts here*/
            $(window).once().resize(function() {
                innerWidth = checkWidth();
                resetOnCloseOfMenu();
                clearTimeout(resizeListener);
                setTimeout(function() {
                    containerMarginFixedHeader
                }, 1000);

                resizeListener = setTimeout(function() {
                    $(".card-inner .glyphicon").addClass("glyphicon-plus");
                    $(".card-inner .glyphicon").removeClass("glyphicon-minus");
                    hoverToolTip();
                    quickLinksCardActions();
                    slickAttachDetach();
                }, pause);

                if (innerWidth > 768) {
                    resetDesktopMegaMenu();
                    desktopMegaMenu();
                    $(".top-link .hamburger-close").trigger("click");
                    $footerMenusBlock.find("> ul > li > ul").show();

                    $("body").find(".landscapeHide").remove();
                    $(".view-shop-accessories .slick-section-shop.slick-initialized").slick("unslick");
                    $userMenuWrapper.removeClass("logout-menu-open");
                } else {
                    resetMobileMegaMenu();
                    mobileMegaMenu();

                    $(".view-shop-accessories .slick-section-shop").not(".slick-initialized").slick(quickLinksSliderOptionShop);
                    $(".footer-wrap .top-button").show();
                    $userMenuWrapper.addClass("logout-menu-open");
                    if ($footerMenusBlock.find("> ul > li > ul:visible").length > 0) {
                        $footerMenusBlock.find("> ul > li > ul").hide();
                    } else {
                        $footerMenusBlock.find("> ul > li > ul:not(':visible')").hide();
                    }
                }
            });

            //HTML5 Error message positioning
            $elements = $("form").find("input,select,textarea");
            fixedHeaderHeight = $(".navbar-fixed-wrapper").outerHeight();
            for (var i = $elements.length; i--;) {
                $elements[i].addEventListener("invalid", function(e) {
                    $(e.target).addClass("invalid");
                    $("html, body").scrollTop($($(e.target).parents("form").find(".invalid")[0]).offset().top - fixedHeaderHeight - 24);
                }, true);
                $elements[i].addEventListener("change", function(e) {
                    $(e.target).removeClass("invalid");
                }, true);
            }

            //HTML5 Error message positioning ends here
            function equalHeight(group) {
                var tallest = 0;
                group.height("auto");
                group.each(function() {
                    var thisHeight = $(this).height();
                    if (thisHeight > tallest) {
                        tallest = thisHeight;
                    }
                });
                group.height(tallest);
            }

            equalHeight($(".promotion-quicklinks-card .quick-links-paragraph"));

            function quickLinksCardActions() {
                if (isTouchDevice()) {
                    // on Mobile
                    $quickLinkCards.find(".quick-links-paragraph").once().click(function() {
                        if ($(this).find(".quick-link-description").length === 1) {
                            if (!$(this).hasClass("flip")) {
                                $(this).css("height", "");
                                $(this).find(".front .glyphicon").addClass("glyphicon-minus");
                                $(this).addClass("flip");
                            } else {
                                $(this).removeClass("flip");
                                $(this).find(".front .glyphicon-minus").removeClass("glyphicon-minus").addClass("glyphicon-plus");
                            }
                        }
                    });
                } else {
                    // on Desktop
                    $quickLinkCards.find(".field--item").on({
                        mouseover: function() {
                            if ($(this).find(".quick-link-description").length === 1) {
                                $(this).find('.quick-links-paragraph ').addClass("flip");
                            }
                        },
                        mouseout: function() {
                            if ($(this).find(".quick-link-description").length === 1) {
                                $(this).find('.quick-links-paragraph ').removeClass("flip");
                            }
                        }
                    });
                }
            }
            window.onbeforeunload = function(e) {
                $(".ajax-throbber").remove();
                if (e.target.activeElement.href === undefined || !e.target.activeElement.href.includes("tel")) {
                    $(".body-container").append("<span class='ajax-throbber glyphicon-spin icon glyphicon glyphicon-refresh' aria-hidden='true'></span>");
                } else {
                    if (!e.target.activeElement.href.includes("tel")) {
                        $(".body-container").append("<span class='ajax-throbber glyphicon-spin icon glyphicon glyphicon-refresh' aria-hidden='true'></span>");
                    }
                }
            };
            $userMenuWrapper = $(".navbar-user-wrap");
            $mydigiLink = $userMenuWrapper.find(".mydigi-menu");
            $logoutMenu = $userMenuWrapper.find(".mydigi-logout-menu");
            $mydigiLink.off("click").on("click", function(e) {
                e.preventDefault();
                if (window.innerWidth < 769) {
                    $userMenuWrapper.addClass("logout-menu-open");
                    $logoutMenu.show();
                    $("body").addClass("logout-menu-open");
                    if ($("body").hasClass("page-home")) {
                        $.scrollify.disable();
                    }
                }
            });

            $userMenuWrapper.find(".mydigi-menu , .mydigi-logout-menu").hover(function() {
                    if (window.innerWidth > 768) {
                        $logoutMenu.show();
                    }
                },
                function() {
                    if (window.innerWidth > 768) {

                        $logoutMenu.hide();
                    }
                });

            $userMenuWrapper.find(".profile-wrapper").off("click").on("click", ".back-navigation-button", function(e) {
                e.preventDefault();
                $userMenuWrapper.removeClass("logout-menu-open");
                $logoutMenu.hide();
                $("body").removeClass("logout-menu-open");
                if ($("body").hasClass("page-home")) {
                    $.scrollify.enable();
                    $(window).resize();
                }
            });


            //Removing opening in new tab for ajax calls required across all pages as this will break the functionality
            $(document).on("mousedown", ".use-ajax", function(e) {
                if (e.which == 2) { //mouse middle click triggering click even instead of opening in new tab
                    $(this).trigger("click");
                }
            });
            $(".use-ajax").bind("contextmenu", function(e) { //mouse right button click to open context menu
                return false;
            });
            //Email us webform code
            var $accountBillingForm = $(".webform-submission-account-billing-form");
            var $generalEnquiryForm = $(".webform-submission-general-enquiry-form");
            var $networkCoverageForm = $(".webform-submission-network-coverage-form");
            $accountBillingForm.find(".form-item-sub-categories select").select2({
                dropdownParent: $accountBillingForm.find(".form-item-sub-categories .select-wrapper"),
                enableSearch: false
            });
            $accountBillingForm.find(".form-item-please-enter-months select").select2({
                dropdownParent: $accountBillingForm.find(".form-item-please-enter-months"),
                enableSearch: false
            });
            $accountBillingForm.find(".form-item-month-selection select").select2({
                dropdownParent: $accountBillingForm.find(".form-item-month-selection"),
                enableSearch: false
            });
            $accountBillingForm.find(".form-item-payment-channel select").select2({
                dropdownParent: $accountBillingForm.find(".form-item-payment-channel .select-wrapper"),
                enableSearch: false
            });
            $accountBillingForm.find(".form-item-payment-type select").select2({
                dropdownParent: $accountBillingForm.find(".form-item-payment-type .select-wrapper"),
                enableSearch: false
            });
            $generalEnquiryForm.find(".form-type-select select").select2({
                dropdownParent: $generalEnquiryForm.find(".form-type-select .select-wrapper"),
                enableSearch: false
            });
            $networkCoverageForm.find(".form-item-what-issues-are-you-facing- select").select2({
                dropdownParent: $networkCoverageForm.find(".form-item-what-issues-are-you-facing- .select-wrapper"),
                enableSearch: false
            });
            $networkCoverageForm.find(".form-item-select-your-network-signal select").select2({
                dropdownParent: $networkCoverageForm.find(".form-item-select-your-network-signal .select-wrapper"),
                enableSearch: false
            });
            $networkCoverageForm.find(".form-item-select-signal-strength select").select2({
                dropdownParent: $networkCoverageForm.find(".form-item-select-signal-strength .select-wrapper"),
                enableSearch: false
            });
            $networkCoverageForm.find(".form-item-do-you-face-issue select").select2({
                dropdownParent: $networkCoverageForm.find(".form-item-do-you-face-issue .select-wrapper"),
                enableSearch: false
            });
            $(".form-item-upload-attachment-textbox").find(".form-text").prop("readonly", "readonly");
            if ($(".js-form-managed-file").find(".btn-danger").length > 0) {
                $(".form-item-upload-attachment-textbox").find(".upload-button").text("Remove");
                $(".form-item-upload-attachment-textbox").find(".upload-button").addClass("remove-button").removeClass("upload-button");
            }
            $(".form-item-upload-attachment-textbox").find(".btn-wrapper").once().on("click", ".upload-button", function() {
                $("body").on("change", ".js-form-managed-file .js-form-file", function(e) {
                    readURL(this);
                });
                $(".js-form-managed-file").find(".js-form-file").click();
            });
            $accountBillingForm.find(".form-item-sub-categories select").once().on("change", function() {
                setTimeout(function() {
                    $accountBillingForm.find(".webform-flex .form-item").parents(".webform-flex").css("display", "inline-block");
                    $accountBillingForm.find(".webform-flex .form-item:not(:visible)").parents(".webform-flex").css("display", "none");
                });
            });
            $accountBillingForm.find(".form-item-sub-categories select").trigger("change");
            var readURL = function(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function(e) {
                        $(".form-item-upload-attachment-textbox").find(".form-text").val(input.files[0].name);
                        $(".form-item-upload-attachment-textbox").find(".upload-button").text("Remove");
                        $(".form-item-upload-attachment-textbox").find(".upload-button").addClass("remove-button").removeClass("upload-button");
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            };
            /*$("body").on("change", ".form-type-webform-image-file .js-form-file", function () {
              readURL(this);
            });*/
            $(".form-item-upload-attachment-textbox").once().on("click", ".remove-button", function() {
                $(".js-form-managed-file").find(".btn-danger").click();
                $(".js-form-managed-file").find(".btn-danger").mousedown();
                $(".form-item-upload-attachment-textbox").find(".form-text").val("");
                $(".form-item-upload-attachment-textbox").find(".remove-button").text("Choose file");
                $(".form-item-upload-attachment-textbox").find(".remove-button").addClass("upload-button").removeClass("remove-button");
            });
            if ($networkCoverageForm.length > 0) {
                var $radioErrorMsg = $networkCoverageForm.find(".radios--wrapper.error .fieldset-wrapper >div:first-child:not(.radios--wrapper)");
                var radioErrorText = $radioErrorMsg.text();
                $radioErrorMsg.remove();
                $networkCoverageForm.find(".radios--wrapper.error .fieldset-wrapper .form-item--error-message").remove();
                $networkCoverageForm.find(".radios--wrapper.error .fieldset-wrapper").append('<div class="form-item--error-message alert alert-danger alert-sm">' + radioErrorText + '</div>');
            }
            //Email us webform code ends here

            $(document).ajaxSuccess(function(event, xhr, settings) {
                // Hide success messages after 5 sec on ajax success.
                setTimeout(function() {
                    $(".alert.alert-success").fadeOut();
                }, 5000);
            });
        }
    };
    $(document).ready(function() {
        // Hide success messages after 5 sec.
        setTimeout(function() {
            $(".alert.alert-success").fadeOut();
        }, 5000);
        //if browser dones support objectFit
        function tkObjectFit() {
            $('img.objFit').each(function() {
                var imgSrc = $(this).attr('src');
                var fitType = 'cover';

                if ($(this).data('fit-type')) {
                    fitType = $(this).data('fit-type');
                }

                $(this).parent().css({
                    'background': 'transparent url("' + imgSrc + '") no-repeat top right/' + fitType,
                });
                $(this).parent().addClass("objFit-parent")
                $(this).remove();
            });
        }
        if ('objectFit' in document.documentElement.style === false) {
            tkObjectFit();
        }
    });
    //Broadband inner page tab active
    if ($("#postpaid-prepaid").length > 0) {
        var parameter = decodeURIComponent(window.location.href.slice(window.location.href.indexOf("?") + 1));
        var paramValue = parameter.split("=");
        var navItem = $("#postpaid-prepaid").children();
        $("#" + paramValue[1].toLowerCase()).siblings().removeClass("active in");
        $("#" + paramValue[1].toLowerCase()).addClass("active in");
        $.each(navItem, function(index) {
            if ((navItem[index].innerText).toLowerCase().trim() == paramValue[1].toLowerCase()) {
                $(navItem[index]).addClass("active");
            }
        });
    }
    if ($(".table-data-container").length > 0 && window.innerWidth < 769) {
        var collapsedItem = $(".table-data-container .collapse");
        $.each(collapsedItem, function(index, value) {
            $(collapsedItem[index]).closest("div").click(function() {
                $(collapsedItem[index]).toggleClass("expand");
                $(this).toggleClass("no-bottom-round-corner");
                $(this).siblings().slideToggle();
            });
        });

    }


})(jQuery, Drupal, drupalSettings);;
/**
 * author Christopher Blum
 *    - based on the idea of Remy Sharp, http://remysharp.com/2009/01/26/element-in-view-event-plugin/
 *    - forked from http://github.com/zuk/jquery.inview/
 */

(function(factory) {
    if (typeof define == 'function' && define.amd) {
        // AMD
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node, CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function($) {

    var inviewObjects = [],
        viewportSize, viewportOffset,
        d = document,
        w = window,
        documentElement = d.documentElement,
        timer;

    $.event.special.inview = {
        add: function(data) {
            inviewObjects.push({
                data: data,
                $element: $(this),
                element: this
            });
            // Use setInterval in order to also make sure this captures elements within
            // "overflow:scroll" elements or elements that appeared in the dom tree due to
            // dom manipulation and reflow
            // old: $(window).scroll(checkInView);
            //
            // By the way, iOS (iPad, iPhone, ...) seems to not execute, or at least delays
            // intervals while the user scrolls. Therefore the inview event might fire a bit late there
            //
            // Don't waste cycles with an interval until we get at least one element that
            // has bound to the inview event.
            if (!timer && inviewObjects.length) {
                timer = setInterval(checkInView, 250);
            }
        },

        remove: function(data) {
            for (var i = 0; i < inviewObjects.length; i++) {
                var inviewObject = inviewObjects[i];
                if (inviewObject.element === this && inviewObject.data.guid === data.guid) {
                    inviewObjects.splice(i, 1);
                    break;
                }
            }

            // Clear interval when we no longer have any elements listening
            if (!inviewObjects.length) {
                clearInterval(timer);
                timer = null;
            }
        }
    };

    function getViewportSize() {
        var mode, domObject, size = {
            height: w.innerHeight,
            width: w.innerWidth
        };

        // if this is correct then return it. iPad has compat Mode, so will
        // go into check clientHeight/clientWidth (which has the wrong value).
        if (!size.height) {
            mode = d.compatMode;
            if (mode || !$.support.boxModel) { // IE, Gecko
                domObject = mode === 'CSS1Compat' ?
                    documentElement : // Standards
                    d.body; // Quirks
                size = {
                    height: domObject.clientHeight,
                    width: domObject.clientWidth
                };
            }
        }

        return size;
    }

    function getViewportOffset() {
        return {
            top: w.pageYOffset || documentElement.scrollTop || d.body.scrollTop,
            left: w.pageXOffset || documentElement.scrollLeft || d.body.scrollLeft
        };
    }

    function checkInView() {
        if (!inviewObjects.length) {
            return;
        }

        var i = 0,
            $elements = $.map(inviewObjects, function(inviewObject) {
                var selector = inviewObject.data.selector,
                    $element = inviewObject.$element;
                return selector ? $element.find(selector) : $element;
            });

        viewportSize = viewportSize || getViewportSize();
        viewportOffset = viewportOffset || getViewportOffset();

        for (; i < inviewObjects.length; i++) {
            // Ignore elements that are not in the DOM tree
            if (!$.contains(documentElement, $elements[i][0])) {
                continue;
            }

            var $element = $($elements[i]),
                elementSize = {
                    height: $element[0].offsetHeight,
                    width: $element[0].offsetWidth
                },
                elementOffset = $element.offset(),
                inView = $element.data('inview');

            // Don't ask me why because I haven't figured out yet:
            // viewportOffset and viewportSize are sometimes suddenly null in Firefox 5.
            // Even though it sounds weird:
            // It seems that the execution of this function is interferred by the onresize/onscroll event
            // where viewportOffset and viewportSize are unset
            if (!viewportOffset || !viewportSize) {
                return;
            }

            if (elementOffset.top + elementSize.height > viewportOffset.top &&
                elementOffset.top < viewportOffset.top + viewportSize.height &&
                elementOffset.left + elementSize.width > viewportOffset.left &&
                elementOffset.left < viewportOffset.left + viewportSize.width) {
                if (!inView) {
                    if ($element.parents('.slick-list').length > 0) { //Conditions added to trigger only active items in view
                        if (($element.hasClass('slick-active') || $element.parents('.slick-active').length > 0)) {
                            if (!$element.hasClass('inview-added')) {
                                $element.addClass('inview-added');
                                $element.data('inview', true).trigger('inview', [true]);
                            }
                        }
                    } else {
                        $element.data('inview', true).trigger('inview', [true]);
                    }
                }
            } else if (inView) {
                if ($element.parents('.slick-list').length > 0) {
                    if ($element.hasClass('inview-added')) {
                        $element.data('inview', false).trigger('inview', [false]);
                    }
                } else {
                    $element.data('inview', false).trigger('inview', [false]);
                }
            }
        }
    }

    $(w).on("scroll resize scrollstop", function() {
        viewportSize = viewportOffset = null;
    });

    // IE < 9 scrolls to focused elements without firing the "scroll" event
    if (!documentElement.addEventListener && documentElement.attachEvent) {
        documentElement.attachEvent("onfocusin", function() {
            viewportOffset = null;
        });
    }
}));;
/**
 * @file
 * The Born Group module.
 *
 *
 * @category JS
 * @author Born Support <support@borngroup.com>
 * @copyright 2018 Copyright BORN Commerce Pvt Ltd, https://www.borngroup.com/
 * @license https://www.borngroup.com/ Private
 * @link http://digi.com.my/
 */
// We define a function that takes one parameter named $.
(function($) {
    Drupal.behaviors.dataLayer = {
        attach: function() {

            var $dataPid = $('[data-type]'),
                $dataPlanCase = $('[data-plan]'),
                $ecommerceObject, $value, $datalayerWrapper,
                name, id, pid, brand, category, pdp_dimension3,
                variant, quantity, position, price, coupon,
                list, dimension1, dimension7, dimension4, dimension3, dimension5, dimension6, dimension10,
                dimension2, dimension9, dimension11, dimension12, dimension13, dimension15,
                dimension14, dimension22, dimension23, dimension31, dimension32, dimension33, dimension34, creative, $this, $deviceProductPush, $datalayerSucess,
                $datalayerPurchase,
                $datalayerSucessProduct,
                $dataLayerFilter = $(".datalayer-filter"),
                $dataLayerCheckout = $(".datalayer-class-checkout"),
                $dataLayerCheckoutLength = $(".datalayer-class-checkout").length,
                $pCart = $('a.p-cart').parent(),
                $orderTypeDevice = $('.order-types input[value="device"]'),
                $orderTypeCop = $('.order-types input[value="cop"]'),
                $datalayerClassPdp,
                $page, plpLastPara,
                $dataLayerClass = $('.datalayer-class'),
                pageURL = window.location.href,
                lastURLSegment,
                sendItems = [],
                sentItems = [],
                scrollTimeout, initial = true,
                $refundWrapper = $('.myaccount-refund-request-wrapper'),
                $refundWrapper = $refundWrapper.find('.form-textarea-wrapper textarea'),
                $mnpForm = $(".mnp-resubmit-request-wrapper .mnp-form-wrapper"),
                addToCartDalayer = false,
                $checkoutWrapper, $postpaid, indexValue = 0,
                pathArray = window.location.pathname.split('/'),
                $msisdn, $subid, dimension2id, result = [],
                searchResultsSku = [],
                productAfterCheckout = [], //not to fire productImpression after checkout
                newPathname = "",
                $pushSimplePlan = false;
            for (i = 0; i < pathArray.length; i++) {
                if (i > 1) {
                    newPathname += " ";
                }
                newPathname += pathArray[i];
            }
            if (pageURL.indexOf('?') >= 0) {
                pageURL = pageURL.substr(0, pageURL.indexOf('?'));
            }
            lastURLSegment = pageURL.substr(pageURL.lastIndexOf('/') + 1);
            if (lastURLSegment === "") {
                lastURLSegment = "home"
            }

            //prepare the dataLayer ecommerce object
            dataLayer[0]['ecommerce'] = {};
            dataLayer[0]['ecommerce']['impressions'] = [];
            dataLayer[0]['ecommerce']['currencyCode'] = 'RM';


            //get encrypted value for msisdn, email
            function getHashedValue(value, callback) {
                $.ajax({
                    url: "/data/encrypt?data=" + value,
                    async: false,
                    success: function(result) {
                        callback(result);
                    },
                    error: function() {
                        callback("");
                    }
                });
            };

            /*
             * */
            function setvariables($val) {


                $datalayerWrapper = $val.parents('.datalayer-wrapper');

                if ($page === 'pdp' && $val.attr('data-type') === "pdp-link") {
                    $datalayerWrapper = $('.pdp_data_layer_wrapper');
                }
                if ($pushSimplePlan === true) {
                    $this = $val;
                } else {
                    $this = $datalayerWrapper.find('.datalayer-class');
                }

                return name = $this.attr('data-name') ? $this.attr('data-name').toLowerCase() : $this.attr('data-name'),
                    id = $this.attr('data-id') ? $this.attr('data-id').toLowerCase() : $this.attr('data-id'), // child sku
                    pid = $this.attr('data-pid') ? $this.attr('data-pid').toLowerCase() : $this.attr('data-pid'), // child sku
                    $page = $this.attr('data-page') ? $this.attr('data-page').toLowerCase() : $this.attr('data-page'),
                    brand = $this.attr('data-brand') ? $this.attr('data-brand').toLowerCase() : $this.attr('data-brand'),
                    category = $this.attr('data-category') ? $this.attr('data-category').toLowerCase() : $this.attr('data-category'),
                    variant = $this.attr('data-variant') ? $this.attr('data-variant').toLowerCase() : $this.attr('data-variant'),
                    quantity = parseInt($this.attr('data-quantity')) ? $this.attr('data-quantity').toLowerCase() : $this.attr('data-quantity'),
                    position = parseInt($this.attr('data-position')) ? $this.attr('data-position').toLowerCase() : $this.attr('data-position'),
                    price = $this.attr('data-price') ? $this.attr('data-price').toLowerCase() : $this.attr('data-price'),
                    coupon = $this.attr('data-coupon') ? $this.attr('data-coupon').toLowerCase() : $this.attr('data-coupon'), // coupon code
                    list = $this.attr('data-list') ? $this.attr('data-list').toLowerCase() : $this.attr('data-list'), //url
                    dimension1 = $this.attr('data-dimension1') ? $this.attr('data-dimension1').toLowerCase() : $this.attr('data-dimension1'), // product type
                    dimension7 = $this.attr('data-dimension7') ? $this.attr('data-dimension7').toLowerCase() : $this.attr('data-dimension7'), // plan group
                    dimension4 = $this.attr('data-dimension4') ? $this.attr('data-dimension4').toLowerCase() : $this.attr('data-dimension4'), // discount description
                    dimension3 = $this.attr('data-dimension3') ? $this.attr('data-dimension3').toLowerCase() : $this.attr('data-dimension3'), // sales item type
                    dimension5 = $this.attr('data-dimension5') ? $this.attr('data-dimension5').toLowerCase() : $this.attr('data-dimension5'), // storage
                    dimension6 = $this.attr('data-dimension6') ? $this.attr('data-dimension6').toLowerCase() : $this.attr('data-dimension6'), // product availability
                    dimension10 = $this.attr('data-dimension10') ? $this.attr('data-dimension10').toLowerCase() : $this.attr('data-dimension10'), // plan commitment value, amount paid each month
                    dimension2 = $this.attr('data-dimension2') ? $this.attr('data-dimension2').toLowerCase() : $this.attr('data-dimension2'), // parent sku
                    dimension9 = $this.attr('data-dimension9') ? $this.attr('data-dimension9').toLowerCase() : $this.attr('data-dimension9'), // sim card
                    dimension11 = $this.attr('data-dimension11') ? $this.attr('data-dimension11').toLowerCase() : $this.attr('data-dimension11'), // addon message
                    dimension12 = $this.attr('data-dimension12') ? $this.attr('data-dimension12').toLowerCase() : $this.attr('data-dimension12'), // addon validity
                    dimension13 = $this.attr('data-dimension13') ? $this.attr('data-dimension13').toLowerCase() : $this.attr('data-dimension13'), // addon activation
                    dimension15 = $this.attr('data-dimension15') ? $this.attr('data-dimension15').toLowerCase() : $this.attr('data-dimension15'), // contract tenure
                    dimension14 = $this.attr('data-dimension14') ? $this.attr('data-dimension14').toLowerCase() : $this.attr('data-dimension14'), // addon country
                    dimension22 = $this.attr('data-dimension22') ? $this.attr('data-dimension22').toLowerCase() : $this.attr('data-dimension22'), // contract break fee
                    dimension23 = $this.attr('data-dimension23') ? $this.attr('data-dimension23').toLowerCase() : $this.attr('data-dimension23'),
                    dimension31 = $this.attr('data-dimension31') ? $this.attr('data-dimension31').toLowerCase() : $this.attr('data-dimension31'),
                    dimension32 = $this.attr('data-dimension32') ? $this.attr('data-dimension32').toLowerCase() : $this.attr('data-dimension32'),
                    dimension33 = $this.attr('data-dimension33') ? $this.attr('data-dimension33').toLowerCase() : $this.attr('data-dimension33'),
                    dimension34 = $this.attr('data-dimension34') ? $this.attr('data-dimension34').toLowerCase() : $this.attr('data-dimension34');
            }

            function productPush(ele) {
                $value = ele;
                setvariables($value);

                if ($page === 'plp' && window.location.href.indexOf('experience') > 0) {
                    plpLastPara = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);
                    list = "brand experience " + plpLastPara;
                }
                if (window.location.href.indexOf('accessories') > 0) {
                    category = "non-gsm-non-digi-accessories";
                    dimension3 = "accessories"
                }
                if (list === "cross recommended products" && window.location.href.indexOf("shopping-cart") > 0) {
                    list = "cart cross sell products";
                } else if (list === "cross recommended products" && window.location.href.indexOf("checkout") > 0) {
                    list = "order summary recommended products";
                }

                if (list === "detail page cross sell products") {
                    if (window.location.href.indexOf("accessories") > 0) {
                        list = "accessories detail page cross sell products";
                    } else if ($page === "pdp") {
                        list = "phone detail page cross sell products";
                    }
                }
                if (list === "detail page recommended products") {
                    if (window.location.href.indexOf("accessories") > 0) {
                        list = "accessories detail page recommended products";
                    } else if ($page === "pdp") {
                        list = "phone detail page recommended products";
                    }
                }

                /*list should not passed on productDetail, cart and checkout pages  but yes for recommeded and cross sell
                 * */
                if (dimension3 === "post_to_post") {
                    dimension3 = "post to post"; // sales item type
                } else if (dimension3 === "pre_to_post") {
                    dimension3 = "pre to post"; // sales item type
                }

                product.push({
                    'name': name,
                    'id': id, // child sku
                    'brand': brand,
                    'category': category,
                    'variant': variant,
                    'quantity': parseInt(quantity),
                    'position': parseInt(position),
                    'price': price,
                    'coupon': coupon, // coupon code
                    'list': list,
                    'dimension1': dimension1, // product type
                    'dimension7': dimension7, // plan group
                    'dimension4': dimension4, // discount description
                    'dimension5': dimension5, // storage
                    'dimension6': dimension6, // product availability
                    'dimension10': dimension10, // plan commitment value, amount paid each month
                    'dimension2': dimension2, // parent sku
                    'dimension3': dimension3, // parent sku
                    'dimension9': dimension9, // sim card
                    'dimension11': dimension11, // addon message
                    'dimension12': dimension12, // addon validity
                    'dimension13': dimension13, // addon activation
                    'dimension15': dimension15, // contract tenure
                    'dimension14': dimension14, // addon country
                    'dimension22': dimension22, // contract break fee
                    'dimension23': dimension23,
                    'dimension31': dimension31,
                    'dimension32': dimension32,
                    'dimension33': dimension33,
                    'dimension34': dimension34

                });

            }


            /*get the object stored in local storage*/
            function getRetrivedAttrs(dimension2id, $this, isSupplementaryline) {
                var dimension2id = dimension2id.toLowerCase();

                if (localStorage.getItem(dimension2id) != null) { //item present
                    var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));

                    try {
                        if (retrievedObject[0] == null) {
                            retrivedObjectStatus = retrievedObject;
                        } else {
                            retrivedObjectStatus = retrievedObject[0];
                        }
                    } catch (e) {
                        if (retrievedObject == null) {
                            retrivedObjectStatus = retrievedObject;
                        } else {
                            retrivedObjectStatus = retrievedObject[0];
                        }
                    }

                    if (retrivedObjectStatus.id) {
                        retrievedObject['id'] = retrivedObjectStatus.id;
                    } else {
                        retrievedObject['id'] = $this.attr('data-id');
                        retrivedObjectStatus['id'] = id;
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    if (retrivedObjectStatus.name) {
                        retrievedObject['name'] = retrivedObjectStatus.name;
                    } else {
                        retrievedObject['name'] = $this.attr('data-name');
                        retrivedObjectStatus['name'] = $this.attr('data-name');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    if (retrivedObjectStatus.brand) {
                        retrievedObject['brand'] = retrivedObjectStatus.brand;
                    } else {
                        retrievedObject['brand'] = $this.attr('data-brand');
                        retrivedObjectStatus['brand'] = $this.attr('data-brand');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.category) {
                        retrievedObject['category'] = retrivedObjectStatus.category;
                    } else {
                        retrievedObject['category'] = $this.attr('data-category');
                        retrivedObjectStatus['category'] = $this.attr('data-category');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.variant) {
                        retrievedObject['variant'] = retrivedObjectStatus.variant;
                    } else {
                        retrievedObject['variant'] = $this.attr('data-variant');
                        retrivedObjectStatus['variant'] = $this.attr('data-variant');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.coupon) {
                        retrievedObject['coupon'] = retrivedObjectStatus.coupon;
                    } else {
                        retrievedObject['coupon'] = $this.attr('data-coupon');
                        retrivedObjectStatus['coupon'] = $this.attr('data-coupon');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension1) {
                        retrievedObject['dimension1'] = retrivedObjectStatus.dimension1;
                    } else {
                        retrievedObject['dimension1'] = $this.attr('data-dimension1');
                        retrivedObjectStatus['dimension1'] = $this.attr('data-dimension1');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension7) {
                        retrievedObject['dimension7'] = retrivedObjectStatus.dimension7;
                    } else {
                        retrievedObject['dimension7'] = $this.attr('data-dimension7');
                        retrivedObjectStatus['dimension7'] = $this.attr('data-dimension7');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    if (retrivedObjectStatus.dimension4) {
                        retrievedObject['dimension4'] = retrivedObjectStatus.dimension4;
                    } else {
                        retrievedObject['dimension4'] = $this.attr('data-dimension4');
                        retrivedObjectStatus['dimension4'] = $this.attr('data-dimension4');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension3) {
                        retrievedObject['dimension3'] = retrivedObjectStatus.dimension3;
                    } else {
                        retrievedObject['dimension3'] = $this.attr('data-dimension3');
                        retrivedObjectStatus['dimension3'] = $this.attr('data-dimension3');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension5) {
                        retrievedObject['dimension5'] = retrivedObjectStatus.dimension5;
                    } else {
                        retrievedObject['dimension5'] = $this.attr('data-dimension5');
                        retrivedObjectStatus['dimension5'] = $this.attr('data-dimension5');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension6) {
                        retrievedObject['dimension6'] = retrivedObjectStatus.dimension6;
                    } else {
                        retrievedObject['dimension6'] = $this.attr('data-dimension6');
                        retrivedObjectStatus['dimension6'] = $this.attr('data-dimension6');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension10) {
                        retrievedObject['dimension10'] = retrivedObjectStatus.dimension10;
                    } else {
                        retrievedObject['dimension10'] = $this.attr('data-dimension10');
                        retrivedObjectStatus['dimension10'] = $this.attr('data-dimension10');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension2) {
                        retrievedObject['dimension2'] = retrivedObjectStatus.dimension2;
                    } else {
                        retrievedObject['dimension2'] = $this.attr('data-dimension2');
                        retrivedObjectStatus['dimension2'] = $this.attr('data-dimension2');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension9) {
                        retrievedObject['dimension9'] = retrivedObjectStatus.dimension9;
                    } else {
                        retrievedObject['dimension9'] = $this.attr('data-dimension9');
                        retrivedObjectStatus['dimension9'] = $this.attr('data-dimension9');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension11) {
                        retrievedObject['dimension11'] = retrivedObjectStatus.dimension11;
                    } else {
                        retrievedObject['dimension11'] = $this.attr('data-dimension11');
                        retrivedObjectStatus['dimension11'] = $this.attr('data-dimension11');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension12) {
                        retrievedObject['dimension12'] = retrivedObjectStatus.dimension12;
                    } else {
                        retrievedObject['dimension12'] = $this.attr('data-dimension12');
                        retrivedObjectStatus['dimension12'] = $this.attr('data-dimension12');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension13) {
                        retrievedObject['dimension13'] = retrivedObjectStatus.dimension13;
                    } else {
                        retrievedObject['dimension13'] = $this.attr('data-dimension13');
                        retrivedObjectStatus['dimension13'] = $this.attr('data-dimension13');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension15) {
                        retrievedObject['dimension15'] = retrivedObjectStatus.dimension15;
                    } else {
                        retrievedObject['dimension15'] = $this.attr('data-dimension15');
                        retrivedObjectStatus['dimension15'] = $this.attr('data-dimension15');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension14) {
                        retrievedObject['dimension14'] = retrivedObjectStatus.dimension14;
                    } else {
                        retrievedObject['dimension14'] = $this.attr('data-dimension14');
                        retrivedObjectStatus['dimension14'] = $this.attr('data-dimension14');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension22) {
                        retrievedObject['dimension22'] = retrivedObjectStatus.dimension22;
                    } else {
                        retrievedObject['dimension22'] = $this.attr('data-dimension22');
                        retrivedObjectStatus['dimension22'] = $this.attr('data-dimension22');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension23) {
                        retrievedObject['dimension23'] = retrivedObjectStatus.dimension23;
                    } else {
                        retrievedObject['dimension23'] = $this.attr('data-dimension23');
                        retrivedObjectStatus['dimension23'] = $this.attr('data-dimension23');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension31) {
                        retrievedObject['dimension31'] = retrivedObjectStatus.dimension31;
                    } else {
                        retrievedObject['dimension31'] = $this.attr('data-dimension31');
                        retrivedObjectStatus['dimension31'] = $this.attr('data-dimension31');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension32) {
                        retrievedObject['dimension32'] = retrivedObjectStatus.dimension32;
                    } else {
                        retrievedObject['dimension32'] = $this.attr('data-dimension32');
                        retrivedObjectStatus['dimension32'] = $this.attr('data-dimension32');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension33) {
                        retrievedObject['dimension33'] = retrivedObjectStatus.dimension33;
                    } else {
                        retrievedObject['dimension33'] = $this.attr('data-dimension33');
                        retrivedObjectStatus['dimension33'] = $this.attr('data-dimension33');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if (retrivedObjectStatus.dimension34) {
                        retrievedObject['dimension34'] = retrivedObjectStatus.dimension34;
                    } else {
                        retrievedObject['dimension34'] = $this.attr('data-dimension34');
                        retrivedObjectStatus['dimension34'] = $this.attr('data-dimension34');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }


                    if (retrivedObjectStatus.position) {
                        retrievedObject['position'] = parseInt(retrivedObjectStatus.position)
                    } else {
                        retrievedObject['position'] = $this.attr('data-position');
                        retrivedObjectStatus['position'] = $this.attr('data-position');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    if ($this.attr('data-list')) {
                        retrievedObject['list'] = $this.attr('data-list');
                        retrivedObjectStatus['list'] = $this.attr('data-list');
                        if (retrievedObject['list'] === "cross recommended products" && window.location.href.indexOf("shopping-cart") > 0) {
                            retrievedObject['list'] = "cart cross sell products";
                        } else if (retrievedObject['list'] === "cross recommended products" && window.location.href.indexOf("checkout") > 0) {
                            retrievedObject['list'] = "order summary recommended products";
                        }

                        if (retrievedObject['list'] === "detail page cross sell products") {
                            if (window.location.href.indexOf("accessories") > 0) {
                                retrievedObject['list'] = "accessories detail page cross sell products";
                            } else {
                                retrievedObject['list'] = "phone detail page cross sell products";
                            }
                        }
                        if (retrievedObject['list'] === "detail page recommended products") {
                            if (window.location.href.indexOf("accessories") > 0) {
                                retrievedObject['list'] = "accessories detail page recommended products";
                            } else {
                                retrievedObject['list'] = "phone detail page recommended products";
                            }
                        }
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    } else {
                        retrievedObject['list'] = retrivedObjectStatus.list;
                    }

                    if ($this.attr('data-price')) {
                        retrievedObject['price'] = $this.attr('data-price');
                        retrivedObjectStatus['price'] = $this.attr('data-price');
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    } else {
                        retrievedObject['price'] = retrivedObjectStatus.price;
                    }

                    if ($this.attr('data-quantity')) {
                        retrievedObject['quantity'] = parseInt($this.attr('data-quantity'));
                        retrivedObjectStatus['quantity'] = parseInt($this.attr('data-quantity'));
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    } else {
                        retrievedObject['quantity'] = parseInt(retrivedObjectStatus.quantity)
                    }

                    return retrievedObject;

                } else {


                    var retrievedObject = new Object();


                    retrievedObject['id'] = $this.attr('data-id').toLowerCase();
                    retrievedObject['name'] = $this.attr('data-name').toLowerCase();
                    retrievedObject['price'] = $this.attr('data-price');
                    retrievedObject['brand'] = $this.attr('data-brand');
                    retrievedObject['category'] = $this.attr('data-category');
                    retrievedObject['position'] = parseInt($this.attr('data-position'));
                    retrievedObject['quantity'] = parseInt($this.attr('data-quantity'));
                    retrievedObject['variant'] = $this.attr('data-variant');
                    retrievedObject['coupon'] = $this.attr('data-coupon'); // coupon code
                    retrievedObject['dimension1'] = $this.attr('data-dimension1'); // product type
                    retrievedObject['dimension7'] = $this.attr('data-dimension7'); // plan group
                    retrievedObject['dimension4'] = $this.attr('data-dimension4'); // discount description

                    if ($this.attr('data-dimension3') === "post_to_post") {
                        retrievedObject['dimension3'] = "post to post"; // sales item type
                    } else if ($this.attr('data-dimension3') === "pre_to_post") {
                        retrievedObject['dimension3'] = "pre to post"; // sales item type
                    } else {
                        retrievedObject['dimension3'] = $this.attr('data-dimension3'); // sales item type
                    }

                    //Setting list
                    if ($this.attr('data-list')) {
                        retrievedObject['list'] = $this.attr('data-list');
                        if (retrievedObject['list'] === "cross recommended products" && window.location.href.indexOf("shopping-cart") > 0) {
                            retrievedObject['list'] = "cart cross sell products";
                        } else if (retrievedObject['list'] === "cross recommended products" && window.location.href.indexOf("checkout") > 0) {
                            retrievedObject['list'] = "order summary recommended products";
                        }

                        if (retrievedObject['list'] === "detail page cross sell products") {
                            if (window.location.href.indexOf("accessories") > 0) {
                                retrievedObject['list'] = "accessories detail page cross sell products";
                            } else {
                                retrievedObject['list'] = "phone detail page cross sell products";
                            }
                        }
                        if (retrievedObject['list'] === "detail page recommended products") {
                            if (window.location.href.indexOf("accessories") > 0) {
                                retrievedObject['list'] = "accessories detail page recommended products";
                            } else {
                                retrievedObject['list'] = "phone detail page recommended products";
                            }
                        }
                    }


                    retrievedObject['dimension5'] = $this.attr('data-dimension5'); // storage
                    retrievedObject['dimension6'] = $this.attr('data-dimension6'); // product availability
                    retrievedObject['dimension10'] = $this.attr('data-dimension10'); // plan commitment value, amount paid each month
                    retrievedObject['dimension2'] = $this.attr('data-dimension2').toLowerCase(); // parent sku
                    retrievedObject['dimension9'] = $this.attr('data-dimension9'); // sim card
                    retrievedObject['dimension11'] = $this.attr('data-dimension11'); // addon message
                    retrievedObject['dimension12'] = $this.attr('data-dimension12'); // addon validity
                    retrievedObject['dimension13'] = $this.attr('data-dimension13'); // addon activation
                    retrievedObject['dimension15'] = $this.attr('data-dimension15'); // contract tenure
                    retrievedObject['dimension14'] = $this.attr('data-dimension14'); // addon country
                    retrievedObject['dimension22'] = $this.attr('data-dimension22');
                    retrievedObject['dimension23'] = $this.attr('data-dimension23');
                    retrievedObject['dimension31'] = $this.attr('data-dimension31');
                    retrievedObject['dimension32'] = $this.attr('data-dimension32');
                    retrievedObject['dimension33'] = $this.attr('data-dimension33');
                    retrievedObject['dimension34'] = $this.attr('data-dimension34');

                    if (retrievedObject['list'] === "cross recommended products" && window.location.href.indexOf("shopping-cart") > 0) {
                        retrievedObject['list'] = "cart cross sell";
                    } else if (list === "cross recommended products" && window.location.href.indexOf("checkout") > 0) {
                        retrievedObject['list'] = "order summary recommended products";
                    }
                    if (!isSupplementaryline) {
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if ($page === 'plan-listing-page') {
                        retrievedObject['dimension3'] = $(this).attr('data-dimension3');
                        retrievedObject['list'] = "plan-listing-page";
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    if ($page === 'plp' && window.location.href.indexOf('experience') > 0) {
                        plpLastPara = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);
                        retrievedObject['list'] = "brand experience " + plpLastPara;
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    if ($page === 'plp' && window.location.href.indexOf('accessories') > 0) {
                        retrievedObject['category'] = "non-gsm-non-digi-accessories";
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    return retrievedObject;

                }
            }

            $(document).ready(function() {

                $(document).scroll(function() {
                    detectVisible();
                    products_storage.length = 0;
                    promo_storage.length = 0;
                    if (initial === false) {
                        clearTimeout(scrollTimeout);
                        scrollTimeout = setTimeout(doneScroll, 700);
                    } else {
                        initial = false;
                        doneScroll();
                    }
                });
                $('.slick-initialized').on('mouseenter', '.slick-track .slick-slide', function(e) {

                    if ($(this).find('.datalayer-class').length !== 0) {
                        detectVisible();
                        products_storage.length = 0;
                        promo_storage.length = 0;
                        if (initial === false) {
                            clearTimeout(scrollTimeout);
                            scrollTimeout = setTimeout(doneScroll, 700);
                        } else {
                            initial = false;
                            doneScroll();
                        }
                    }

                });

                $('.slick-arrow').on('click', function() {

                    if ($(this).parents('.slick-initialized').find('.datalayer-class').length !== 0) {
                        detectVisible();
                        products_storage.length = 0;
                        promo_storage.length = 0;
                        if (initial === false) {
                            clearTimeout(scrollTimeout);
                            scrollTimeout = setTimeout(doneScroll, 700);
                        } else {
                            initial = false;
                            doneScroll();
                        }
                    }
                });
            });

            $(document).ready(function() {
                if (initial === true) {
                    initial = false;
                    clearTimeout(scrollTimeout);
                    detectVisible();
                    products_storage.length = 0;
                    scrollTimeout = setTimeout(doneScroll, 700);
                }
            });


            function getProduct(id) {
                for (var x = 0; x < products_storage.length; x++) {
                    if (products_storage[x].id == id) {
                        return products_storage[x];
                    }
                }
            }

            function detectVisible() {

                /*when element is completely in view*/
                $('[data-type="product-link"]').once('dataLayer').bind('inview', function(e, v, t) {

                    var o = $(this);
                    if (o.attr('data-page') === 'pdp-single-plan') {
                        $page = 'pdp-single-plan';
                    }

                    if (o.data('inviewtimer')) {
                        clearTimeout(o.data('inviewtimer'));
                        o.removeData('inviewtimer');
                    }

                    if (v) {
                        o.data('inviewtimer', setTimeout(function() {
                            if (t == 'top') {
                                o.data('seenTop', true);
                            } else if (t == 'bottom') {
                                o.data('seenBottom', true);
                            } else {
                                o.data('seenTop', true);
                                o.data('seenBottom', true);
                            }

                            if (o.data('seenTop') && o.data('seenBottom')) {
                                o.unbind('inview');
                                // here we will do WHAT WHE NEED (for ex. Call Ajax stats collector)
                                // ...

                                $this = o;

                                var $datalayerWrapper = $this.parents('.datalayer-wrapper');
                                //commented this code for future use
                                /*if($this.parents('.slick-list').length> 0 ) {
                                  if($datalayerWrapper.hasClass('slick-active') || $datalayerWrapper.parents(".slick-slide").prev().hasClass('slick-active') || $datalayerWrapper.parents('.slick-active').length > 0 ) {
                                    if (!$datalayerWrapper.hasClass('impression-added') && !$datalayerWrapper.hasClass('slick-cloned')) {
                                      $datalayerWrapper.addClass('impression-added');

                                      productPush($this);
                                      //if(window.innerWidth < 769) {
                                        $datalayerWrapper.parents('.slick-initialized').find('.slick-track .slick-slide').trigger("mouseenter");
                                      //}
                                    }
                                  }
                                } else {
                                  if (!$datalayerWrapper.hasClass('impression-added') && !$datalayerWrapper.hasClass('slick-cloned')) {
                                    $datalayerWrapper.addClass('impression-added');

                                    productPush($this);
                                  }
                                }*/
                                if (!$datalayerWrapper.hasClass('impression-added') && !$datalayerWrapper.hasClass('slick-cloned')) {
                                    $datalayerWrapper.addClass('impression-added');

                                    productPush($this);
                                    if ($datalayerWrapper.find(".dynamic-remarketing-search").length) {
                                        searchResultsSku.push($datalayerWrapper.find(".dynamic-remarketing-search").attr("data-sku"));
                                    }
                                }

                            }
                        }, 50));
                    }
                });

                /*promo impression
                 * home, brand experience, shop, PLP, Pre-order,login - my account, archive page, support pages
                 * */

                /*when element is completely in view*/
                $('.views-element-container .quicklink-section .views-row, .views-element-container .view-quick-links-section .views-row , .views-element-container .view-getting-started-to-digi-view .views-row').attr("data-parapositionid", "");
                $.each($("[data-parapositionid]"), function(key, value) {
                    $(this).attr("data-positionindex", key + 1);
                });
                $('[data-type="promo-link"]').once('dataLayer').bind('inview', function(e, v, t) {
                    var o = $(this);

                    if (o.data('inviewtimer')) {
                        clearTimeout(o.data('inviewtimer'));
                        o.removeData('inviewtimer');
                    }

                    if (v) {
                        o.data('inviewtimer', setTimeout(function() {
                            if (t == 'top') {
                                o.data('seenTop', true);
                            } else if (t == 'bottom') {
                                o.data('seenBottom', true);
                            } else {
                                o.data('seenTop', true);
                                o.data('seenBottom', true);
                            }

                            if (o.data('seenTop') && o.data('seenBottom')) {
                                o.unbind('inview');
                                // here we will do WHAT WHE NEED (for ex. Call Ajax stats collector)
                                // ...
                                indexValue++;
                                $this = o;
                                var $datalayerWrapper = $this.parents('.datalayer-wrapper'),
                                    $dataLayerClass = $datalayerWrapper.find('.datalayer-class'),
                                    id = $dataLayerClass.attr('data-id'),
                                    name = $dataLayerClass.attr('data-name').trim(),
                                    creative = $dataLayerClass.attr('data-creative').trim(),
                                    position = $dataLayerClass.attr('data-position'),
                                    pid = indexValue + id;


                                /*
                                Commenting it for future use
                                if($this.parents('.slick-list').length > 0 ) {
                                  if (!($datalayerWrapper.hasClass('slick-active') || $datalayerWrapper.prev().hasClass('slick-active') || $datalayerWrapper.parents('.slick-active').length > 0)) {
                                    return false;
                                  }
                                }*/
                                if (!creative) {
                                    if ($($datalayerWrapper).find('.banner-text-block').length !== 0) {} else if ($($datalayerWrapper).find('.field--name-field-para-ql-title').length !== 0) {
                                        creative = $datalayerWrapper.find('.field--name-field-para-ql-title').text().toLowerCase();
                                    } else if ($($datalayerWrapper).find('.field--name-field-promo-text').length !== 0) {
                                        creative = $this.find('.field--name-field-promo-text').text().toLowerCase();
                                    } else if ($datalayerWrapper.find(".camp-quick-link").length > 0) {
                                        creative = $datalayerWrapper.find('.camp-quick-link').text().trim().toLowerCase();
                                    } else {
                                        creative = $this.find('h2').length > 0 ? $this.find('h2').text().toLowerCase() : $this.find('h1').text().toLowerCase();
                                    }
                                }
                                creative = creative.replace(/\n/g, " ").trim().toLowerCase();
                                if (name === undefined || name === "") {
                                    name = lastURLSegment;
                                }
                                if ($(".body-container").find("[data-parapositionid]").length > 0) {
                                    $.each($(".body-container").find("[data-parapositionid]"), function(key, value) {
                                        if ($(value).attr("data-parapositionid") === id) {
                                            position = (key + 1);
                                        }
                                    });
                                }
                                $dataLayerClass.attr('data-id', id);
                                $dataLayerClass.attr('data-name', name);
                                $dataLayerClass.attr('data-creative', creative);
                                $dataLayerClass.attr('data-position', position);

                                if (findLineIndex(promo, "id", pid) !== -1) {
                                    return false;
                                }

                                if (!$datalayerWrapper.hasClass('impression-added')) {
                                    $datalayerWrapper.addClass('impression-added');

                                    promo.push({
                                        'id': id, // child sku
                                        'name': name,
                                        'creative': creative,
                                        'position': position
                                    });
                                    if ($this.parents('.slick-list').length > 0) {
                                        if (window.innerWidth < 769) {
                                            $datalayerWrapper.parents('.slick-initialized').find('.slick-track .slick-slide').trigger("mouseenter");
                                        }
                                    }
                                }
                            }
                        }, 50));
                    }
                });
                $('.views-element-container .quicklink-section .views-row, .views-element-container .view-quick-links-section .views-row , .views-element-container .view-getting-started-to-digi-view .views-row').attr("data-type", "promo-link");
                $('.views-element-container .quicklink-section .views-row, .views-element-container .view-quick-links-section .views-row, .views-element-container .view-getting-started-to-digi-view .views-row').once('dataLayer').bind('inview', function(e, v, t) {
                    var o = $(this);

                    if (o.data('inviewtimer')) {
                        clearTimeout(o.data('inviewtimer'));
                        o.removeData('inviewtimer');
                    }

                    if (v) {
                        o.data('inviewtimer', setTimeout(function() {
                            if (t == 'top') {
                                o.data('seenTop', true);
                            } else if (t == 'bottom') {
                                o.data('seenBottom', true);
                            } else {
                                o.data('seenTop', true);
                                o.data('seenBottom', true);
                            }

                            if (o.data('seenTop') && o.data('seenBottom')) {
                                o.unbind('inview');
                                // here we will do WHAT WHE NEED (for ex. Call Ajax stats collector)
                                // ...
                                indexValue++;
                                $this = o;
                                var $datalayerWrapper = $this,
                                    id = $this.attr("data-positionindex"),
                                    creative = $datalayerWrapper.find('.views-field-field-description').length > 0 ? $datalayerWrapper.find('.views-field-field-description').text().trim().toLowerCase() : $datalayerWrapper.find('.views-field-field-link .field-content').text().trim().toLowerCase(),
                                    position = indexValue,
                                    pid = indexValue + id;
                                if ($datalayerWrapper.find('.views-field-field-description').length > 0) {
                                    creative = $datalayerWrapper.find('.views-field-field-description').text().trim().toLowerCase();
                                } else if ($datalayerWrapper.find('.views-field-field-link .field-content').length > 0) {
                                    creative = $datalayerWrapper.find('.views-field-field-link .field-content').text().trim().toLowerCase()
                                } else if ($datalayerWrapper.find('.card-inner .front').length > 0) {
                                    creative = $datalayerWrapper.find('.card-inner .front').text().trim().toLowerCase();
                                }
                                creative = creative.replace(/\n/g, " ").trim().toLowerCase();
                                /*
                                Commenting it for future use
                                if($this.parents('.slick-list').length > 0 && window.innerWidth < 769) {
                                  if (!($datalayerWrapper.hasClass('slick-active') || $datalayerWrapper.prev().hasClass('slick-active') || $datalayerWrapper.parents('.slick-active').length > 0)) {
                                    return false;
                                  }
                                }*/

                                if ($(".body-container").find("[data-parapositionid]").length > 0) {
                                    $.each($(".body-container").find("[data-parapositionid]"), function(key, value) {
                                        if ($(value).attr("data-positionindex") === id) {
                                            position = (key + 1);
                                        }
                                    });
                                }
                                name = lastURLSegment;
                                $this.append("<div class='datalayer-class' data-id='" + id + "' data-name='" + name + "' data-creative='" + creative + "' data-position='" + position + "' ></div>");
                                if (findLineIndex(promo, "id", pid) !== -1) {
                                    return false;
                                }

                                if (!$datalayerWrapper.hasClass('impression-added')) {
                                    $datalayerWrapper.addClass('impression-added');

                                    promo.push({
                                        'id': id, // child sku
                                        'name': name,
                                        'creative': creative,
                                        'position': position
                                    });
                                    if ($this.parents('.slick-list').length > 0) {
                                        if (window.innerWidth < 769) {
                                            $datalayerWrapper.parents('.slick-initialized').find('.slick-track .slick-slide').trigger("mouseenter");
                                        }
                                    }
                                }
                            }
                        }, 50));
                    }
                });
            }

            function doneScroll() {

                var counterProduct = 0,
                    counterPromo = 0;

                while (product.length > 0) {
                    counterProduct++;
                    //get the product id we need to send and take it out of the items needed to be sent
                    var productId = product.pop();
                    var TempProduct = getProduct(productId);
                    products_storage.push(productId);
                    var $ecommerceObject;

                    //Step - 2: Pass it in ecommerce object //
                    $ecommerceObject = {
                        'event': 'productImpression', // GTM Event for Impression tracking
                        'ecommerce': {
                            'currencyCode': 'MYR',
                            'impressions': products_storage
                        }
                    };
                    if ($(".dynamic-remarketing-search").length > 0 && searchResultsSku.length > 0) {
                        dataLayer.push({
                            'event': 'dynamicRemarketing',
                            'page_type': "search result page",
                            'sku': searchResultsSku.join(","), //Merge with comma
                            'total_value': undefined
                        });
                        searchResultsSku = [];
                    }



                    // if page is pdp and plans impression is already added then return.
                    if ($('.digi-pdp-section.pdp-main-block').length && productId.brand == "digi") {
                        if ($('.digi-pdp-section.pdp-main-block').attr("data-ids") == "") {
                            result.push(productId.id);
                            $('.digi-pdp-section.pdp-main-block').attr("data-ids", result.toString());
                        }
                        var addedAttrs = $('.digi-pdp-section.pdp-main-block').attr("data-ids").split(",");
                        if (addedAttrs.indexOf(productId.id) > -1) {
                            //already added to return
                            return;
                        } else {
                            //already not avaiable so add
                            addedAttrs.push(productId.id);
                            $('.digi-pdp-section.pdp-main-block').attr("data-ids", addedAttrs.toString());
                        }
                    }
                    //add the product id to the list of ids already sent so we don"t send duplicates
                    sentItems.push(productId);
                }

                if (counterProduct > 0) {
                    //only send event to ga if we had at least one impression added
                    dataLayer.push($ecommerceObject);
                    if ($('.digi-pdp-section')) {
                        $('.digi-pdp-section').addClass('plan-impression-added');
                    }
                }
                while (promo.length > 0) {
                    counterPromo++;
                    //get the product id we need to send and take it out of the items needed to be sent
                    var promoId = promo.pop();
                    var TempPromo = getProduct(promoId);
                    promo_storage.push(promoId);
                    var $ecommerceObject;

                    //Step - 2: Pass it in ecommerce object //
                    $ecommerceObject = {
                        'event': 'promotionImpression', // GTM Event for Impression tracking
                        'ecommerce': {
                            'promoView': {
                                'promotions': promo_storage
                            }
                        }
                    };
                    sentItems.push(promoId);
                }

                if (counterPromo > 0) {
                    //only send event to ga if we had at least one impression added
                    dataLayer.push($ecommerceObject);
                }
                clearTimeout(scrollTimeout);
            }


            function findLineIndex(array, field, value) {
                for (var i = 0; i < array.length; i++) {
                    if (array[i] && array[i][field] === value) {
                        return i; //its there
                    }
                }
                return -1; //does not present
            }

            /*
             * product details page impression event productDetail
             * */
            if ($('[data-type="pdp-link"]').length > 0 && $(".pdp-triggered").length === 0) {
                $('[data-type="pdp-link"]').addClass("pdp-triggered");
                $page = 'pdp';
                setvariables($('[data-type="pdp-link"]'));
                $datalayerWrapper = $('.pdp_data_layer_wrapper'),
                    $this = $datalayerWrapper.find('.datalayer-class'),
                    dimension2id = $this.attr('data-id');
                getRetrivedAttrs(dimension2id, $this);
                retrievedObject = JSON.parse(localStorage.getItem(dimension2id));


                try {
                    if (retrievedObject[0] == null) {
                        retrivedObjectStatus = retrievedObject;
                    } else {
                        retrivedObjectStatus = retrievedObject[0];
                    }
                } catch (e) {
                    if (retrievedObject == null) {
                        retrivedObjectStatus = retrievedObject;
                    } else {
                        retrivedObjectStatus = retrievedObject[0];
                    }
                }

                /*
                 * on load dimension3
                 * bundle => undefined
                 * device => device only
                 * accessories => accessories
                 *
                 * on load dimension1
                 * bundle, device only => undefined
                 * */
                if (window.location.href.indexOf('accessories') > 0) {
                    retrivedObjectStatus.category = "non-gsm-non-digi-accessories";
                    dimension3 = "accessories"
                    localStorage.setItem(dimension2id, JSON.stringify(retrivedObjectStatus));
                }
                $('[data-type="pdp-link"]').attr("data-position", parseInt(retrivedObjectStatus.position));

                dataLayer.push({
                    'event': 'productDetail',
                    'ecommerce': {
                        'detail': {
                            'products': [{
                                'name': name,
                                'id': id, // child sku
                                'brand': brand,
                                'category': retrivedObjectStatus.category,
                                'variant': variant,
                                'quantity': parseInt(quantity),
                                'position': parseInt(retrivedObjectStatus.position),
                                'price': price,
                                'coupon': coupon, // coupon code
                                'dimension1': dimension1, // product type
                                'dimension7': dimension7, // plan group
                                'dimension4': dimension4, // discount description
                                'dimension5': dimension5, // storage
                                'dimension6': dimension6, // product availability
                                'dimension10': dimension10, // plan commitment value, amount paid each month
                                'dimension2': dimension2, // parent sku
                                'dimension3': dimension3, // parent sku
                                'dimension9': dimension9, // sim card
                                'dimension11': dimension11, // addon message
                                'dimension12': dimension12, // addon validity
                                'dimension13': dimension13, // addon activation
                                'dimension15': dimension15, // contract tenure
                                'dimension14': dimension14, // addon country
                                'dimension22': dimension22, // contract break fee
                                'dimension23': dimension23,
                                'dimension31': dimension31,
                                'dimension32': dimension32,
                                'dimension33': dimension33,
                                'dimension34': dimension34
                            }],
                            'actionField': {
                                'list': retrivedObjectStatus.list
                            }
                        }
                    }
                });
                getRetrivedAttrs(dimension2id, $this);
            }

            /*
             *  promotion click envets
             * */
            $(".body-container").once().on('click', '[data-type="promo-link"] a', function() {

                indexValue++;
                var $this = $(this),
                    $datalayerWrapper = $this.parents('.datalayer-wrapper').length > 0 ? $this.parents('.datalayer-wrapper') : $this.parents('.views-row'),
                    $dataLayerClass = $datalayerWrapper.find('.datalayer-class'),
                    id = $dataLayerClass.attr('data-id'),
                    name = $dataLayerClass.attr('data-name'),
                    creative = $dataLayerClass.attr('data-creative'),
                    position = $dataLayerClass.attr('data-position'),
                    pid = indexValue + id,
                    promoClickdata = [];
                promoClickdata.push({
                    'id': id, // child sku
                    'name': name,
                    'creative': creative,
                    'position': position
                });

                $ecommerceObject = {
                    'ecommerce': {
                        'promoClick': {
                            'promotions': promoClickdata,
                        }
                    },
                    'event': 'promotionClick' //pass custom event
                };
                //Push the $ecommerceObject in dataLayer
                dataLayer.push($ecommerceObject);

            });

            /*Tagging of Buttons and Links
             *  PDP add to cart
             *
             * */
            $('#pdp-place-order-button .btn-primary.button').once().on('mousedown', function() {
                var $value = $(this).parent(),
                    type = $value.attr('data-type'),
                    page = $value.attr('data-page');

                if ($(this).hasClass("check-price")) {
                    return;
                }

                var $datalayerWrapper = $value.parents('.datalayer-wrapper'),
                    $datalayerClass = $datalayerWrapper.find('.datalayer-class');


                if (type === 'add-to-cart') {

                    if (page === 'pdp') {
                        var $datalayerWrapper = $('.pdp_data_layer_wrapper'),
                            $datalayerClass = $datalayerWrapper.find('.datalayer-class');
                        if ($('[data-type="pdp-link"]').attr("data-position")) {
                            $datalayerClass.attr("data-position", $('[data-type="pdp-link"]').attr("data-position"));
                        }
                        if ($('.pdp-quantity-wrapper') && $('.pdp-quantity-wrapper .input-number').length > 0) {
                            $datalayerClass.attr("data-quantity", $('.pdp-quantity-wrapper .input-number').val());
                        }
                    } else if (page === 'nric') {
                        var $datalayerWrapper = $('.postpaid_data_layer_wrapper'),
                            $datalayerClass = $datalayerWrapper.find('.datalayer-class');
                    }
                } else {
                    return;
                }

                /*if its bundle product has to select purchase and not selected then return.
                 * */

                if ($('.order-type-wrapper').length && !$('.order-type-wrapper .order-types').hasClass('active')) {
                    return;
                }

                /* extra pushesh on PDP pages
                 * */

                /*if not device only dont pass the add to cart only pass productClick for (selected plan, and contract)*/
                if (!$('#edit-order-type-device').parent().hasClass('active') && $('.order-type-section .order-types').hasClass('active')) {
                    var $singlePlanDatalayerWapper = $('.single-plan-wrapper.active').find('.datalayer-class'),
                        $contractDatalayerWapper = $("input:radio[name='contract']").parent('.order-types.active').find('.datalayer-class');
                    var pdplist;
                    //for plans

                    product = [];
                    $pushSimplePlan = true;
                    productPush($singlePlanDatalayerWapper);
                    pdplist = product[0].list;
                    delete product[0].list; //delete listr from product array

                    if (page === 'pdp' && $orderTypeCop.length && $orderTypeCop.parent().hasClass('active') && $(".upgradeplanform .cop-finalize-form").length === 0) {
                        return; //should return till when cop eligibility check is not done
                    }

                    //for contract
                    productPush($contractDatalayerWapper);
                    delete product[1].list; //delete listr from product array

                    for (var key in product) {
                        if (product.hasOwnProperty(key)) {
                            // nl with device,post to post with device,nl with device,mnp with device,device only,mnp
                            if ($orderTypeCop.parent().hasClass('active')) {
                                if (product[key].dimension3 === "post to post") {
                                    product[key].dimension3 = "post to post with device";
                                    pdp_dimension3 = "post to post with device";
                                } else {
                                    product[key].dimension3 = "pre to post with device";
                                    pdp_dimension3 = "pre to post with device";
                                }
                            } else if ($('#edit-order-type-nl').parent().hasClass('active')) {
                                product[key].dimension3 = "nl with device";
                                pdp_dimension3 = "nl with device";
                            } else if ($('#edit-order-type-mnp').parent().hasClass('active')) {
                                product[key].dimension3 = "mnp with device";
                                pdp_dimension3 = "mnp with device";
                            }
                        }
                    }

                    if ($orderTypeDevice.parent().hasClass('active') || $orderTypeCop.parent().hasClass('active')) {
                        addToCartDalayer = true; //should not return
                    }
                    if (page === 'pdp' && $orderTypeDevice.length && $orderTypeCop.length && addToCartDalayer) {
                        //return;
                    }
                    //Push the $ecommerceObject data to dataLayer.//
                    if (type !== "add-to-cart") {
                        dataLayer.push($ecommerceObject);
                        if (localStorage.getItem(product[0].id.trim()) === null) {
                            localStorage.setItem(product[0].id.trim(), JSON.stringify(product));
                        }
                    }

                    /*
                     * pdp with plans anc contract => productClick and productDetail event on selected plan and contract.
                     * */
                    $ecommerceObject = {
                        'ecommerce': {
                            'click': {
                                'products': product,
                                'actionField': {
                                    'list': pdplist
                                } // Pass the correct page type in place of 'Search Results'.
                            }
                        },
                        'event': 'productClick' //pass custom event
                    };
                    //Push the $ecommerceObject in dataLayer
                    dataLayer.push($ecommerceObject);

                    $ecommerceObject = {
                        'event': 'productDetail',
                        'ecommerce': {
                            'detail': {
                                'products': product,
                                'actionField': {
                                    'list': pdplist
                                }
                            }
                        }
                    };
                    //Push the $ecommerceObject in dataLayer
                    dataLayer.push($ecommerceObject);
                }
                $pushSimplePlan = false;
                /*extra pushesh on PDP pages completes*/


                var id = $datalayerClass.attr('data-id'),
                    dimension2id = $datalayerClass.attr('data-id');

                var retrivedAttrs = getRetrivedAttrs(dimension2id, $datalayerClass);

                if ($('#edit-order-type-device').parent().hasClass('active')) {
                    pdp_dimension3 = "device only";
                }

                if (retrivedAttrs.dimension3 === "device only") {
                    pdp_dimension3 = "device only";
                } else if (retrivedAttrs.dimension3 === "accessories") {
                    pdp_dimension3 = "accessories";
                }
                var productAddToCartArray = [];
                switch (type) {


                    case 'add-to-cart': // Track Add to Cart
                        productAddToCartArray = product;
                        product = [];
                        productAddToCartArray.push({
                            'name': retrivedAttrs.name,
                            'id': retrivedAttrs.id, // child sku
                            'brand': retrivedAttrs.brand,
                            'category': retrivedAttrs.category,
                            'variant': retrivedAttrs.variant,
                            'quantity': parseInt(retrivedAttrs.quantity),
                            'position': parseInt(retrivedAttrs.position),
                            'price': retrivedAttrs.price,
                            'coupon': retrivedAttrs.coupon, // coupon code
                            'dimension1': retrivedAttrs.dimension1, // product type
                            'dimension7': retrivedAttrs.dimension7, // plan group
                            'dimension4': retrivedAttrs.dimension4, // discount description
                            'dimension3': pdp_dimension3, // sales item type
                            'dimension5': retrivedAttrs.dimension5, // storage
                            'dimension6': retrivedAttrs.dimension6, // product availability
                            'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                            'dimension2': retrivedAttrs.dimension2, // parent sku
                            'dimension9': retrivedAttrs.dimension9, // sim card
                            'dimension11': retrivedAttrs.dimension11, // addon message
                            'dimension12': retrivedAttrs.dimension12, // addon validity
                            'dimension13': retrivedAttrs.dimension13, // addon activation
                            'dimension15': retrivedAttrs.dimension15, // contract tenure
                            'dimension14': retrivedAttrs.dimension14, // addon country
                            'dimension22': retrivedAttrs.dimension22, // contract break fee
                            'dimension23': retrivedAttrs.dimension23,
                            'dimension31': retrivedAttrs.dimension31,
                            'dimension32': retrivedAttrs.dimension32,
                            'dimension33': retrivedAttrs.dimension33,
                            'dimension34': retrivedAttrs.dimension34
                        });


                        //Pass the Product Add To Cart data in ecommerce object //
                        $ecommerceObject = {
                            'event': 'addToCart', //pass custom event
                            'ecommerce': {
                                'add': {
                                    'products': productAddToCartArray
                                },
                            }
                        };

                        /*if device + plan + contract in local storage to persist throught site
                         * else device only => one product in local storage
                         * */

                        if (!$('#edit-order-type-device').parent().hasClass('active') && $('.order-type-section .order-types').hasClass('active')) {
                            //add product attr to lcoal storage  device + plan + contract
                            if (localStorage.getItem("after_pdp-" + productAddToCartArray[2].id.trim()) === null) {
                                localStorage.setItem("after_pdp-" + productAddToCartArray[2].id.trim(), JSON.stringify(productAddToCartArray));
                            }
                            if ($orderTypeCop.parent().hasClass('active') && $(".upgradeplanform .cop-finalize-form").length > 0) {
                                dataLayer.push($ecommerceObject);
                            };

                        } else {
                            //add product attr to lcoal storage (only device)
                            //Push the $ecommerceObject data to dataLayer.//
                            dataLayer.push($ecommerceObject);
                            var localdimension2 = productAddToCartArray[0].id.trim();
                            if ($('.order-type-section .order-types').hasClass('active')) {
                                if (localdimension2.indexOf("bco-") >= 0) {
                                    localdimension2 = localdimension2.replace("bco-", "cmp-"); //Changing bco to cmp in case of buy only hone from pdp
                                }
                            }
                            if (localStorage.getItem(localdimension2) === null) {
                                localStorage.setItem(localdimension2, JSON.stringify(productAddToCartArray));
                            }
                        }
                        break;
                }
            });

            if ($dataPid.length) {
                $dataPid.once().on('mousedown', function() {
                    var $value = $(this),
                        type = $value.attr('data-type'),
                        page = $value.attr('data-page'),
                        directToCart = $(this).attr('data-attr-action'),
                        upgradePanCOP = $(this).attr('data-order_type');

                    if (type === "promo-link") {
                        return;
                    }

                    //if type is click and is plan on plan listing page or pdp page return.
                    if (type === "product-link") {
                        if ($(this).hasClass("plans-details") || $(this).hasClass("single-plan-details")) {
                            return;
                        }
                    }

                    var $datalayerWrapper = $value.parents('.datalayer-wrapper'),
                        $datalayerClass = $datalayerWrapper.find('.datalayer-class');


                    if (type === 'add-to-cart' && !directToCart) {
                        if (page === 'pdp') {
                            var $datalayerWrapper = $('.pdp_data_layer_wrapper'),
                                $datalayerClass = $datalayerWrapper.find('.datalayer-class');
                        } else if (page === 'nric') {
                            var $datalayerWrapper = $('.postpaid_data_layer_wrapper'),
                                $datalayerClass = $datalayerWrapper.find('.datalayer-class'),
                                id = $datalayerClass.attr('data-id'),
                                dimension2id,
                                dimension2main, list,
                                productArrayToNric = [];
                            /*
                             * NRIC page
                             * so its a bundle product grab the dimension2 from local storage with after pdp
                             * push the add-to-cart with all info with primary and supplimentary if has
                             * */
                            $.each($datalayerClass, function(key, value) {

                                dimension2id = $(this).attr('data-id').toLowerCase();
                                if (key === 0) { //save the parent sku of product mainly in case of bundled product
                                    dimension2main = dimension2id;
                                }
                                //First element in the NRIC form is dummy element for which we will always take from local storage
                                if (localStorage.getItem("after_pdp-" + dimension2id) != null && key === 0) { //For bundled product
                                    var retrievedObject = JSON.parse(localStorage.getItem("after_pdp-" + dimension2id));
                                } else if (localStorage.getItem(dimension2id) != null && key === 0) { //item present // FOr single plan, device and accesorries
                                    if (Array.isArray(JSON.parse(localStorage.getItem(dimension2id)))) {
                                        var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                                    } else {
                                        var retrievedObject = [];
                                        retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                                        retrievedObject[0].dimension1 = "primary"; //Setting it here, as its not coming from Plan listing page for the primary line
                                    }
                                } else {
                                    var retrievedObject = [];
                                    retrievedObject.push(getRetrivedAttrs(dimension2id + key, $(this), true));
                                }
                                if (key === 0) {
                                    list = retrievedObject[0].list;
                                }
                                $.each(retrievedObject, function(key, retrivedAttrs) {
                                    productArrayToNric.push({
                                        'name': retrivedAttrs.name,
                                        'id': retrivedAttrs.id, // child sku
                                        'brand': retrivedAttrs.brand,
                                        'category': retrivedAttrs.category,
                                        'variant': retrivedAttrs.variant,
                                        'quantity': parseInt(retrivedAttrs.quantity),
                                        'position': parseInt(retrivedAttrs.position),
                                        'price': retrivedAttrs.price,
                                        'coupon': retrivedAttrs.coupon, // coupon code
                                        'dimension1': retrivedAttrs.dimension1, // product type
                                        'dimension7': retrivedAttrs.dimension7, // plan group
                                        'dimension4': retrivedAttrs.dimension4, // discount description
                                        'dimension3': retrivedAttrs.dimension3, // sales item type
                                        'dimension5': retrivedAttrs.dimension5, // storage
                                        'dimension6': retrivedAttrs.dimension6, // product availability
                                        'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                                        'dimension2': retrivedAttrs.dimension2, // parent sku
                                        'dimension9': retrivedAttrs.dimension9, // sim card
                                        'dimension11': retrivedAttrs.dimension11, // addon message
                                        'dimension12': retrivedAttrs.dimension12, // addon validity
                                        'dimension13': retrivedAttrs.dimension13, // addon activation
                                        'dimension15': retrivedAttrs.dimension15, // contract tenure
                                        'dimension14': retrivedAttrs.dimension14, // addon country
                                        'dimension22': retrivedAttrs.dimension22, // contract break fee
                                        'dimension23': retrivedAttrs.dimension23,
                                        'dimension31': retrivedAttrs.dimension31,
                                        'dimension32': retrivedAttrs.dimension32,
                                        'dimension33': retrivedAttrs.dimension33,
                                        'dimension34': retrivedAttrs.dimension34
                                    });
                                });

                            });
                            /*
                             * now add to cart and run
                             * */
                            $.fn.nricAddToCartSuccess = function() {
                                $ecommerceObject = {
                                    'event': 'addToCart', //pass custom event
                                    'ecommerce': {
                                        'add': {
                                            'products': productArrayToNric

                                        },
                                    }
                                };
                                dataLayer.push($ecommerceObject);
                                $.each(productArrayToNric, function(key, value) {
                                    productArrayToNric[key].list = list;
                                });
                                if (localStorage.getItem("after_pdp-" + dimension2main) !== null) {
                                    localStorage.setItem("after_pdp-" + dimension2main, JSON.stringify(productArrayToNric));
                                } else {
                                    localStorage.setItem(dimension2main, JSON.stringify(productArrayToNric));
                                }
                            };
                            return;
                        }

                    }

                    $datalayerClass.each(function() {

                        var id = $(this).attr('data-id'),
                            dimension2id = $(this).attr('data-id'),
                            page = $(this).attr('data-page');
                        $this = $(this),
                            retrivedAttrs = getRetrivedAttrs(dimension2id, $this),
                            retrievedObject = JSON.parse(localStorage.getItem(dimension2id));


                        try {
                            if (retrievedObject[0] == null) {
                                retrivedObjectStatus = retrievedObject;
                            } else {
                                retrivedObjectStatus = retrievedObject[0];
                            }
                        } catch (e) {
                            if (retrievedObject == null) {
                                retrivedObjectStatus = retrievedObject;
                            } else {
                                retrivedObjectStatus = retrievedObject[0];
                            }
                        }

                        if ($page === 'plan-listing-page') {
                            retrivedAttrs['dimension3 '] = $(this).attr('data-dimension3');
                            retrivedObjectStatus['dimension3'] = retrivedAttrs.dimension3;
                            retrivedObjectStatus['list'] = "postpaid plans";
                            localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                        }

                        if ($page === 'plp' && window.location.href.indexOf('experience') > 0) {
                            plpLastPara = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);
                            retrivedAttrs['list'] = "brand experience " + plpLastPara;
                            retrivedObjectStatus['list'] = retrivedAttrs.list;
                            localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                        }

                        if (localStorage.getItem(dimension2id) != null) {
                            if (retrivedObjectStatus.list) {
                                list: retrivedObjectStatus['list'];
                            }
                        }
                        switch (type) {
                            case 'add-to-cart': // Track Add to Cart


                                retrievedObject = JSON.parse(localStorage.getItem(dimension2id));

                                var productAddToCartArray = [{
                                    'name': retrivedAttrs.name,
                                    'id': retrivedAttrs.id, // child sku
                                    'brand': retrivedAttrs.brand,
                                    'category': retrivedAttrs.category,
                                    'variant': retrivedAttrs.variant,
                                    'quantity': parseInt(retrivedAttrs.quantity),
                                    'position': parseInt(retrivedAttrs.position),
                                    'price': retrivedAttrs.price,
                                    'coupon': retrivedAttrs.coupon, // coupon code
                                    'dimension1': retrivedAttrs.dimension1, // product type
                                    'dimension7': retrivedAttrs.dimension7, // plan group
                                    'dimension4': retrivedAttrs.dimension4, // discount description
                                    'dimension3': retrivedAttrs.dimension3, // sales item type
                                    'dimension5': retrivedAttrs.dimension5, // storage
                                    'dimension6': retrivedAttrs.dimension6, // product availability
                                    'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                                    'dimension2': retrivedAttrs.dimension2, // parent sku
                                    'dimension9': retrivedAttrs.dimension9, // sim card
                                    'dimension11': retrivedAttrs.dimension11, // addon message
                                    'dimension12': retrivedAttrs.dimension12, // addon validity
                                    'dimension13': retrivedAttrs.dimension13, // addon activation
                                    'dimension15': retrivedAttrs.dimension15, // contract tenure
                                    'dimension14': retrivedAttrs.dimension14, // addon country
                                    'dimension22': retrivedAttrs.dimension22, // contract break
                                    'dimension23': retrivedAttrs.dimension23,
                                    'dimension31': retrivedAttrs.dimension31,
                                    'dimension32': retrivedAttrs.dimension32,
                                    'dimension33': retrivedAttrs.dimension33,
                                    'dimension34': retrivedAttrs.dimension34
                                }];


                                // for cross sell where products can be added directly to cart
                                if (directToCart) {
                                    $ecommerceObject = {
                                        'ecommerce': {
                                            'click': {
                                                'products': productAddToCartArray,
                                                'actionField': {
                                                    'list': retrivedAttrs.list
                                                }
                                            }
                                        },
                                        'event': 'productClick'
                                    };
                                    //Push the $ecommerceObject in dataLayer
                                    dataLayer.push($ecommerceObject);
                                    $ecommerceObject = {
                                        'event': 'productDetail',
                                        'ecommerce': {
                                            'detail': {
                                                'products': productAddToCartArray,
                                                'actionField': {
                                                    'list': retrivedAttrs.list
                                                }
                                            }
                                        }
                                    };
                                    dataLayer.push($ecommerceObject);
                                }

                                /* upgradePanCOP
                                 * for plan listing page on click of upgrade
                                 * event to push productClick prodcutDetail and add-to-cart
                                 * */
                                //todo  dimension3 = order_type for cop
                                if (upgradePanCOP === "cop") {
                                    $ecommerceObject = {
                                        'ecommerce': {
                                            'click': {
                                                'products': productAddToCartArray,
                                                'actionField': {
                                                    'list': retrivedAttrs.list
                                                }
                                            }
                                        },
                                        'event': 'productClick'
                                    };
                                    //Push the $ecommerceObject in dataLayer
                                    dataLayer.push($ecommerceObject);

                                    dataLayer.push({
                                        'event': 'productDetail',
                                        'ecommerce': {
                                            'detail': {
                                                'products': productAddToCartArray,
                                                'actionField': {
                                                    'list': retrivedAttrs.list
                                                }
                                            }
                                        }
                                    });
                                }


                                if ($orderTypeDevice.parent().hasClass('active') || $orderTypeCop.parent().hasClass('active')) {
                                    addToCartDalayer = true; //should not return
                                }

                                // !$(this).parents('.pdp-crosssell-products-container').length condition for directaddtocart from cros sell products.
                                if (page === 'pdp' && $orderTypeDevice.length && $orderTypeCop.length && !addToCartDalayer && !$(this).parents('.pdp-crosssell-products-container').length) {
                                    return;
                                }



                                if (upgradePanCOP === "cop") {
                                    $.fn.planPlpAddedToCart = function(data) {
                                        $ecommerceObject = {
                                            'event': 'addToCart', //pass custom event
                                            'ecommerce': {
                                                'add': {
                                                    'products': productAddToCartArray

                                                }
                                            }
                                        };

                                        //Push the $ecommerceObject data to dataLayer.//
                                        dataLayer.push($ecommerceObject);
                                    }
                                } else {
                                    //Pass the Product Add To Cart data in ecommerce object //
                                    $ecommerceObject = {
                                        'event': 'addToCart', //pass custom event
                                        'ecommerce': {
                                            'add': {
                                                'products': productAddToCartArray

                                            }
                                        }
                                    };
                                    //Push the $ecommerceObject data to dataLayer.//
                                    dataLayer.push($ecommerceObject);
                                }
                                //add product attr to local storage
                                if (localStorage.getItem(dimension2id) === null) {
                                    localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                                }


                                break;
                            case "product-link": // Track Link clicks

                                //pass undefined unless we go to PDP DP-8459 //retrivedAttrs.dimension3,
                                if (retrivedAttrs.dimension3 === "accessories") {
                                    dimension3 = "accessories";
                                    category = "non-gsm-non-digi-accessories";
                                } else if (retrivedAttrs.dimension3 === "device only") {
                                    dimension3 = "device only";
                                } else if (retrievedObject['dimension3'] != null) {
                                    dimension3 = retrievedObject['dimension3']
                                } else {
                                    dimension3 = undefined;
                                }

                                var productClickedArray = [{

                                    'name': retrivedAttrs.name,
                                    'id': retrivedAttrs.id, // child sku
                                    'brand': retrivedAttrs.brand,
                                    'category': retrivedAttrs.category,
                                    'variant': retrivedAttrs.variant,
                                    'quantity': parseInt(retrivedAttrs.quantity),
                                    'position': parseInt(retrivedAttrs.position),
                                    'price': retrivedAttrs.price,
                                    'coupon': retrivedAttrs.coupon, // coupon code
                                    'dimension1': retrivedAttrs.dimension1, // product type
                                    'dimension7': retrivedAttrs.dimension7, // plan group
                                    'dimension4': retrivedAttrs.dimension4, // discount description
                                    'dimension3': dimension3, //pass undefined unless we go to PDP DP-8459 //retrivedAttrs.dimension3, //except for accessories   // sales item type
                                    'dimension5': retrivedAttrs.dimension5, // storage
                                    'dimension6': retrivedAttrs.dimension6, // product availability
                                    'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                                    'dimension2': retrivedAttrs.dimension2, // parent sku
                                    'dimension9': retrivedAttrs.dimension9, // sim card
                                    'dimension11': retrivedAttrs.dimension11, // addon message
                                    'dimension12': retrivedAttrs.dimension12, // addon validity
                                    'dimension13': retrivedAttrs.dimension13, // addon activation
                                    'dimension15': retrivedAttrs.dimension15, // contract tenure
                                    'dimension14': retrivedAttrs.dimension14, // addon country
                                    'dimension22': retrivedAttrs.dimension22, // contract break fee
                                    'dimension23': retrivedAttrs.dimension23,
                                    'dimension31': retrivedAttrs.dimension31,
                                    'dimension32': retrivedAttrs.dimension32,
                                    'dimension33': retrivedAttrs.dimension33,
                                    'dimension34': retrivedAttrs.dimension34
                                }];



                                $ecommerceObject = {
                                    'ecommerce': {
                                        'click': {
                                            'products': productClickedArray,
                                            'actionField': {
                                                'list': retrivedAttrs.list
                                            } // Pass the correct page type in place of 'Search Results'.
                                        }
                                    },
                                    'event': 'productClick' //pass custom event
                                };
                                //Push the $ecommerceObject in dataLayer
                                dataLayer.push($ecommerceObject);
                                if (localStorage.getItem(dimension2id) === null) {
                                    localStorage.setItem(dimension2id, JSON.stringify(productClickedArray));
                                }

                                break;

                            case "remove-from-cart": // Track Link clicks

                                if (localStorage.getItem("after_pdp-" + dimension2id) != null) { //For bundled product
                                    var retrievedObject = JSON.parse(localStorage.getItem("after_pdp-" + dimension2id));
                                } else if (localStorage.getItem(dimension2id) != null) { //item present // FOr single plan, device and accesorries
                                    if (Array.isArray(JSON.parse(localStorage.getItem(dimension2id)))) {
                                        var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                                    } else {
                                        var retrievedObject = [];
                                        retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                                    }
                                } else {
                                    getRetrivedAttrs(dimension2id, $this);
                                    var retrievedObject = [];
                                    retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                                }
                                $.each(retrievedObject, function(key, retrivedAttrs) {

                                    product.push({
                                        'name': retrivedAttrs.name,
                                        'id': retrivedAttrs.id, // child sku
                                        'brand': retrivedAttrs.brand,
                                        'category': retrivedAttrs.category,
                                        'variant': retrivedAttrs.variant,
                                        'quantity': parseInt(retrivedAttrs.quantity),
                                        'position': parseInt(retrivedAttrs.position),
                                        'price': retrivedAttrs.price,
                                        'coupon': retrivedAttrs.coupon, // coupon code
                                        'dimension1': retrivedAttrs.dimension1, // product type
                                        'dimension7': retrivedAttrs.dimension7, // plan group
                                        'dimension4': retrivedAttrs.dimension4, // discount description
                                        'dimension3': retrivedAttrs.dimension3, // sales item type
                                        'dimension5': retrivedAttrs.dimension5, // storage
                                        'dimension6': retrivedAttrs.dimension6, // product availability
                                        'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                                        'dimension2': retrivedAttrs.dimension2, // parent sku
                                        'dimension9': retrivedAttrs.dimension9, // sim card
                                        'dimension11': retrivedAttrs.dimension11, // addon message
                                        'dimension12': retrivedAttrs.dimension12, // addon validity
                                        'dimension13': retrivedAttrs.dimension13, // addon activation
                                        'dimension15': retrivedAttrs.dimension15, // contract tenure
                                        'dimension14': retrivedAttrs.dimension14, // addon country
                                        'dimension22': retrivedAttrs.dimension22, // contract break fee
                                        'dimension23': retrivedAttrs.dimension23,
                                        'dimension31': retrivedAttrs.dimension31,
                                        'dimension32': retrivedAttrs.dimension32,
                                        'dimension33': retrivedAttrs.dimension33,
                                        'dimension34': retrivedAttrs.dimension34
                                    });
                                });

                                //todo remove from cart for bundled products using after pdp logic

                                $ecommerceObject = {
                                    'event': 'removeFromCart', // Measure the removal of a product from shopping cart
                                    'ecommerce': {
                                        'remove': {
                                            'products': product
                                        }
                                    }
                                };
                                //Push the $ecommerceObject in dataLayer
                                dataLayer.push($ecommerceObject);
                                break;
                        }
                    });
                });

            }


            /*
             * search autosuggest
             * quick link search impression and click on click only
             * */
            $(".body-container").off('mousedown', '.product-link-search').on('mousedown', '.product-link-search', function() {

                var $datalayerWrapper = $(this).parents('.datalayer-wrapper'),
                    $datalayerClass = $datalayerWrapper.find('.datalayer-class'),
                    dimension2id = $datalayerClass.attr('data-id'),
                    $autoSuggestParent = $('.phones-autosuggest-results');

                getRetrivedAttrs(dimension2id, $datalayerClass);
                retrievedObject = JSON.parse(localStorage.getItem(dimension2id));


                try {
                    if (retrievedObject[0] == null) {
                        retrivedObjectStatus = retrievedObject;
                    } else {
                        retrivedObjectStatus = retrievedObject[0];
                    }
                } catch (e) {
                    if (retrievedObject == null) {
                        retrivedObjectStatus = retrievedObject;
                    } else {
                        retrivedObjectStatus = retrievedObject[0];
                    }
                }
                var searchAutosuggest = [{
                    'name': retrivedAttrs.name,
                    'id': retrivedAttrs.id, // child sku
                    'brand': retrivedAttrs.brand,
                    'category': retrivedAttrs.category,
                    'variant': retrivedAttrs.variant,
                    'quantity': parseInt(retrivedAttrs.quantity),
                    'position': parseInt(retrivedAttrs.position),
                    'price': retrivedAttrs.price,
                    'coupon': retrivedAttrs.coupon, // coupon code
                    'dimension1': retrivedAttrs.dimension1, // product type
                    'dimension7': retrivedAttrs.dimension7, // plan group
                    'dimension4': retrivedAttrs.dimension4, // discount description
                    'dimension3': retrivedAttrs.dimension3, // sales item type
                    'dimension5': retrivedAttrs.dimension5, // storage
                    'dimension6': retrivedAttrs.dimension6, // product availability
                    'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                    'dimension2': retrivedAttrs.dimension2, // parent sku
                    'dimension9': retrivedAttrs.dimension9, // sim card
                    'dimension11': retrivedAttrs.dimension11, // addon message
                    'dimension12': retrivedAttrs.dimension12, // addon validity
                    'dimension13': retrivedAttrs.dimension13, // addon activation
                    'dimension15': retrivedAttrs.dimension15, // contract tenure
                    'dimension14': retrivedAttrs.dimension14, // addon country
                    'dimension22': retrivedAttrs.dimension22, // contract break
                    'dimension23': retrivedAttrs.dimension23,
                    'dimension31': retrivedAttrs.dimension31,
                    'dimension32': retrivedAttrs.dimension32,
                    'dimension33': retrivedAttrs.dimension33,
                    'dimension34': retrivedAttrs.dimension34
                }];

                //click event on clicked product
                $ecommerceObject = {
                    'ecommerce': {
                        'click': {
                            'products': searchAutosuggest,
                            'actionField': {
                                'list': "search quick link"
                            } // Pass the correct page type in place of 'Search Results'.
                        }
                    },
                    'event': 'productClick' //pass custom event
                };
                //Push the $ecommerceObject in dataLayer
                dataLayer.push($ecommerceObject);
                searchAutosuggest = [];
                //select all product in search autosuggest
                $('.phones-autosuggest-results .product-link-search').each(function() {

                    var $datalayerWrapper = $(this).parents('.datalayer-wrapper'),
                        $datalayerClass = $datalayerWrapper.find('.datalayer-class');
                    setvariables($datalayerClass);

                    searchAutosuggest.push({
                        'name': name,
                        'id': id, // child sku
                        'brand': brand,
                        'category': category,
                        'variant': variant,
                        'quantity': parseInt(quantity),
                        'position': parseInt(position),
                        'price': price,
                        'coupon': coupon, // coupon code
                        'list': list,
                        'dimension1': dimension1, // product type
                        'dimension7': dimension7, // plan group
                        'dimension4': dimension4, // discount description
                        'dimension5': dimension5, // storage
                        'dimension6': dimension6, // product availability
                        'dimension10': dimension10, // plan commitment value, amount paid each month
                        'dimension2': dimension2, // parent sku
                        'dimension3': dimension3, // parent sku
                        'dimension9': dimension9, // sim card
                        'dimension11': dimension11, // addon message
                        'dimension12': dimension12, // addon validity
                        'dimension13': dimension13, // addon activation
                        'dimension15': dimension15, // contract tenure
                        'dimension14': dimension14, // addon country
                        'dimension22': dimension22, // contract break fee
                        'dimension23': dimension23,
                        'dimension31': dimension31,
                        'dimension32': dimension32,
                        'dimension33': dimension33,
                        'dimension34': dimension34
                    });
                });
                $ecommerceObject = {
                    'event': 'productImpression', // GTM Event for Impression tracking
                    'ecommerce': {
                        'currencyCode': 'MYR',
                        'impressions': searchAutosuggest
                    }
                };
                dataLayer.push($ecommerceObject);

                //phones-autosuggest-results
            });



            /*only plan listing page*/
            if ($dataPlanCase.length) {
                $dataPlanCase.once().on('mousedown', function() {
                    var $value = $(this),
                        order_type = $value.attr('data-order_type'),
                        page = $value.attr('data-page'),
                        productArray = [];


                    var $datalayerWrapper = $value.parents('.datalayer-wrapper'),
                        $datalayerClass = $datalayerWrapper.find('.datalayer-class'),
                        dimension2id = $datalayerClass.attr('data-id'),
                        id = $datalayerClass.attr('data-id');

                    var id = $datalayerClass.attr('data-id'),
                        pid = $datalayerClass.attr('data-pid'), //itemBypid(id),
                        list = $datalayerClass.attr('data-list'),
                        name = $datalayerClass.attr('data-name'),
                        price = $datalayerClass.attr('data-price'),
                        brand = $datalayerClass.attr('data-brand'),
                        category = $datalayerClass.attr('data-category'),
                        position = parseInt($datalayerClass.attr('data-position')),
                        quantity = parseInt($datalayerClass.attr('data-quantity')),
                        variant = $datalayerClass.attr('data-variant'),
                        coupon = $datalayerClass.attr('data-coupon'), // coupon code
                        dimension1 = $datalayerClass.attr('data-dimension1'), // product type
                        dimension7 = $datalayerClass.attr('data-dimension7'), // plan group
                        dimension4 = $datalayerClass.attr('data-dimension4'), // discount description
                        dimension3 = order_type, // sales item type
                        dimension5 = $datalayerClass.attr('data-dimension5'), // storage
                        dimension6 = $datalayerClass.attr('data-dimension6'), // product availability
                        dimension10 = $datalayerClass.attr('data-dimension10'), // plan commitment value, amount paid each month
                        dimension2 = $datalayerClass.attr('data-dimension2'), // parent sku
                        dimension9 = $datalayerClass.attr('data-dimension9'), // sim card
                        dimension11 = $datalayerClass.attr('data-dimension11'), // addon message
                        dimension12 = $datalayerClass.attr('data-dimension12'), // addon validity
                        dimension13 = $datalayerClass.attr('data-dimension13'), // addon activation
                        dimension15 = $datalayerClass.attr('data-dimension15'), // contract tenure
                        dimension14 = $datalayerClass.attr('data-dimension14'), // addon country
                        dimension22 = $datalayerClass.attr('data-dimension22'); // contract break fee
                    dimension23 = $datalayerClass.attr('data-dimension23');
                    dimension31 = $datalayerClass.attr('data-dimension31');
                    dimension32 = $datalayerClass.attr('data-dimension32');
                    dimension33 = $datalayerClass.attr('data-dimension33');
                    dimension34 = $datalayerClass.attr('data-dimension34');


                    var planListingObject = {
                        'name': name,
                        'id': id, // child sku
                        'brand': brand,
                        'category': category,
                        'variant': variant,
                        'quantity': parseInt(quantity),
                        'position': parseInt(position),
                        'price': price,
                        'coupon': coupon, // coupon code
                        'dimension1': dimension1, // product type
                        'dimension7': dimension7, // plan group
                        'dimension4': dimension4, // discount description
                        'dimension3': dimension3, // sales item type
                        'dimension5': dimension5, // storage
                        'dimension6': dimension6, // product availability
                        'dimension10': dimension10, // plan commitment value, amount paid each month
                        'dimension2': dimension2, // parent sku
                        'dimension9': dimension9, // sim card
                        'dimension11': dimension11, // addon message
                        'dimension12': dimension12, // addon validity
                        'dimension13': dimension13, // addon activation
                        'dimension15': dimension15, // contract tenure
                        'dimension14': dimension14, // addon country
                        'dimension22': dimension22, // contract break fee
                        'dimension23': dimension23,
                        'dimension31': dimension31,
                        'dimension32': dimension32,
                        'dimension33': dimension33,
                        'dimension34': dimension34
                    };
                    productArray.push(planListingObject);
                    if (list === undefined || list === "") {
                        list = "postpaid plans"; //If not coming from twig file, // to handle search result plans
                    }
                    if (page !== "btl-cop-add-to-cart") {
                        $ecommerceObject = {
                            'ecommerce': {
                                'click': {
                                    'products': productArray,
                                    'actionField': {
                                        'list': list
                                    } // Pass the correct page type in place of 'Search Results'.
                                }
                            },
                            'event': 'productClick' //pass custom event
                        };
                        //Push the $ecommerceObject in dataLayer
                        dataLayer.push($ecommerceObject);

                        dataLayer.push({
                            'event': 'productDetail',
                            'ecommerce': {
                                'detail': {
                                    'products': productArray,
                                    'actionField': {
                                        'list': list
                                    }
                                }
                            }
                        });

                        planListingObject['list'] = list;
                        localStorage.setItem(dimension2id, JSON.stringify(planListingObject));
                    }
                    if (list === "plans promotion" && page === "btl-cop-add-to-cart") {
                        $.fn.planPlpAddedToCart = function(msisdn, copType) {
                            getHashedValue("6" + msisdn, function(result) {
                                dataLayer.push({
                                    'event': 'upgradePlan',
                                    'category': 'eligibilityCheck',
                                    'action': 'submit',
                                    'msisdn': result // Hashed MSISDN.
                                });
                            });
                            planListingObject["dimension3"] = copType;
                            $ecommerceObject = {
                                'event': 'addToCart', //pass custom event
                                'ecommerce': {
                                    'add': {
                                        'products': productArray
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }
                    }

                });
            }


            /*
             *  compare event plp pages add to local storage and get on compare page using name of product
             * */


            $('.compare-link a').once().on('mousedown', function() {

                $datalayerWrapper = $(this).parents('.datalayer-wrapper'),
                    $dataLayerClass = $datalayerWrapper.find('.datalayer-class'),
                    name = $dataLayerClass.attr('data-name');


                $datalayerClass.each(function() {

                    var id = $dataLayerClass.attr('data-id'),
                        dimension2id = $dataLayerClass.attr('data-id'),
                        dimension2_parent = $dataLayerClass.attr('data-dimension2'),
                        retrivedAttrs = getRetrivedAttrs(dimension2id, $dataLayerClass),
                        retrievedObject = JSON.parse(localStorage.getItem(dimension2id));



                    try {
                        if (retrievedObject[0] == null) {
                            retrivedObjectStatus = retrievedObject;
                        } else {
                            retrivedObjectStatus = retrievedObject[0];
                        }
                    } catch (e) {
                        if (retrievedObject == null) {
                            retrivedObjectStatus = retrievedObject;
                        } else {
                            retrivedObjectStatus = retrievedObject[0];
                        }
                    }

                    if ($page === 'plan-listing-page') {
                        retrivedAttrs['dimension3 '] = $(this).attr('data-dimension3');
                        retrivedObjectStatus['dimension3'] = retrivedAttrs.dimension3;
                        retrivedObjectStatus['list'] = "plan-listing-page";
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    if ($page === 'plp' && window.location.href.indexOf('experience') > 0) {
                        plpLastPara = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);
                        retrivedAttrs['list'] = "brand experience " + plpLastPara;
                        retrivedObjectStatus['list'] = retrivedAttrs.list;
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }

                    if (localStorage.getItem(dimension2id) != null) {
                        if (retrivedObjectStatus.list) {
                            list: retrivedObjectStatus['list'];
                        }
                    }

                    var productCompareArray = [{

                        'name': retrivedAttrs.name,
                        'id': retrivedAttrs.id, // child sku
                        'brand': retrivedAttrs.brand,
                        'category': retrivedAttrs.category,
                        'variant': retrivedAttrs.variant,
                        'quantity': parseInt(retrivedAttrs.quantity),
                        'position': parseInt(retrivedAttrs.position),
                        'price': retrivedAttrs.price,
                        'coupon': retrivedAttrs.coupon, // coupon code
                        'dimension1': retrivedAttrs.dimension1, // product type
                        'dimension7': retrivedAttrs.dimension7, // plan group
                        'dimension4': retrivedAttrs.dimension4, // discount description
                        'dimension3': undefined, //pass undefined unless we go to PDP DP-8459 //retrivedAttrs.dimension3,  // sales item type
                        'dimension5': retrivedAttrs.dimension5, // storage
                        'dimension6': retrivedAttrs.dimension6, // product availability
                        'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                        'dimension2': retrivedAttrs.dimension2, // parent sku
                        'dimension9': retrivedAttrs.dimension9, // sim card
                        'dimension11': retrivedAttrs.dimension11, // addon message
                        'dimension12': retrivedAttrs.dimension12, // addon validity
                        'dimension13': retrivedAttrs.dimension13, // addon activation
                        'dimension15': retrivedAttrs.dimension15, // contract tenure
                        'dimension14': retrivedAttrs.dimension14, // addon country
                        'dimension22': retrivedAttrs.dimension22, // contract break fee
                        'dimension23': retrivedAttrs.dimension23,
                        'dimension31': retrivedAttrs.dimension31,
                        'dimension32': retrivedAttrs.dimension32,
                        'dimension33': retrivedAttrs.dimension33,
                        'dimension34': retrivedAttrs.dimension34
                    }];


                    if (localStorage.getItem(dimension2id) === null) {
                        localStorage.setItem(dimension2id, JSON.stringify(productCompareArray));
                        retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                        retrivedObjectStatus['list'] = list;
                        localStorage.setItem(dimension2id, JSON.stringify(retrievedObject));
                    }
                    localStorage.setItem(dimension2_parent, JSON.stringify(retrievedObject));
                });
            });

            /*when element is completely in view*/
            $('[data-view="product-link-compare"]').once('dataLayer').bind('inview', function(e, v, t) {


                $datalayerWrapper = $(this).parents('.datalayer-wrapper'),
                    $dataLayerClass = $datalayerWrapper.find('.datalayer-class'),
                    dimension2id = $dataLayerClass.attr('data-id');


                var retrivedAttrs = getRetrivedAttrs(dimension2id, $dataLayerClass);

                retrievedObject = JSON.parse(localStorage.getItem(dimension2id));

                product.push({
                    'name': retrievedObject.name,
                    'id': retrievedObject.id, // child sku
                    'brand': retrievedObject.brand,
                    'category': retrievedObject.category,
                    'variant': retrievedObject.variant,
                    'quantity': parseInt(retrievedObject.quantity),
                    'position': parseInt(retrievedObject.position),
                    'price': retrievedObject.price,
                    'list': retrievedObject.list,
                    'coupon': retrievedObject.coupon, // coupon code
                    'dimension1': retrievedObject.dimension1, // product type
                    'dimension7': retrievedObject.dimension7, // plan group
                    'dimension4': retrievedObject.dimension4, // discount description
                    'dimension3': retrievedObject.dimension3, // sales item type
                    'dimension5': retrievedObject.dimension5, // storage
                    'dimension6': retrievedObject.dimension6, // product availability
                    'dimension10': retrievedObject.dimension10, // plan commitment value, amount paid each month
                    'dimension2': retrievedObject.dimension2, // parent sku
                    'dimension9': retrievedObject.dimension9, // sim card
                    'dimension11': retrievedObject.dimension11, // addon message
                    'dimension12': retrievedObject.dimension12, // addon validity
                    'dimension13': retrievedObject.dimension13, // addon activation
                    'dimension15': retrievedObject.dimension15, // contract tenure
                    'dimension14': retrievedObject.dimension14, // addon country
                    'dimension22': retrievedObject.dimension22, // contract break fee
                    'dimension23': retrievedObject.dimension23,
                    'dimension31': retrievedObject.dimension31,
                    'dimension32': retrievedObject.dimension32,
                    'dimension33': retrievedObject.dimension33,
                    'dimension34': retrievedObject.dimension34
                });
            });

            /*
             * click of top navigation and footer links
             * */
            $('[role = navigation] a').once().on('click', function() {
                var $this = $(this),
                    nav = $this.closest("nav"),
                    parentClass = nav.parent().prop('className'),
                    label = $this.html().toLowerCase();

                //  socialize icons event track.
                if (nav.hasClass('footer-follow-us-block')) {
                    dataLayer.push({
                        'event': 'customEvent',
                        'category': 'social',
                        'action': 'followSocial',
                        'label': label // facebook, instagram, google plus, twitter
                    });
                    return;
                }

                switch (parentClass) {
                    case 'region region-primary':
                        dataLayer.push({
                            'event': 'customEvent',
                            'category': 'header',
                            'action': label // personal, business, about, reload, switch to digi, store locator, login, search
                        });
                        break;
                    case 'region region-footer':
                        dataLayer.push({
                            'event': 'customEvent',
                            'category': 'footer',
                            'action': label // anchor tags: corporate overview, media, careers
                        });
                        break;
                }
            });

            /*click of main navigation with tb-megamenu*/
            $('.header-main-navigation-block a').once().on('click', function() {
                var $this = $(this),
                    label = $this.text().toLowerCase(),
                    tbMegamenuItem = $this.parent(".tb-megamenu-item");
                //show-sub-menu-desktop
                if (tbMegamenuItem.hasClass("level-1")) {
                    dataLayer.push({


                        'event': 'customEvent',
                        'category': 'bar',
                        'action': $.trim(label), // postpaid, prepaid, roaming and idd, accessories
                        'label': $.trim(label) // shop, lifestyle, rewards, experience, supports


                    });
                } else if ($this.parents('.tb-megamenu-item.level-1').attr('data-class') === "hiddenDesktop last-link") {
                    /*track header for mobile*/
                    dataLayer.push({

                        'event': 'customEvent',
                        'category': 'bar',
                        'action': 'header', // postpaid, prepaid, roaming and idd, accessories
                        'label': $.trim(label) // shop, lifestyle, rewards, experience, supports

                    });
                } else {
                    var levelOne = $this.parents('.tb-megamenu-item.level-1').find('a').first();
                    var levelOneLabel = levelOne.text().toLowerCase();
                    dataLayer.push({
                        'event': 'customEvent',
                        'category': 'bar',
                        'action': $.trim(label), // postpaid, prepaid, roaming and idd, accessories
                        'label': $.trim(levelOneLabel) // shop, lifestyle, rewards, experience, supports
                    });
                }
            });


            //  socialize icons event track.
            $('.my-digi-container a').once().on('click', function() {
                var $this = $(this),
                    label = $this.text().toLowerCase();

                dataLayer.push({
                    'event': 'customEvent',
                    'category': 'application',
                    'action': 'appDownload',
                    'label': "mydigi " + label // selected app: MyDigi iOS, MyDigi Android
                });

            });

            /* remove from cart
             * */


            $($pCart).once().on('click', function() {

                dataLayer.push({
                    'event': 'customEvent',
                    'category': 'header',
                    'action': 'cartReturn'
                });
            });
            $('.cart-continue-shopping, .cart-continue-shopping-mobile').once().on('click', function() {
                dataLayer.push({
                    'event': 'customEvent',
                    'category': 'header',
                    'action': 'cartExit' // cartExit
                });
            });


            /*
             * update profile from my digi
             * */
            $('.update-profile-data').once().on('click', function() {
                var email = $(this).parents("form").find(".form-email").text();
                getHashedValue(email, function(result) {
                    dataLayer.push({
                        'event': 'personalDetails',
                        'category': 'personalDetails',
                        'action': 'submit',
                        'email': result
                        //'age': 'undefined',      // age of the user eg. 25, 27 etc.
                        //'gender': 'undefined',   // gender of the user eg. male, female
                        //'income': 'undefined'   // income of the user eg. 5000
                    });
                });
            });

            /*
             * saved cards from payment page
             * */
            if ($('.payment-card-saved').length) {
                label = $('.payment-card-saved').attr('data-label').toLowerCase();
                dataLayer.push({
                    'event': 'customEvent',
                    'category': 'account',
                    'action': 'addCard', // payment method: addCard, addAccount, manageEWallet
                    'label': label // card type, bank name: visa, maybank, etc.
                });
            }


            /*
             * supplimentary line add-supplementary-line
             * */
            $('.edit-supplementary-line-wrapper .white-btn').once().on('mousedown', function() {

                var $checkoutWrapper = $(this).parents('.js-form-item'),
                    label = $checkoutWrapper.find('select option:selected').text().toLowerCase(),
                    $checkoutNumber = $checkoutWrapper.find('.checked-number'),
                    $selectPlanLine = $checkoutWrapper.find('.select-plan-wrapper select');


                if ($checkoutNumber.length && $selectPlanLine.val() != "") {
                    dataLayer.push({
                        'event': 'customEvent',
                        'category': 'shop',
                        'action': 'addSupplementaryLine',
                        'label': label // plan name: e.g. digi 80 postpaid all day
                    });
                }

            });

            /*
             * Save some parameters from reload page to use it in order success.
             * */
            $(".reload-page-wrapper .reload-form-block .btn-primary").once().on("click", function() {
                var $selectedDenomination = $(".reload-page-wrapper .denominations-wrapper #edit-denomination-options .form-item .form-radio:checked ~ .checkbox-text");
                var parentSku = $selectedDenomination.find(".parentsku").text().trim().toLowerCase();
                var reloadDetails = {
                    "dimension12": $selectedDenomination.find(".validity .bold").text().toLowerCase(),
                    "dimension4": $selectedDenomination.find(".free-credit-block").text().toLowerCase(),
                    "dimension2": parentSku,
                    "position": $selectedDenomination.parents(".form-item-denomination-options").index() + 1
                }
                localStorage.removeItem(parentSku);
                if (parentSku && localStorage.getItem(parentSku) === null) {
                    localStorage.setItem(parentSku, JSON.stringify(reloadDetails));
                }
            });

            /*
             * Reload custom event
             * */
            if ($('.order-success-page-wrapper .custom-reload').length) {
                $('.order-success-page-wrapper .custom-reload').once().each(function() {
                    var email, msisdn;
                    getHashedValue($(this).attr("data-email"), function(result) {
                        email = result;
                    });
                    getHashedValue("6" + $(this).attr("data-msisdn"), function(result) {
                        msisdn = result;
                        dataLayer.push({
                            'event': 'reload',
                            'category': 'reload',
                            'action': 'submit',
                            'msisdn_session': msisdn,
                            'email_session': email
                        });
                    });
                });
            }
            /*
             * Pay bill custom event
             * */
            if ($('.order-success-page-wrapper .custom-billpay').length) {
                $('.order-success-page-wrapper .custom-billpay').once().each(function() {
                    var email, msisdn;
                    getHashedValue($(this).attr("data-email"), function(result) {
                        email = result;
                    });
                    getHashedValue("6" + $(this).attr("data-msisdn"), function(result) {
                        msisdn = result;
                        dataLayer.push({
                            'event': 'payBill',
                            'category': 'payBill',
                            'action': 'submit',
                            'msisdn_session': msisdn,
                            'email_session': email
                        });
                    });
                });
            }

            /*
             * order success
             * */

            if ($('.datalayer-sucess-class-purchase').length) {

                productAfterCheckout = [];
                $('.datalayer-class-order-success').once().each(function() {


                    $datalayerWrapper = $(this).parents('.datalayer-wrapper'),
                        $datalayerPurchase = $datalayerWrapper.find('.datalayer-sucess-class-purchase'),
                        $datalayerSucessProduct = $datalayerWrapper.find('.datalayer-class-order-success'),
                        $msisdn = $datalayerSucessProduct.attr('data-msisdn'),
                        $subid = $datalayerSucessProduct.attr('data-subid'),
                        dimension2id = $(this).attr('data-id').toLowerCase();

                    // For reload take the data from local storage passed from reload page to success page
                    if ($(this).attr('data-list') === "prepaid reload") {
                        if (localStorage.getItem(dimension2id) != null) {
                            var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                            $(this).attr("data-dimension12", retrievedObject.dimension12);
                            $(this).attr("data-dimension4", retrievedObject.dimension4);
                            $(this).attr("data-position", retrievedObject.position);
                            localStorage.removeItem(dimension2id);
                        }
                    }
                    if (localStorage.getItem("after_pdp-" + dimension2id) != null) { //For bundled product
                        var retrievedObject = JSON.parse(localStorage.getItem("after_pdp-" + dimension2id));

                        setTimeout(function() {
                            localStorage.removeItem("after_pdp-" + dimension2id);
                            localStorage.removeItem(dimension2id);
                        }, 8000);

                    } else if (localStorage.getItem(dimension2id) != null) { //item present // FOr single plan, device and accesorries
                        if (Array.isArray(JSON.parse(localStorage.getItem(dimension2id)))) {
                            var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                        } else {
                            var retrievedObject = [];
                            retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                        }
                        setTimeout(function() {
                            localStorage.removeItem(dimension2id);
                        }, 8000);

                    } else {
                        getRetrivedAttrs(dimension2id, $(this));
                        var retrievedObject = [];
                        retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                        setTimeout(function() {
                            localStorage.removeItem(dimension2id);
                        }, 8000);

                    }
                    $.each(retrievedObject, function(key, retrivedAttrs) {

                        productAfterCheckout.push({
                            'name': retrivedAttrs.name,
                            'id': retrivedAttrs.id, // child sku
                            'brand': retrivedAttrs.brand,
                            'category': retrivedAttrs.category,
                            'variant': retrivedAttrs.variant,
                            'quantity': parseInt(retrivedAttrs.quantity),
                            'position': parseInt(retrivedAttrs.position),
                            'price': retrivedAttrs.price,
                            'coupon': retrivedAttrs.coupon, // coupon code
                            'dimension1': retrivedAttrs.dimension1, // product type
                            'dimension7': retrivedAttrs.dimension7, // plan group
                            'dimension4': retrivedAttrs.dimension4, // discount description
                            'dimension3': retrivedAttrs.dimension3, // sales item type
                            'dimension5': retrivedAttrs.dimension5, // storage
                            'dimension6': retrivedAttrs.dimension6, // product availability
                            'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                            'dimension2': retrivedAttrs.dimension2, // parent sku
                            'dimension9': retrivedAttrs.dimension9, // sim card
                            'dimension11': retrivedAttrs.dimension11, // addon message
                            'dimension12': retrivedAttrs.dimension12, // addon validity
                            'dimension13': retrivedAttrs.dimension13, // addon activation
                            'dimension15': retrivedAttrs.dimension15, // contract tenure
                            'dimension14': retrivedAttrs.dimension14, // addon country
                            'dimension22': retrivedAttrs.dimension22, // contract break fee
                            'dimension23': retrivedAttrs.dimension23,
                            'dimension31': retrivedAttrs.dimension31,
                            'dimension32': retrivedAttrs.dimension32,
                            'dimension33': retrivedAttrs.dimension33,
                            'dimension34': retrivedAttrs.dimension34
                        });

                    });
                });


                /* data-direct-success="true"
                 * when user lands directly on order success page
                 * pass checkoout step 1,2 and 3 on order success page.
                 * */

                if ($('.order-content-wrapper').attr("data-direct-success") === "true") {
                    $('.order-success-page-wrapper').once().each(function() {
                        for (var i = 1; i < 4; i++) {
                            //Step - 2 and 3: Pass it in ecommerce object //


                            try {
                                if (productAfterCheckout[0] == null) {
                                    retrivedObjectStatus = productAfterCheckout;
                                } else {
                                    retrivedObjectStatus = productAfterCheckout[0];
                                }
                            } catch (e) {
                                if (retrievedObject == null) {
                                    retrivedObjectStatus = productAfterCheckout;
                                } else {
                                    retrivedObjectStatus = productAfterCheckout[0];
                                }
                            }

                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        //'actionField': {'step': parseInt(i), 'option': retrivedAttrs.dimension3},
                                        'actionField': {
                                            'step': parseInt(i),
                                            'option': retrivedObjectStatus.dimension3
                                        },
                                        'products': productAfterCheckout
                                    }
                                }
                            }
                            dataLayer.push($ecommerceObject);
                        }
                    });
                }

                if ($datalayerPurchase && $datalayerPurchase.length) {
                    productCheckoutArray = ({
                        'id': $datalayerPurchase.attr('data-id'),
                        'affiliation': $datalayerPurchase.attr('data-affiliation'),
                        'revenue': $datalayerPurchase.attr('data-revenue'),
                        'tax': $datalayerPurchase.attr('data-tax'),
                        'shipping': $datalayerPurchase.attr('data-shipping'),
                        'coupon': $datalayerPurchase.attr('data-coupon'),
                        'dimension20': $datalayerPurchase.attr('data-dimension-20'),
                        'dimension16': $datalayerPurchase.attr('data-dimension-16'),
                        'dimension17': $datalayerPurchase.attr('data-dimension-17'),
                        'dimension19': $datalayerPurchase.attr('data-dimension-19'),
                        'dimension18': $datalayerPurchase.attr('data-dimension-18'),
                        'dimension21': $datalayerPurchase.attr('data-dimension-21')
                    });
                    $ecommerceObject = {
                        'event': 'purchase',
                        'ecommerce': {
                            'purchase': {
                                'actionField': productCheckoutArray,
                                'products': productAfterCheckout
                            }
                        }
                    }
                    dataLayer.push($ecommerceObject);
                }

            }

            /*
             * checkout stpes
             * */
            $('.checkout-steps-wrapper').once('dataLayer').one('inview', function() {
                if ($dataLayerCheckout.length) {
                    var options = [];
                    productAfterCheckout = [];
                    $($dataLayerCheckout).each(function(index) {
                        $this = $(this),
                            id = $this.attr('data-id'),
                            dimension2id = $this.attr('data-id');

                        if (localStorage.getItem("after_pdp-" + dimension2id) != null) { //For bundled product
                            var retrievedObject = JSON.parse(localStorage.getItem("after_pdp-" + dimension2id));
                        } else if (localStorage.getItem(dimension2id) != null) { //item present // FOr single plan, device and accesorries
                            if (Array.isArray(JSON.parse(localStorage.getItem(dimension2id)))) {
                                var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                            } else {
                                var retrievedObject = [];
                                retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                            }
                        } else {
                            getRetrivedAttrs(dimension2id, $this);
                            var retrievedObject = [];
                            retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                        }
                        $.each(retrievedObject, function(key, retrivedAttrs) {
                            if (retrivedAttrs.dimension3 && retrivedAttrs.dimension3 !== "" && options.indexOf(retrivedAttrs.dimension3) < 0) { // Take one value of dimension3 from all items
                                options.push(retrivedAttrs.dimension3); //Make the concatination of dimension3
                            }
                            productAfterCheckout.push({
                                'name': retrivedAttrs.name,
                                'id': retrivedAttrs.id, // child sku
                                'brand': retrivedAttrs.brand,
                                'category': retrivedAttrs.category,
                                'variant': retrivedAttrs.variant,
                                'quantity': parseInt(retrivedAttrs.quantity),
                                'position': parseInt(retrivedAttrs.position),
                                'price': retrivedAttrs.price,
                                'coupon': retrivedAttrs.coupon, // coupon code
                                'dimension1': retrivedAttrs.dimension1, // product type
                                'dimension7': retrivedAttrs.dimension7, // plan group
                                'dimension4': retrivedAttrs.dimension4, // discount description
                                'dimension3': retrivedAttrs.dimension3, // sales item type
                                'dimension5': retrivedAttrs.dimension5, // storage
                                'dimension6': retrivedAttrs.dimension6, // product availability
                                'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                                'dimension2': retrivedAttrs.dimension2, // parent sku
                                'dimension9': retrivedAttrs.dimension9, // sim card
                                'dimension11': retrivedAttrs.dimension11, // addon message
                                'dimension12': retrivedAttrs.dimension12, // addon validity
                                'dimension13': retrivedAttrs.dimension13, // addon activation
                                'dimension15': retrivedAttrs.dimension15, // contract tenure
                                'dimension14': retrivedAttrs.dimension14, // addon country
                                'dimension22': retrivedAttrs.dimension22, // contract break fee
                                'dimension23': retrivedAttrs.dimension23,
                                'dimension31': retrivedAttrs.dimension31,
                                'dimension32': retrivedAttrs.dimension32,
                                'dimension33': retrivedAttrs.dimension33,
                                'dimension34': retrivedAttrs.dimension34
                            });
                        });

                        if (index === $dataLayerCheckoutLength - 1) {
                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        'actionField': {
                                            'step': parseInt($this.attr('data-step')),
                                            'option': options.join("|")
                                        },
                                        'products': productAfterCheckout
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }
                    });
                }
            });

            /*
             * checkout differnt user journey
             * when user lands on step 1 and click of .form-checkout-action-wrapper.btn-primary which has data_nextstep="to-payment"
             * need to fire checkout step 2 and 3 after validation
             * */

            $('.form-checkout-action-wrapper .btn-primary[data-nextstep = to-payment]').once().on('mousedown', function() {
                var $address = $('#edit-billing-line1').val(),
                    $postCode = $("#edit-billing-postcode").val(),
                    $country = $('#edit-billing-country-id').val(),
                    $state = $('#edit-billing-state').val(),
                    $city = $('#edit-billing-city-name').val();
                var options = [];
                // Conditions
                productAfterCheckout = [];
                $($dataLayerCheckout).once().each(function(index) {


                    $this = $(this),
                        id = $this.attr('data-id'),
                        dimension2id = $this.attr('data-id');

                    if (localStorage.getItem("after_pdp-" + dimension2id) != null) { //For bundled product
                        var retrievedObject = JSON.parse(localStorage.getItem("after_pdp-" + dimension2id));
                    } else if (localStorage.getItem(dimension2id) != null) { //item present // FOr single plan, device and accesorries
                        if (Array.isArray(JSON.parse(localStorage.getItem(dimension2id)))) {
                            var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                        } else {
                            var retrievedObject = [];
                            retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                        }
                    } else {
                        getRetrivedAttrs(dimension2id, $this);
                        var retrievedObject = [];
                        retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                    }
                    $.each(retrievedObject, function(key, retrivedAttrs) {
                        if (retrivedAttrs.dimension3 && retrivedAttrs.dimension3 !== "" && options.indexOf(retrivedAttrs.dimension3) < 0) { // Take one value of dimension3 from all items
                            options.push(retrivedAttrs.dimension3); //Make the concatination of dimension3
                        }
                        productAfterCheckout.push({
                            'name': retrivedAttrs.name,
                            'id': retrivedAttrs.id, // child sku
                            'brand': retrivedAttrs.brand,
                            'category': retrivedAttrs.category,
                            'variant': retrivedAttrs.variant,
                            'quantity': parseInt(retrivedAttrs.quantity),
                            'position': parseInt(retrivedAttrs.position),
                            'price': retrivedAttrs.price,
                            'coupon': retrivedAttrs.coupon, // coupon code
                            'dimension1': retrivedAttrs.dimension1, // product type
                            'dimension7': retrivedAttrs.dimension7, // plan group
                            'dimension4': retrivedAttrs.dimension4, // discount description
                            'dimension3': retrivedAttrs.dimension3, // sales item type
                            'dimension5': retrivedAttrs.dimension5, // storage
                            'dimension6': retrivedAttrs.dimension6, // product availability
                            'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                            'dimension2': retrivedAttrs.dimension2, // parent sku
                            'dimension9': retrivedAttrs.dimension9, // sim card
                            'dimension11': retrivedAttrs.dimension11, // addon message
                            'dimension12': retrivedAttrs.dimension12, // addon validity
                            'dimension13': retrivedAttrs.dimension13, // addon activation
                            'dimension15': retrivedAttrs.dimension15, // contract tenure
                            'dimension14': retrivedAttrs.dimension14, // addon country
                            'dimension22': retrivedAttrs.dimension22, // contract break fee
                            'dimension23': retrivedAttrs.dimension23,
                            'dimension31': retrivedAttrs.dimension31,
                            'dimension32': retrivedAttrs.dimension32,
                            'dimension33': retrivedAttrs.dimension33,
                            'dimension34': retrivedAttrs.dimension34
                        });
                    });

                    /*check all required conditions and push step 2 and 3*/
                    if ($address != '' && $postCode != '' && $country != '' && $state != '' && $city != '') {

                        for (var i = 2; i < 4; i++) {
                            //Step - 2 and 3: Pass it in ecommerce object //
                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        'actionField': {
                                            'step': parseInt(i),
                                            'option': options.join("|")
                                        },
                                        'products': productAfterCheckout
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }
                    }
                    /*if choose from address book fire the event  then check if exist existing-address */
                    if ($('#edit-same-or-new-opt-addr-book:checked').length && $('.existing-address')) {
                        //Step - 2: Pass it in ecommerce object //
                        for (var i = 2; i < 4; i++) {
                            //Step - 2 and 3: Pass it in ecommerce object //
                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        'actionField': {
                                            'step': parseInt(i),
                                            'option': options.join("|")
                                        },
                                        'products': productAfterCheckout
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }
                    }

                });

            });


            // Below Function Executes On Form Submit


            $('.page-shipping-details #edit-submit').once().on('mousedown', function() {
                // Storing Field Values In Variables
                var $address = $('#edit-line1').val(),
                    $postCode = $("#edit-postcode").val(),
                    $country = $('#edit-country-id').val(),
                    $state = $('#edit-state').val(),
                    $city = $('#edit-city-name').val();
                var options = [];
                // Conditions

                productAfterCheckout = [];
                $($dataLayerCheckout).once().each(function(index) {
                    $this = $(this),
                        id = $this.attr('data-id'),
                        dimension2id = $this.attr('data-id');

                    if (localStorage.getItem("after_pdp-" + dimension2id) != null) { //For bundled product
                        var retrievedObject = JSON.parse(localStorage.getItem("after_pdp-" + dimension2id));
                    } else if (localStorage.getItem(dimension2id) != null) { //item present // FOr single plan, device and accesorries
                        if (Array.isArray(JSON.parse(localStorage.getItem(dimension2id)))) {
                            var retrievedObject = JSON.parse(localStorage.getItem(dimension2id));
                        } else {
                            var retrievedObject = [];
                            retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                        }
                    } else {
                        getRetrivedAttrs(dimension2id, $this);
                        var retrievedObject = [];
                        retrievedObject.push(JSON.parse(localStorage.getItem(dimension2id)));
                    }
                    $.each(retrievedObject, function(key, retrivedAttrs) {
                        if (retrivedAttrs.dimension3 && retrivedAttrs.dimension3 !== "" && options.indexOf(retrivedAttrs.dimension3) < 0) { // Take one value of dimension3 from all items
                            options.push(retrivedAttrs.dimension3); //Make the concatination of dimension3
                        }
                        productAfterCheckout.push({
                            'name': retrivedAttrs.name,
                            'id': retrivedAttrs.id, // child sku
                            'brand': retrivedAttrs.brand,
                            'category': retrivedAttrs.category,
                            'variant': retrivedAttrs.variant,
                            'quantity': parseInt(retrivedAttrs.quantity),
                            'position': parseInt(retrivedAttrs.position),
                            'price': retrivedAttrs.price,
                            'coupon': retrivedAttrs.coupon, // coupon code
                            'dimension1': retrivedAttrs.dimension1, // product type
                            'dimension7': retrivedAttrs.dimension7, // plan group
                            'dimension4': retrivedAttrs.dimension4, // discount description
                            'dimension3': retrivedAttrs.dimension3, // sales item type
                            'dimension5': retrivedAttrs.dimension5, // storage
                            'dimension6': retrivedAttrs.dimension6, // product availability
                            'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                            'dimension2': retrivedAttrs.dimension2, // parent sku
                            'dimension9': retrivedAttrs.dimension9, // sim card
                            'dimension11': retrivedAttrs.dimension11, // addon message
                            'dimension12': retrivedAttrs.dimension12, // addon validity
                            'dimension13': retrivedAttrs.dimension13, // addon activation
                            'dimension15': retrivedAttrs.dimension15, // contract tenure
                            'dimension14': retrivedAttrs.dimension14, // addon country
                            'dimension22': retrivedAttrs.dimension22, // contract break fee
                            'dimension23': retrivedAttrs.dimension23,
                            'dimension31': retrivedAttrs.dimension31,
                            'dimension32': retrivedAttrs.dimension32,
                            'dimension33': retrivedAttrs.dimension33,
                            'dimension34': retrivedAttrs.dimension34
                        });
                    });
                    if (index === $dataLayerCheckoutLength - 1) {
                        /*if choose from address book fire the event  then check if exist existing-address */
                        if ($('#edit-same-or-new-opt-addr-book:checked').length && $('.existing-address')) {

                            dynamicMarketing();
                            //Step - 2: Pass it in ecommerce object //
                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        'actionField': {
                                            'step': parseInt(3),
                                            'option': options.join("|")
                                        },
                                        'products': productAfterCheckout
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }

                        /*if new address check all conditions*/
                        if ($('#edit-same-or-new-opt-new-addr:checked').length) {
                            if ($address != '' && $postCode != '' && $country != '' && $state != '' && $city != '') {

                                dynamicMarketing();
                                //Step - 2: Pass it in ecommerce object //
                                $ecommerceObject = {
                                    'event': 'checkout',
                                    'ecommerce': {
                                        'checkout': {
                                            'actionField': {
                                                'step': parseInt(3),
                                                'option': options.join("|")
                                            },
                                            'products': productAfterCheckout
                                        }
                                    }
                                };
                                dataLayer.push($ecommerceObject);
                            }
                        }
                        /*if pick up from store then address-box has class list-focus */
                        if ($('#edit-same-or-new-opt-pick-from-store:checked').length && $('.list-focus')) {
                            dynamicMarketing();
                            //Step - 2: Pass it in ecommerce object //
                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        'actionField': {
                                            'step': parseInt(3),
                                            'option': options.join("|")
                                        },
                                        'products': productAfterCheckout
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }

                        /*if Same as Billing Address */
                        if ($('#edit-same-or-new-opt-billing-addr:checked').length) {
                            dynamicMarketing();
                            //Step - 2: Pass it in ecommerce object //
                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        'actionField': {
                                            'step': parseInt(3),
                                            'option': options.join("|")
                                        },
                                        'products': productAfterCheckout
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }

                    }; /* for the last div after product array is build*/
                });
            });


            function phonenumber($selector) {
                var phoneno = /^(01)[0-9]/;
                $selector = $selector || $('#edit-telephone');
                if ($selector.val().match(phoneno)) {
                    return true;
                }
                return false;
            }

            /* $(".btn-shipping-details").once().on('click', function () {
              if (phonenumber()) {
                getHashedValue($('#edit-telephone').val(), function(result) {
                  dataLayer.push({
                    'event': 'store',
                    'category': 'store',
                    'action': 'primaryNumber',
                    'msisdn': result// Hashed MSISDN. Should be encrypted.
                  });
                });
              }
            });*/

            /*
             *   Sort by Tracking
             * */

            $('.category-sortby-wrapper .dropdown-item').once().on('click', function() {
                var $this = $(this),
                    label = $(this).text().toLowerCase();
                if (window.location.href.indexOf('accessories') > 0) {
                    var action = "sortAccessories";
                } else if (window.location.href.indexOf('experience') > 0) {
                    var action = "sortExperience";
                } else {
                    var action = "sortPhone";
                }

                dataLayer.push({
                    'event': 'customEvent',
                    'category': 'shop',
                    'action': action,
                    'label': label, // featured / relevance / popularity / price - low to high / price - high to low / discount
                });
            });

            /*
             *  transaction goal tracking
             * */
            if ($('.transaction-goal-tracking').length) {
                var trackingAction = [],
                    trackingLabel = [];
                //Dimension 3 is label &  category is action
                //Dimension2 to get value from local storage
                $('.transaction-goal-tracking').once().each(function() {
                    if ($(this).attr("data-action") !== "" && $(this).attr("data-action") !== "") { // For reload and bill pay
                        trackingAction.push($(this).attr('data-action'));
                        trackingLabel.push($(this).attr('data-label'));
                    } else {
                        if ($(this).attr("data-id")) { //For single plan,  bundled produccts, device and accessories
                            var trackingDimension = $(this).attr("data-id");
                            if (localStorage.getItem("after_pdp-" + trackingDimension) != null) { //For bundled product
                                var retrievedObject = JSON.parse(localStorage.getItem("after_pdp-" + trackingDimension)),
                                    tracklab = ""; //Get all items
                                $.each(retrievedObject, function(key, value) { //Iterate with all items
                                    trackingAction.push(value.category); //Push all categories
                                    if (value.dimension3 && value.dimension3 !== "") { // Take one value of dimension3 from all items
                                        tracklab = value.dimension3;
                                    }
                                });
                                trackingLabel.push(tracklab);
                            } else if (localStorage.getItem(trackingDimension) != null) { //item present // FOr single plan, device and accesorries
                                if (Array.isArray(JSON.parse(localStorage.getItem(trackingDimension)))) {
                                    var retrievedObject = JSON.parse(localStorage.getItem(trackingDimension));
                                    $.each(retrievedObject, function(key, value) { //Iterate with all items
                                        if (value.category && value.category !== "") {
                                            trackingAction.push(value.category);
                                        }
                                        if (value.dimension3 && value.dimension3 !== "") {
                                            trackingLabel.push(value.dimension3);
                                        }
                                    });
                                } else {
                                    var retrievedObject = JSON.parse(localStorage.getItem(trackingDimension));
                                    if (retrievedObject.category && retrievedObject.category !== "") {
                                        trackingAction.push(retrievedObject.category);
                                    }
                                    if (retrievedObject.dimension3 && retrievedObject.dimension3 !== "") {
                                        trackingLabel.push(retrievedObject.dimension3);
                                    }
                                }
                            } else {
                                getRetrivedAttrs(trackingDimension, $(this));
                                var retrievedObject = JSON.parse(localStorage.getItem(trackingDimension));
                                if (retrievedObject.category && retrievedObject.category !== "") {
                                    trackingAction.push(retrievedObject.category);
                                }
                                if (retrievedObject.dimension3 && retrievedObject.dimension3 !== "") {
                                    trackingLabel.push(retrievedObject.dimension3);
                                }
                            }
                        }
                    }
                });
                dataLayer.push({
                    'event': 'transactionGoal',
                    'category': 'transactionGoal',
                    'action': trackingAction.length > 0 ? trackingAction.join("|") : undefined, //Merge with pipe
                    'label': trackingLabel.length > 0 ? trackingLabel.join("|") : undefined //Merge with pipe
                });
            }
            /*
             * Enable Auto-billing
             * */
            /*if ($('.enable-auto-billing').length) {
              $('.enable-auto-billing').once().each(function () {
                dataLayer.push({
                  'event': 'customEvent',
                  'category': 'autobilling',
                  'action': $(".enable-auto-billing").attr("data-action")
                });
              });
            }*/
            /*
             *  refund request
             * */

            $('.refund-button').once().on("click", function() {
                var transactionId = $('.transaction-id').attr('data-transaction-id');

                if (!$('.myaccount-refund-request-wrapper .form-checkbox:checked').length) {
                    return;
                }

                dataLayer.push({
                    'event': 'refund',
                    'ecommerce': {
                        'refund': {
                            'actionField': {
                                'id': transactionId
                            } // Transaction ID. Required for purchases and refunds. Not Order ID.
                        }
                    }
                });
            });
            /*
             *  RESUBMIT MNP request
             * */

            $mnpForm.find('.resubmit-button').once().on("click", function(e) {
                var msisdn = $mnpForm.find(".phone-number-wrapper input").val();
                getHashedValue("6" + msisdn, function(result) {
                    msisdn = result;
                });
                var $mainReason = $(".resubmit-mnp-reason-wrapper .resubmit-mnp-reason-container-header h4 .header-text");
                var reasonArray = [];
                $.each($mainReason, function(key, value) {
                    reasonArray.push($(value).text().toLowerCase());
                });

                dataLayer.push({
                    'event': 'mnp',
                    'category': 'mnp',
                    'action': 'resubmit',
                    'msisdn': msisdn, // hashed phone number of the user
                    'reason': reasonArray.join("|") // reason why the initial submission was rejected - PPA rejection reason
                });
            });

            /*
             *  email us contact support
             * */

            $(".webform-submission-form").once().on("submit", function() {
                var email, mobno, actionField, emailUsLabel, pushDatalayer = true;
                getHashedValue($(".webform-submission-form #edit-email").val(), function(result) {
                    email = result;
                });

                function isEmail(email) {
                    var regex = /^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/;
                    return regex.test(email);
                }

                function isPhoneNo(phoneno) {
                    var regex = /^[0-9\-\+]{9,15}$/;
                    return regex.test(phoneno);
                }
                //autobilling => #edit-sub-categories #edit-please-enter-months #edit-name #edit-email-id #edit-mobile-number
                if (window.location.href.indexOf("account-billing") > -1) {
                    if (
                        $('select.form-item-sub-categories').val() == "" ||
                        $('#edit-please-enter-months').val() == "" ||
                        $('#edit-name').val() == "" ||
                        $('#edit-email').val() == "" || !isEmail($('#edit-email').val()) ||
                        $('#edit-mobile-number').val() == "" ||
                        $('#edit-alternate-mobile-number').val() == ""
                    ) {
                        pushDatalayer = false; //if validation is fails
                    }
                }

                //network-coverage => #edit-what-issues-are-you-facing- # $('.form-radio').is(':checked')
                // #edit-select-your-network-signal  #edit-select-signal-strength #edit-name #edit-e-mail-address
                // #edit-mobile-number #edit-alternate-mobile-number
                if (window.location.href.indexOf("network-coverage") > -1) {
                    if (
                        $('select.form-item-sub-categories').val() == "" ||
                        !$('.form-radio').is(':checked') ||
                        $('#edit-select-your-network-signal').val() == "" ||
                        $('#edit-select-signal-strength').val() == "" ||
                        $('#edit-enter-your-location-pincode').val() == "" ||
                        $('#edit-when-did-you-face-this-issue-date').val() == "" ||
                        $('#edit-when-did-you-face-this-issue-time').val() == "" ||
                        $('#edit-name').val() == "" ||
                        $('#edit-email').val() == "" || !isEmail($('#edit-email').val()) ||
                        $('#edit-mobile-number').val() == "" || //!isPhoneNo($('#edit-mobile-number').val()) ||
                        $('#edit-alternate-mobile-number').val() == ""
                    ) {
                        pushDatalayer = false; //if validation is fails
                    }
                }

                //general-enquiry => #edit-what-issues-are-you-facing-
                // #edit-name #edit-email #edit-mobile-number #edit-alternate-mobile-number
                if (window.location.href.indexOf("general-enquiry") > -1) {
                    if (
                        $('select.form-item-sub-categories').val() == "" ||
                        $('#edit-name').val() == "" ||
                        $('#edit-email').val() == "" || !isEmail($('#edit-email').val()) ||
                        $('#edit-mobile-number').val() == "" ||
                        $('#edit-alternate-mobile-number').val() == ""
                    ) {
                        pushDatalayer = false; //if validation is fails
                    }
                }



                getHashedValue("6" + $(".webform-submission-form input.form-item-mobile-number").val(), function(result) {
                    mobno = result;
                    actionField = $(".email-us-tab-block .quick-tabs-wrapper li.active a").text().trim();
                    if (actionField == "Account & Billing") {
                        actionField = "account billing"
                    }

                    //get the label value
                    emailUsLabel = $("select.form-item-sub-categories").val().toLowerCase();
                    if (pushDatalayer === true) {
                        dataLayer.push({
                            'event': 'emailUs',
                            'category': 'formSubmit',
                            'action': actionField.toLowerCase(), //account billing | network coverage | general enquiry', // selected tab
                            'label': emailUsLabel, //dynamic | submit error, // issue selected in dropdown or error
                            'email_session': email, //dynamic // hashed email entered by user on form
                            'msisdn_session': mobno // hashed phone number of the user
                        });
                    }
                });
            });

            /*
             * on load of email-us url page check if error message available then fire
             * */
            if (window.location.href.indexOf("email-us") > -1 && $('.form-item').hasClass('has-error')) {
                var email, mobno;
                getHashedValue($(".webform-submission-form input.form-item-email-id").val(), function(result) {
                    email = result;
                });
                getHashedValue("6" + $(".webform-submission-form input.form-item-mobile-number").val(), function(result) {
                    mobno = result;
                    actionField = $(".email-us-tab-block .quick-tabs-wrapper li.active a").text().trim();
                    if (actionField == "Account & Billing") {
                        actionField = "account billing"
                    }
                    dataLayer.push({
                        'event': 'emailUs',
                        'category': 'formSubmit',
                        'action': actionField.toLowerCase(), //account billing | network coverage | general enquiry', // selected tab
                        'label': "submit error", //dynamic | submit error, // issue selected in dropdown or error
                        'email_session': email, //dynamic // hashed email entered by user on form
                        'msisdn_session': mobno // hashed phone number of the user
                    });
                });
            }
            if ($(".body-container").find(".mydigi-add-ons").length > 0) {
                $.each($(".body-container").find(".mydigi-add-ons .panel-body"), function(key, value) {
                    position = (key + 1);
                    $(this).find('.datalayer-class').attr('data-position', position)
                });
            }
            /*when element is completely in view*/
            $('[data-view="mydigi-addons"]').once('dataLayer').bind('inview', function(e, v, t) {
                var o = $(this);
                if (o.data('inviewtimer')) {
                    clearTimeout(o.data('inviewtimer'));
                    o.removeData('inviewtimer');
                }

                if (v) {
                    o.data('inviewtimer', setTimeout(function() {
                        if (t == 'top') {
                            o.data('seenTop', true);
                        } else if (t == 'bottom') {
                            o.data('seenBottom', true);
                        } else {
                            o.data('seenTop', true);
                            o.data('seenBottom', true);
                        }

                        if (o.data('seenTop') && o.data('seenBottom')) {
                            o.unbind('inview');
                            // here we will do WHAT WHE NEED (for ex. Call Ajax stats collector)
                            // ...

                            $this = o;

                            var $datalayerWrapper = $this.parents('.datalayer-wrapper');
                            if (!$datalayerWrapper.hasClass('impression-added')) {
                                $datalayerWrapper.addClass('impression-added');

                                productPush($this);
                            }
                        }
                    }, 50));
                }
            });
            var myDigiAddonsEventHandler = function($this) {
                var dimension2id = $this.parents(".datalayer-wrapper").find(".datalayer-class").attr("data-id");
                retrivedAttrs = getRetrivedAttrs(dimension2id, $this.parents(".datalayer-wrapper").find(".datalayer-class"), true);
                addonsProductArray = [{
                    'name': retrivedAttrs.name,
                    'id': retrivedAttrs.id, // child sku
                    'brand': retrivedAttrs.brand,
                    'category': retrivedAttrs.category,
                    'variant': retrivedAttrs.variant,
                    'quantity': 1,
                    'position': parseInt(retrivedAttrs.position),
                    'price': retrivedAttrs.price,
                    'coupon': retrivedAttrs.coupon, // coupon code
                    'dimension1': retrivedAttrs.dimension1, // product type
                    'dimension7': retrivedAttrs.dimension7, // plan group
                    'dimension4': retrivedAttrs.dimension4, // discount description
                    'dimension3': retrivedAttrs.dimension3, //retrivedAttrs.dimension3,  // sales item type
                    'dimension5': retrivedAttrs.dimension5, // storage
                    'dimension6': retrivedAttrs.dimension6, // product availability
                    'dimension10': retrivedAttrs.dimension10, // plan commitment value, amount paid each month
                    'dimension2': retrivedAttrs.dimension2, // parent sku
                    'dimension9': retrivedAttrs.dimension9, // sim card
                    'dimension11': retrivedAttrs.dimension11, // addon message
                    'dimension12': retrivedAttrs.dimension12, // addon validity
                    'dimension13': retrivedAttrs.dimension13, // addon activation
                    'dimension15': retrivedAttrs.dimension15, // contract tenure
                    'dimension14': retrivedAttrs.dimension14, // addon country
                    'dimension22': retrivedAttrs.dimension22, // contract break fee
                    'dimension23': retrivedAttrs.dimension23,
                    'dimension31': retrivedAttrs.dimension31,
                    'dimension32': retrivedAttrs.dimension32,
                    'dimension33': retrivedAttrs.dimension33,
                    'dimension34': retrivedAttrs.dimension34
                }];
            };

            $(".mydigi-add-ons .panel-row .btn-primary").once().on("click", function() {
                var dimension2id = $(this).parents(".datalayer-wrapper").find(".datalayer-class").attr("data-id");
                retrivedAttrs = getRetrivedAttrs(dimension2id, $(this).parents(".datalayer-wrapper").find(".datalayer-class"), true);
                myDigiAddonsEventHandler($(this));
                $ecommerceObject = {
                    'ecommerce': {
                        'click': {
                            'products': addonsProductArray,
                            'actionField': {
                                'list': retrivedAttrs.list
                            } // Pass the correct page type in place of 'Search Results'.
                        }
                    },
                    'event': 'productClick' //pass custom event
                };
                dataLayer.push($ecommerceObject);
                addonsProductArray[0].list = retrivedAttrs.list;
            });

            //When purchase is successfull
            $(window).on('shown.bs.modal', function(e) {

                $("#drupal-modal--dialog .add-ons-subscribe .btn-primary").once().on("mousedown", function() {

                    if ($(this).parents(".add-ons-subscribe").find(".unsubscribe").length > 0) {
                        return;
                    }
                    //Step - 1 Pass it in ecommerce object //
                    $ecommerceObject = {
                        'event': 'checkout',
                        'ecommerce': {
                            'checkout': {
                                'actionField': {
                                    'step': 1,
                                    'option': addonsProductArray[0].dimension3
                                },
                                'products': addonsProductArray
                            }
                        }
                    };
                    dataLayer.push($ecommerceObject);
                });
                if ($('.with-two-cta').length && $('.modal-icon img').attr("alt") === "purchase successful") {

                    $('.with-two-cta').once().each(function() {
                        $datalayerPurchase = $('.datalayer-sucess-class-purchase'),
                            $msisdn = $datalayerPurchase.attr('data-msisdn'),
                            $subid = $datalayerPurchase.attr('data-subid');

                        for (var i = 2; i < 4; i++) {
                            //Step - 2 and 3: Pass it in ecommerce object //
                            $ecommerceObject = {
                                'event': 'checkout',
                                'ecommerce': {
                                    'checkout': {
                                        'actionField': {
                                            'step': parseInt(i),
                                            'option': addonsProductArray[0].dimension3
                                        },
                                        'products': addonsProductArray
                                    }
                                }
                            };
                            dataLayer.push($ecommerceObject);
                        }


                        var addonsProductCheckoutArray = ({
                            'id': $datalayerPurchase.attr('data-id'),
                            'affiliation': $datalayerPurchase.attr('data-affiliation'),
                            'revenue': $datalayerPurchase.attr('data-revenue') ? $datalayerPurchase.attr('data-revenue').replace("rm", "").replace("RM", "") : $datalayerPurchase.attr('data-revenue'),
                            'tax': $datalayerPurchase.attr('data-tax'),
                            'shipping': $datalayerPurchase.attr('data-shipping'),
                            'coupon': $datalayerPurchase.attr('data-coupon'),
                            'dimension20': $datalayerPurchase.attr('data-dimension-20'),
                            'dimension16': $datalayerPurchase.attr('data-dimension-16') ? $datalayerPurchase.attr('data-dimension-16').toLowerCase() : $datalayerPurchase.attr('data-dimension-16'),
                            'dimension17': $datalayerPurchase.attr('data-dimension-17'),
                            'dimension19': $datalayerPurchase.attr('data-dimension-19'),
                            'dimension18': $datalayerPurchase.attr('data-dimension-18'),
                            'dimension21': $datalayerPurchase.attr('data-dimension-21')
                        });
                        $ecommerceObject = {
                            'event': 'purchase',
                            'ecommerce': {
                                'purchase': {
                                    'actionField': addonsProductCheckoutArray,
                                    'products': addonsProductArray
                                }
                            }
                        }
                        dataLayer.push($ecommerceObject);
                        dataLayer.push({
                            'event': 'transactionGoal',
                            'category': 'transactionGoal',
                            'action': addonsProductArray[0].category, //Merge with pipe
                            'label': addonsProductArray[0].dimension3 //Merge with pipe
                        });
                    });
                }
            })

            //Traclking user IDs in COP : DP-9105
            /*Successful Eligible Check on the Pospaid plans page for CoP*/
            if ($('.cop-section-wrapper .select-plan-text-wrapper .select-plan-text:not(.error)').length) {
                $('.cop-section-wrapper .select-plan-text-wrapper .select-plan-text:not(.error)').once().each(function() {
                    getHashedValue("6" + $(this).attr("data-msisdn"), function(result) {
                        dataLayer.push({
                            'event': 'upgradePlan',
                            'category': 'eligibilityCheck',
                            'action': 'submit',
                            'msisdn': result // Hashed MSISDN.
                        });
                    });
                });
            }
            /*When configuring phone at bundle purchase, user is able to upgrade his/her exiting plan*/
            if ($(".upgradeplanform .cop-finalize-form").length) {
                $(".upgradeplanform .cop-finalize-form").once().each(function() {
                    getHashedValue("6" + $(this).attr("data-msisdn"), function(result) {
                        dataLayer.push({
                            'event': 'configurePhone',
                            'category': 'eligibilityCheck',
                            'action': 'submit',
                            'msisdn': result // Hashed MSISDN.
                        });
                    });
                });
            }
            /*At port-in user is prompted to enter phone number which should be captured with custom event.*/
            if ($(".checkout-nric-inner-wrapper .principal-heading[data-msisdn]").length) {
                $(".checkout-nric-inner-wrapper .principal-heading[data-msisdn]").once().each(function() {
                    var msisdn = $(this).attr("data-msisdn").replace("-", "").replace(" ", "");
                    getHashedValue("6" + msisdn, function(result) {
                        dataLayer.push({
                            'event': 'portIn',
                            'category': 'NRICCheck',
                            'action': 'submit',
                            'msisdn': result // Hashed MSISDN.
                        });
                    });
                });
            }

            /* DP-9829 Micro Funnels add existing number  */
            $(".gsm-wrapper .gsm-profile-link").once().on("mousedown", function() {
                dataLayer.push({
                    'event': 'customEvent',
                    'category': 'account',
                    'action': 'addNumber'
                });
            });


            /* DP-9829 Micro Funnels  datalayer on successful TAC verification  */
            $(".gettac-customeEvent").once().on("mousedown", function() {
                if (phonenumber($(".born-gsm-profile .form-item-msisdn input"))) {
                    dataLayer.push({
                        'event': 'customEvent',
                        'category': 'account',
                        'action': 'getTac'
                    });
                }
            });

            /* DP-9829 Micro Funnels buy now click */
            $("#selectButton.btn-pdp-select").once().on("mousedown", function() {
                dataLayer.push({
                    'event': 'customEvent',
                    'category': 'eligibilityCheck',
                    'action': 'configurePhone',
                    'label': 'buy now'
                });
            });
            /*DP-9829 Micro Funnels datalayer on successful submission of NRIC number. */
            if ($(".checkout-nric-inner-wrapper.principal-line").length) {
                $(".checkout-nric-inner-wrapper.principal-line").once().each(function() {
                    dataLayer.push({
                        'event': 'customEvent',
                        'category': 'micro funnel',
                        'action': 'pre-cart',
                        'label': 'NRIC check'
                    });
                });
            }
            /* DP-9829 Micro Funnels  datalayer on click of proceed button/ TAC form load  */
            if ($(".upgradeplanform .tac-verfication-form").length) {
                $(".upgradeplanform .tac-verfication-form").once().each(function() {
                    dataLayer.push({
                        'event': 'customEvent',
                        'category': 'eligibilityCheck',
                        'action': 'upgradePlan',
                        'label': 'proceed'
                    });
                });
            }
            //Custom event compare DP-9827
            if ($(".phone-compare-custom").length > 0) {
                var compareLabel = [],
                    compareAction = [];
                setTimeout(function() {
                    $(".phone-compare-custom").once().each(function(index, value) {
                        var dimension2 = $(this).attr("data-id");
                        var retrievedObject = JSON.parse(localStorage.getItem(dimension2));
                        compareLabel.push(retrievedObject.name);
                        compareAction.push(retrievedObject.id || retrievedObject.dimension2);
                        if ($(".phone-compare-custom").length === (index + 1)) {
                            dataLayer.push({
                                'event': 'customEvent',
                                'category': 'phone compare',
                                'action': compareAction.join("|"), //Merge with pipe
                                'label': compareLabel.join("|") //Merge with pipe
                            });
                        }
                    });
                }, 1000);
            }
        }
    }
    // Dynamic remarketing
    var dynamicMarketing = function() {
        if ($(".dynamic-remarketing").length > 0) {
            var marketingSku = [];
            $(".dynamic-remarketing").each(function(index, value) {
                marketingSku.push($(this).attr("data-sku"));
                if ($(".dynamic-remarketing").length === (index + 1)) {
                    dataLayer.push({
                        'event': 'dynamicRemarketing',
                        'page_type': $(this).attr("data-page"),
                        'sku': marketingSku.join(","), //Merge with comma
                        'total_value': $(this).attr("data-totalvalue")
                    });
                }
            });
        }
    };
    dynamicMarketing();
}(jQuery));;
/*!
 * Select2 4.0.6-rc.1
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
;
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = function(root, jQuery) {
            if (jQuery === undefined) {
                // require('jQuery') returns a factory that requires window to
                // build a jQuery instance, we normalize how we use modules
                // that require this pattern but the window provided is a noop
                // if it's defined (how jquery works)
                if (typeof window !== 'undefined') {
                    jQuery = require('jquery');
                } else {
                    jQuery = require('jquery')(root);
                }
            }
            factory(jQuery);
            return jQuery;
        };
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function(jQuery) {
    // This is needed so we can catch the AMD loader configuration and use it
    // The inner file should be wrapped (by `banner.start.js`) in a function that
    // returns the AMD loader references.
    var S2 = (function() {
        // Restore the Select2 AMD loader so it can be used
        // Needed mostly in the language files, where the loader is not inserted
        if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
            var S2 = jQuery.fn.select2.amd;
        }
        var S2;
        (function() {
            if (!S2 || !S2.requirejs) {
                if (!S2) {
                    S2 = {};
                } else {
                    require = S2;
                }
                /**
                 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
                 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
                 */
                //Going sloppy to avoid 'use strict' string cost, but strict practices should
                //be followed.
                /*global setTimeout: false */

                var requirejs, require, define;
                (function(undef) {
                    var main, req, makeMap, handlers,
                        defined = {},
                        waiting = {},
                        config = {},
                        defining = {},
                        hasOwn = Object.prototype.hasOwnProperty,
                        aps = [].slice,
                        jsSuffixRegExp = /\.js$/;

                    function hasProp(obj, prop) {
                        return hasOwn.call(obj, prop);
                    }

                    /**
                     * Given a relative module name, like ./something, normalize it to
                     * a real name that can be mapped to a path.
                     * @param {String} name the relative name
                     * @param {String} baseName a real name that the name arg is relative
                     * to.
                     * @returns {String} normalized name
                     */
                    function normalize(name, baseName) {
                        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
                            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
                            baseParts = baseName && baseName.split("/"),
                            map = config.map,
                            starMap = (map && map['*']) || {};

                        //Adjust any relative paths.
                        if (name) {
                            name = name.split('/');
                            lastIndex = name.length - 1;

                            // If wanting node ID compatibility, strip .js from end
                            // of IDs. Have to do this here, and not in nameToUrl
                            // because node allows either .js or non .js to map
                            // to same file.
                            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                            }

                            // Starts with a '.' so need the baseName
                            if (name[0].charAt(0) === '.' && baseParts) {
                                //Convert baseName to array, and lop off the last part,
                                //so that . matches that 'directory' and not name of the baseName's
                                //module. For instance, baseName of 'one/two/three', maps to
                                //'one/two/three.js', but we want the directory, 'one/two' for
                                //this normalization.
                                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                                name = normalizedBaseParts.concat(name);
                            }

                            //start trimDots
                            for (i = 0; i < name.length; i++) {
                                part = name[i];
                                if (part === '.') {
                                    name.splice(i, 1);
                                    i -= 1;
                                } else if (part === '..') {
                                    // If at the start, or previous value is still ..,
                                    // keep them so that when converted to a path it may
                                    // still work when converted to a path, even though
                                    // as an ID it is less than ideal. In larger point
                                    // releases, may be better to just kick out an error.
                                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                                        continue;
                                    } else if (i > 0) {
                                        name.splice(i - 1, 2);
                                        i -= 2;
                                    }
                                }
                            }
                            //end trimDots

                            name = name.join('/');
                        }

                        //Apply map config if available.
                        if ((baseParts || starMap) && map) {
                            nameParts = name.split('/');

                            for (i = nameParts.length; i > 0; i -= 1) {
                                nameSegment = nameParts.slice(0, i).join("/");

                                if (baseParts) {
                                    //Find the longest baseName segment match in the config.
                                    //So, do joins on the biggest to smallest lengths of baseParts.
                                    for (j = baseParts.length; j > 0; j -= 1) {
                                        mapValue = map[baseParts.slice(0, j).join('/')];

                                        //baseName segment has  config, find if it has one for
                                        //this name.
                                        if (mapValue) {
                                            mapValue = mapValue[nameSegment];
                                            if (mapValue) {
                                                //Match, update name to the new value.
                                                foundMap = mapValue;
                                                foundI = i;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (foundMap) {
                                    break;
                                }

                                //Check for a star map match, but just hold on to it,
                                //if there is a shorter segment match later in a matching
                                //config, then favor over this star map.
                                if (!foundStarMap && starMap && starMap[nameSegment]) {
                                    foundStarMap = starMap[nameSegment];
                                    starI = i;
                                }
                            }

                            if (!foundMap && foundStarMap) {
                                foundMap = foundStarMap;
                                foundI = starI;
                            }

                            if (foundMap) {
                                nameParts.splice(0, foundI, foundMap);
                                name = nameParts.join('/');
                            }
                        }

                        return name;
                    }

                    function makeRequire(relName, forceSync) {
                        return function() {
                            //A version of a require function that passes a moduleName
                            //value for items that may need to
                            //look up paths relative to the moduleName
                            var args = aps.call(arguments, 0);

                            //If first arg is not require('string'), and there is only
                            //one arg, it is the array form without a callback. Insert
                            //a null so that the following concat is correct.
                            if (typeof args[0] !== 'string' && args.length === 1) {
                                args.push(null);
                            }
                            return req.apply(undef, args.concat([relName, forceSync]));
                        };
                    }

                    function makeNormalize(relName) {
                        return function(name) {
                            return normalize(name, relName);
                        };
                    }

                    function makeLoad(depName) {
                        return function(value) {
                            defined[depName] = value;
                        };
                    }

                    function callDep(name) {
                        if (hasProp(waiting, name)) {
                            var args = waiting[name];
                            delete waiting[name];
                            defining[name] = true;
                            main.apply(undef, args);
                        }

                        if (!hasProp(defined, name) && !hasProp(defining, name)) {
                            throw new Error('No ' + name);
                        }
                        return defined[name];
                    }

                    //Turns a plugin!resource to [plugin, resource]
                    //with the plugin being undefined if the name
                    //did not have a plugin prefix.
                    function splitPrefix(name) {
                        var prefix,
                            index = name ? name.indexOf('!') : -1;
                        if (index > -1) {
                            prefix = name.substring(0, index);
                            name = name.substring(index + 1, name.length);
                        }
                        return [prefix, name];
                    }

                    //Creates a parts array for a relName where first part is plugin ID,
                    //second part is resource ID. Assumes relName has already been normalized.
                    function makeRelParts(relName) {
                        return relName ? splitPrefix(relName) : [];
                    }

                    /**
                     * Makes a name map, normalizing the name, and using a plugin
                     * for normalization if necessary. Grabs a ref to plugin
                     * too, as an optimization.
                     */
                    makeMap = function(name, relParts) {
                        var plugin,
                            parts = splitPrefix(name),
                            prefix = parts[0],
                            relResourceName = relParts[1];

                        name = parts[1];

                        if (prefix) {
                            prefix = normalize(prefix, relResourceName);
                            plugin = callDep(prefix);
                        }

                        //Normalize according
                        if (prefix) {
                            if (plugin && plugin.normalize) {
                                name = plugin.normalize(name, makeNormalize(relResourceName));
                            } else {
                                name = normalize(name, relResourceName);
                            }
                        } else {
                            name = normalize(name, relResourceName);
                            parts = splitPrefix(name);
                            prefix = parts[0];
                            name = parts[1];
                            if (prefix) {
                                plugin = callDep(prefix);
                            }
                        }

                        //Using ridiculous property names for space reasons
                        return {
                            f: prefix ? prefix + '!' + name : name, //fullName
                            n: name,
                            pr: prefix,
                            p: plugin
                        };
                    };

                    function makeConfig(name) {
                        return function() {
                            return (config && config.config && config.config[name]) || {};
                        };
                    }

                    handlers = {
                        require: function(name) {
                            return makeRequire(name);
                        },
                        exports: function(name) {
                            var e = defined[name];
                            if (typeof e !== 'undefined') {
                                return e;
                            } else {
                                return (defined[name] = {});
                            }
                        },
                        module: function(name) {
                            return {
                                id: name,
                                uri: '',
                                exports: defined[name],
                                config: makeConfig(name)
                            };
                        }
                    };

                    main = function(name, deps, callback, relName) {
                        var cjsModule, depName, ret, map, i, relParts,
                            args = [],
                            callbackType = typeof callback,
                            usingExports;

                        //Use name if no relName
                        relName = relName || name;
                        relParts = makeRelParts(relName);

                        //Call the callback to define the module, if necessary.
                        if (callbackType === 'undefined' || callbackType === 'function') {
                            //Pull out the defined dependencies and pass the ordered
                            //values to the callback.
                            //Default to [require, exports, module] if no deps
                            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
                            for (i = 0; i < deps.length; i += 1) {
                                map = makeMap(deps[i], relParts);
                                depName = map.f;

                                //Fast path CommonJS standard dependencies.
                                if (depName === "require") {
                                    args[i] = handlers.require(name);
                                } else if (depName === "exports") {
                                    //CommonJS module spec 1.1
                                    args[i] = handlers.exports(name);
                                    usingExports = true;
                                } else if (depName === "module") {
                                    //CommonJS module spec 1.1
                                    cjsModule = args[i] = handlers.module(name);
                                } else if (hasProp(defined, depName) ||
                                    hasProp(waiting, depName) ||
                                    hasProp(defining, depName)) {
                                    args[i] = callDep(depName);
                                } else if (map.p) {
                                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                                    args[i] = defined[depName];
                                } else {
                                    throw new Error(name + ' missing ' + depName);
                                }
                            }

                            ret = callback ? callback.apply(defined[name], args) : undefined;

                            if (name) {
                                //If setting exports via "module" is in play,
                                //favor that over return value and exports. After that,
                                //favor a non-undefined return value over exports use.
                                if (cjsModule && cjsModule.exports !== undef &&
                                    cjsModule.exports !== defined[name]) {
                                    defined[name] = cjsModule.exports;
                                } else if (ret !== undef || !usingExports) {
                                    //Use the return value from the function.
                                    defined[name] = ret;
                                }
                            }
                        } else if (name) {
                            //May just be an object definition for the module. Only
                            //worry about defining if have a module name.
                            defined[name] = callback;
                        }
                    };

                    requirejs = require = req = function(deps, callback, relName, forceSync, alt) {
                        if (typeof deps === "string") {
                            if (handlers[deps]) {
                                //callback in this case is really relName
                                return handlers[deps](callback);
                            }
                            //Just return the module wanted. In this scenario, the
                            //deps arg is the module name, and second arg (if passed)
                            //is just the relName.
                            //Normalize module name, if it contains . or ..
                            return callDep(makeMap(deps, makeRelParts(callback)).f);
                        } else if (!deps.splice) {
                            //deps is a config object, not an array.
                            config = deps;
                            if (config.deps) {
                                req(config.deps, config.callback);
                            }
                            if (!callback) {
                                return;
                            }

                            if (callback.splice) {
                                //callback is an array, which means it is a dependency list.
                                //Adjust args if there are dependencies
                                deps = callback;
                                callback = relName;
                                relName = null;
                            } else {
                                deps = undef;
                            }
                        }

                        //Support require(['a'])
                        callback = callback || function() {};

                        //If relName is a function, it is an errback handler,
                        //so remove it.
                        if (typeof relName === 'function') {
                            relName = forceSync;
                            forceSync = alt;
                        }

                        //Simulate async callback;
                        if (forceSync) {
                            main(undef, deps, callback, relName);
                        } else {
                            //Using a non-zero value because of concern for what old browsers
                            //do, and latest browsers "upgrade" to 4 if lower value is used:
                            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                            //If want a value immediately, use require('id') instead -- something
                            //that works in almond on the global level, but not guaranteed and
                            //unlikely to work in other AMD implementations.
                            setTimeout(function() {
                                main(undef, deps, callback, relName);
                            }, 4);
                        }

                        return req;
                    };

                    /**
                     * Just drops the config on the floor, but returns req in case
                     * the config return value is used.
                     */
                    req.config = function(cfg) {
                        return req(cfg);
                    };

                    /**
                     * Expose module registry for debugging and tooling
                     */
                    requirejs._defined = defined;

                    define = function(name, deps, callback) {
                        if (typeof name !== 'string') {
                            throw new Error('See almond README: incorrect module build, no module name');
                        }

                        //This module may not have dependencies
                        if (!deps.splice) {
                            //deps is not an array, so probably means
                            //an object literal or factory function for
                            //the value. Adjust args.
                            callback = deps;
                            deps = [];
                        }

                        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                            waiting[name] = [name, deps, callback];
                        }
                    };

                    define.amd = {
                        jQuery: true
                    };
                }());

                S2.requirejs = requirejs;
                S2.require = require;
                S2.define = define;
            }
        }());
        S2.define("almond", function() {});

        /* global jQuery:false, $:false */
        S2.define('jquery', [], function() {
            var _$ = jQuery || $;

            if (_$ == null && console && console.error) {
                console.error(
                    'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
                    'found. Make sure that you are including jQuery before Select2 on your ' +
                    'web page.'
                );
            }

            return _$;
        });

        S2.define('select2/utils', [
            'jquery'
        ], function($) {
            var Utils = {};

            Utils.Extend = function(ChildClass, SuperClass) {
                var __hasProp = {}.hasOwnProperty;

                function BaseConstructor() {
                    this.constructor = ChildClass;
                }

                for (var key in SuperClass) {
                    if (__hasProp.call(SuperClass, key)) {
                        ChildClass[key] = SuperClass[key];
                    }
                }

                BaseConstructor.prototype = SuperClass.prototype;
                ChildClass.prototype = new BaseConstructor();
                ChildClass.__super__ = SuperClass.prototype;

                return ChildClass;
            };

            function getMethods(theClass) {
                var proto = theClass.prototype;

                var methods = [];

                for (var methodName in proto) {
                    var m = proto[methodName];

                    if (typeof m !== 'function') {
                        continue;
                    }

                    if (methodName === 'constructor') {
                        continue;
                    }

                    methods.push(methodName);
                }

                return methods;
            }

            Utils.Decorate = function(SuperClass, DecoratorClass) {
                var decoratedMethods = getMethods(DecoratorClass);
                var superMethods = getMethods(SuperClass);

                function DecoratedClass() {
                    var unshift = Array.prototype.unshift;

                    var argCount = DecoratorClass.prototype.constructor.length;

                    var calledConstructor = SuperClass.prototype.constructor;

                    if (argCount > 0) {
                        unshift.call(arguments, SuperClass.prototype.constructor);

                        calledConstructor = DecoratorClass.prototype.constructor;
                    }

                    calledConstructor.apply(this, arguments);
                }

                DecoratorClass.displayName = SuperClass.displayName;

                function ctr() {
                    this.constructor = DecoratedClass;
                }

                DecoratedClass.prototype = new ctr();

                for (var m = 0; m < superMethods.length; m++) {
                    var superMethod = superMethods[m];

                    DecoratedClass.prototype[superMethod] =
                        SuperClass.prototype[superMethod];
                }

                var calledMethod = function(methodName) {
                    // Stub out the original method if it's not decorating an actual method
                    var originalMethod = function() {};

                    if (methodName in DecoratedClass.prototype) {
                        originalMethod = DecoratedClass.prototype[methodName];
                    }

                    var decoratedMethod = DecoratorClass.prototype[methodName];

                    return function() {
                        var unshift = Array.prototype.unshift;

                        unshift.call(arguments, originalMethod);

                        return decoratedMethod.apply(this, arguments);
                    };
                };

                for (var d = 0; d < decoratedMethods.length; d++) {
                    var decoratedMethod = decoratedMethods[d];

                    DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
                }

                return DecoratedClass;
            };

            var Observable = function() {
                this.listeners = {};
            };

            Observable.prototype.on = function(event, callback) {
                this.listeners = this.listeners || {};

                if (event in this.listeners) {
                    this.listeners[event].push(callback);
                } else {
                    this.listeners[event] = [callback];
                }
            };

            Observable.prototype.trigger = function(event) {
                var slice = Array.prototype.slice;
                var params = slice.call(arguments, 1);

                this.listeners = this.listeners || {};

                // Params should always come in as an array
                if (params == null) {
                    params = [];
                }

                // If there are no arguments to the event, use a temporary object
                if (params.length === 0) {
                    params.push({});
                }

                // Set the `_type` of the first object to the event
                params[0]._type = event;

                if (event in this.listeners) {
                    this.invoke(this.listeners[event], slice.call(arguments, 1));
                }

                if ('*' in this.listeners) {
                    this.invoke(this.listeners['*'], arguments);
                }
            };

            Observable.prototype.invoke = function(listeners, params) {
                for (var i = 0, len = listeners.length; i < len; i++) {
                    listeners[i].apply(this, params);
                }
            };

            Utils.Observable = Observable;

            Utils.generateChars = function(length) {
                var chars = '';

                for (var i = 0; i < length; i++) {
                    var randomChar = Math.floor(Math.random() * 36);
                    chars += randomChar.toString(36);
                }

                return chars;
            };

            Utils.bind = function(func, context) {
                return function() {
                    func.apply(context, arguments);
                };
            };

            Utils._convertData = function(data) {
                for (var originalKey in data) {
                    var keys = originalKey.split('-');

                    var dataLevel = data;

                    if (keys.length === 1) {
                        continue;
                    }

                    for (var k = 0; k < keys.length; k++) {
                        var key = keys[k];

                        // Lowercase the first letter
                        // By default, dash-separated becomes camelCase
                        key = key.substring(0, 1).toLowerCase() + key.substring(1);

                        if (!(key in dataLevel)) {
                            dataLevel[key] = {};
                        }

                        if (k == keys.length - 1) {
                            dataLevel[key] = data[originalKey];
                        }

                        dataLevel = dataLevel[key];
                    }

                    delete data[originalKey];
                }

                return data;
            };

            Utils.hasScroll = function(index, el) {
                // Adapted from the function created by @ShadowScripter
                // and adapted by @BillBarry on the Stack Exchange Code Review website.
                // The original code can be found at
                // http://codereview.stackexchange.com/q/13338
                // and was designed to be used with the Sizzle selector engine.

                var $el = $(el);
                var overflowX = el.style.overflowX;
                var overflowY = el.style.overflowY;

                //Check both x and y declarations
                if (overflowX === overflowY &&
                    (overflowY === 'hidden' || overflowY === 'visible')) {
                    return false;
                }

                if (overflowX === 'scroll' || overflowY === 'scroll') {
                    return true;
                }

                return ($el.innerHeight() < el.scrollHeight ||
                    $el.innerWidth() < el.scrollWidth);
            };

            Utils.escapeMarkup = function(markup) {
                var replaceMap = {
                    '\\': '&#92;',
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    '\'': '&#39;',
                    '/': '&#47;'
                };

                // Do not try to escape the markup if it's not a string
                if (typeof markup !== 'string') {
                    return markup;
                }

                return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
                    return replaceMap[match];
                });
            };

            // Append an array of jQuery nodes to a given element.
            Utils.appendMany = function($element, $nodes) {
                // jQuery 1.7.x does not support $.fn.append() with an array
                // Fall back to a jQuery object collection using $.fn.add()
                if ($.fn.jquery.substr(0, 3) === '1.7') {
                    var $jqNodes = $();

                    $.map($nodes, function(node) {
                        $jqNodes = $jqNodes.add(node);
                    });

                    $nodes = $jqNodes;
                }

                $element.append($nodes);
            };

            // Cache objects in Utils.__cache instead of $.data (see #4346)
            Utils.__cache = {};

            var id = 0;
            Utils.GetUniqueElementId = function(element) {
                // Get a unique element Id. If element has no id,
                // creates a new unique number, stores it in the id
                // attribute and returns the new id.
                // If an id already exists, it simply returns it.

                var select2Id = element.getAttribute('data-select2-id');
                if (select2Id == null) {
                    // If element has id, use it.
                    if (element.id) {
                        select2Id = element.id;
                        element.setAttribute('data-select2-id', select2Id);
                    } else {
                        element.setAttribute('data-select2-id', ++id);
                        select2Id = id.toString();
                    }
                }
                return select2Id;
            };

            Utils.StoreData = function(element, name, value) {
                // Stores an item in the cache for a specified element.
                // name is the cache key.
                var id = Utils.GetUniqueElementId(element);
                if (!Utils.__cache[id]) {
                    Utils.__cache[id] = {};
                }

                Utils.__cache[id][name] = value;
            };

            Utils.GetData = function(element, name) {
                // Retrieves a value from the cache by its key (name)
                // name is optional. If no name specified, return
                // all cache items for the specified element.
                // and for a specified element.
                var id = Utils.GetUniqueElementId(element);
                if (name) {
                    if (Utils.__cache[id]) {
                        return Utils.__cache[id][name] != null ?
                            Utils.__cache[id][name] :
                            $(element).data(name); // Fallback to HTML5 data attribs.
                    }
                    return $(element).data(name); // Fallback to HTML5 data attribs.
                } else {
                    return Utils.__cache[id];
                }
            };

            Utils.RemoveData = function(element) {
                // Removes all cached items for a specified element.
                var id = Utils.GetUniqueElementId(element);
                if (Utils.__cache[id] != null) {
                    delete Utils.__cache[id];
                }
            };

            return Utils;
        });

        S2.define('select2/results', [
            'jquery',
            './utils'
        ], function($, Utils) {
            function Results($element, options, dataAdapter) {
                this.$element = $element;
                this.data = dataAdapter;
                this.options = options;

                Results.__super__.constructor.call(this);
            }

            Utils.Extend(Results, Utils.Observable);

            Results.prototype.render = function() {
                var $results = $(
                    '<ul class="select2-results__options" role="tree"></ul>'
                );

                if (this.options.get('multiple')) {
                    $results.attr('aria-multiselectable', 'true');
                }

                this.$results = $results;

                return $results;
            };

            Results.prototype.clear = function() {
                this.$results.empty();
            };

            Results.prototype.displayMessage = function(params) {
                var escapeMarkup = this.options.get('escapeMarkup');

                this.clear();
                this.hideLoading();

                var $message = $(
                    '<li role="treeitem" aria-live="assertive"' +
                    ' class="select2-results__option"></li>'
                );

                var message = this.options.get('translations').get(params.message);

                $message.append(
                    escapeMarkup(
                        message(params.args)
                    )
                );

                $message[0].className += ' select2-results__message';

                this.$results.append($message);
            };

            Results.prototype.hideMessages = function() {
                this.$results.find('.select2-results__message').remove();
            };

            Results.prototype.append = function(data) {
                this.hideLoading();

                var $options = [];

                if (data.results == null || data.results.length === 0) {
                    if (this.$results.children().length === 0) {
                        this.trigger('results:message', {
                            message: 'noResults'
                        });
                    }

                    return;
                }

                data.results = this.sort(data.results);

                for (var d = 0; d < data.results.length; d++) {
                    var item = data.results[d];

                    var $option = this.option(item);

                    $options.push($option);
                }

                this.$results.append($options);
            };

            Results.prototype.position = function($results, $dropdown) {
                var $resultsContainer = $dropdown.find('.select2-results');
                $resultsContainer.append($results);
            };

            Results.prototype.sort = function(data) {
                var sorter = this.options.get('sorter');

                return sorter(data);
            };

            Results.prototype.highlightFirstItem = function() {
                var $options = this.$results
                    .find('.select2-results__option[aria-selected]');

                var $selected = $options.filter('[aria-selected=true]');

                // Check if there are any selected options
                if ($selected.length > 0) {
                    // If there are selected options, highlight the first
                    $selected.first().trigger('mouseenter');
                } else {
                    // If there are no selected options, highlight the first option
                    // in the dropdown
                    $options.first().trigger('mouseenter');
                }

                this.ensureHighlightVisible();
            };

            Results.prototype.setClasses = function() {
                var self = this;

                this.data.current(function(selected) {
                    var selectedIds = $.map(selected, function(s) {
                        return s.id.toString();
                    });

                    var $options = self.$results
                        .find('.select2-results__option[aria-selected]');

                    $options.each(function() {
                        var $option = $(this);

                        var item = Utils.GetData(this, 'data');

                        // id needs to be converted to a string when comparing
                        var id = '' + item.id;

                        if ((item.element != null && item.element.selected) ||
                            (item.element == null && $.inArray(id, selectedIds) > -1)) {
                            $option.attr('aria-selected', 'true');
                        } else {
                            $option.attr('aria-selected', 'false');
                        }
                    });

                });
            };

            Results.prototype.showLoading = function(params) {
                this.hideLoading();

                var loadingMore = this.options.get('translations').get('searching');

                var loading = {
                    disabled: true,
                    loading: true,
                    text: loadingMore(params)
                };
                var $loading = this.option(loading);
                $loading.className += ' loading-results';

                this.$results.prepend($loading);
            };

            Results.prototype.hideLoading = function() {
                this.$results.find('.loading-results').remove();
            };

            Results.prototype.option = function(data) {
                var option = document.createElement('li');
                option.className = 'select2-results__option';

                var attrs = {
                    'role': 'treeitem',
                    'aria-selected': 'false'
                };

                if (data.disabled) {
                    delete attrs['aria-selected'];
                    attrs['aria-disabled'] = 'true';
                }

                if (data.id == null) {
                    delete attrs['aria-selected'];
                }

                if (data._resultId != null) {
                    option.id = data._resultId;
                }

                if (data.title) {
                    option.title = data.title;
                }

                if (data.children) {
                    attrs.role = 'group';
                    attrs['aria-label'] = data.text;
                    delete attrs['aria-selected'];
                }

                for (var attr in attrs) {
                    var val = attrs[attr];

                    option.setAttribute(attr, val);
                }

                if (data.children) {
                    var $option = $(option);

                    var label = document.createElement('strong');
                    label.className = 'select2-results__group';

                    var $label = $(label);
                    this.template(data, label);

                    var $children = [];

                    for (var c = 0; c < data.children.length; c++) {
                        var child = data.children[c];

                        var $child = this.option(child);

                        $children.push($child);
                    }

                    var $childrenContainer = $('<ul></ul>', {
                        'class': 'select2-results__options select2-results__options--nested'
                    });

                    $childrenContainer.append($children);

                    $option.append(label);
                    $option.append($childrenContainer);
                } else {
                    this.template(data, option);
                }

                Utils.StoreData(option, 'data', data);

                return option;
            };

            Results.prototype.bind = function(container, $container) {
                var self = this;

                var id = container.id + '-results';

                this.$results.attr('id', id);

                container.on('results:all', function(params) {
                    self.clear();
                    self.append(params.data);

                    if (container.isOpen()) {
                        self.setClasses();
                        self.highlightFirstItem();
                    }
                });

                container.on('results:append', function(params) {
                    self.append(params.data);

                    if (container.isOpen()) {
                        self.setClasses();
                    }
                });

                container.on('query', function(params) {
                    self.hideMessages();
                    self.showLoading(params);
                });

                container.on('select', function() {
                    if (!container.isOpen()) {
                        return;
                    }

                    self.setClasses();
                    self.highlightFirstItem();
                });

                container.on('unselect', function() {
                    if (!container.isOpen()) {
                        return;
                    }

                    self.setClasses();
                    self.highlightFirstItem();
                });

                container.on('open', function() {
                    // When the dropdown is open, aria-expended="true"
                    self.$results.attr('aria-expanded', 'true');
                    self.$results.attr('aria-hidden', 'false');

                    self.setClasses();
                    self.ensureHighlightVisible();
                });

                container.on('close', function() {
                    // When the dropdown is closed, aria-expended="false"
                    self.$results.attr('aria-expanded', 'false');
                    self.$results.attr('aria-hidden', 'true');
                    self.$results.removeAttr('aria-activedescendant');
                });

                container.on('results:toggle', function() {
                    var $highlighted = self.getHighlightedResults();

                    if ($highlighted.length === 0) {
                        return;
                    }

                    $highlighted.trigger('mouseup');
                });

                container.on('results:select', function() {
                    var $highlighted = self.getHighlightedResults();

                    if ($highlighted.length === 0) {
                        return;
                    }

                    var data = Utils.GetData($highlighted[0], 'data');

                    if ($highlighted.attr('aria-selected') == 'true') {
                        self.trigger('close', {});
                    } else {
                        self.trigger('select', {
                            data: data
                        });
                    }
                });

                container.on('results:previous', function() {
                    var $highlighted = self.getHighlightedResults();

                    var $options = self.$results.find('[aria-selected]');

                    var currentIndex = $options.index($highlighted);

                    // If we are already at te top, don't move further
                    // If no options, currentIndex will be -1
                    if (currentIndex <= 0) {
                        return;
                    }

                    var nextIndex = currentIndex - 1;

                    // If none are highlighted, highlight the first
                    if ($highlighted.length === 0) {
                        nextIndex = 0;
                    }

                    var $next = $options.eq(nextIndex);

                    $next.trigger('mouseenter');

                    var currentOffset = self.$results.offset().top;
                    var nextTop = $next.offset().top;
                    var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

                    if (nextIndex === 0) {
                        self.$results.scrollTop(0);
                    } else if (nextTop - currentOffset < 0) {
                        self.$results.scrollTop(nextOffset);
                    }
                });

                container.on('results:next', function() {
                    var $highlighted = self.getHighlightedResults();

                    var $options = self.$results.find('[aria-selected]');

                    var currentIndex = $options.index($highlighted);

                    var nextIndex = currentIndex + 1;

                    // If we are at the last option, stay there
                    if (nextIndex >= $options.length) {
                        return;
                    }

                    var $next = $options.eq(nextIndex);

                    $next.trigger('mouseenter');

                    var currentOffset = self.$results.offset().top +
                        self.$results.outerHeight(false);
                    var nextBottom = $next.offset().top + $next.outerHeight(false);
                    var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

                    if (nextIndex === 0) {
                        self.$results.scrollTop(0);
                    } else if (nextBottom > currentOffset) {
                        self.$results.scrollTop(nextOffset);
                    }
                });

                container.on('results:focus', function(params) {
                    params.element.addClass('select2-results__option--highlighted');
                });

                container.on('results:message', function(params) {
                    self.displayMessage(params);
                });

                if ($.fn.mousewheel) {
                    this.$results.on('mousewheel', function(e) {
                        var top = self.$results.scrollTop();

                        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

                        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
                        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

                        if (isAtTop) {
                            self.$results.scrollTop(0);

                            e.preventDefault();
                            e.stopPropagation();
                        } else if (isAtBottom) {
                            self.$results.scrollTop(
                                self.$results.get(0).scrollHeight - self.$results.height()
                            );

                            e.preventDefault();
                            e.stopPropagation();
                        }
                    });
                }

                this.$results.on('mouseup', '.select2-results__option[aria-selected]',
                    function(evt) {
                        var $this = $(this);

                        var data = Utils.GetData(this, 'data');

                        if ($this.attr('aria-selected') === 'true') {
                            if (self.options.get('multiple')) {
                                self.trigger('unselect', {
                                    originalEvent: evt,
                                    data: data
                                });
                            } else {
                                self.trigger('close', {});
                            }

                            return;
                        }

                        self.trigger('select', {
                            originalEvent: evt,
                            data: data
                        });
                    });

                this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
                    function(evt) {
                        var data = Utils.GetData(this, 'data');

                        self.getHighlightedResults()
                            .removeClass('select2-results__option--highlighted');

                        self.trigger('results:focus', {
                            data: data,
                            element: $(this)
                        });
                    });
            };

            Results.prototype.getHighlightedResults = function() {
                var $highlighted = this.$results
                    .find('.select2-results__option--highlighted');

                return $highlighted;
            };

            Results.prototype.destroy = function() {
                this.$results.remove();
            };

            Results.prototype.ensureHighlightVisible = function() {
                var $highlighted = this.getHighlightedResults();

                if ($highlighted.length === 0) {
                    return;
                }

                var $options = this.$results.find('[aria-selected]');

                var currentIndex = $options.index($highlighted);

                var currentOffset = this.$results.offset().top;
                var nextTop = $highlighted.offset().top;
                var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

                var offsetDelta = nextTop - currentOffset;
                nextOffset -= $highlighted.outerHeight(false) * 2;

                if (currentIndex <= 2) {
                    this.$results.scrollTop(0);
                } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
                    this.$results.scrollTop(nextOffset);
                }
            };

            Results.prototype.template = function(result, container) {
                var template = this.options.get('templateResult');
                var escapeMarkup = this.options.get('escapeMarkup');

                var content = template(result, container);

                if (content == null) {
                    container.style.display = 'none';
                } else if (typeof content === 'string') {
                    container.innerHTML = escapeMarkup(content);
                } else {
                    $(container).append(content);
                }
            };

            return Results;
        });

        S2.define('select2/keys', [

        ], function() {
            var KEYS = {
                BACKSPACE: 8,
                TAB: 9,
                ENTER: 13,
                SHIFT: 16,
                CTRL: 17,
                ALT: 18,
                ESC: 27,
                SPACE: 32,
                PAGE_UP: 33,
                PAGE_DOWN: 34,
                END: 35,
                HOME: 36,
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                DELETE: 46
            };

            return KEYS;
        });

        S2.define('select2/selection/base', [
            'jquery',
            '../utils',
            '../keys'
        ], function($, Utils, KEYS) {
            function BaseSelection($element, options) {
                this.$element = $element;
                this.options = options;

                BaseSelection.__super__.constructor.call(this);
            }

            Utils.Extend(BaseSelection, Utils.Observable);

            BaseSelection.prototype.render = function() {
                var $selection = $(
                    '<span class="select2-selection" role="combobox" ' +
                    ' aria-haspopup="true" aria-expanded="false">' +
                    '</span>'
                );

                this._tabindex = 0;

                if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
                    this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
                } else if (this.$element.attr('tabindex') != null) {
                    this._tabindex = this.$element.attr('tabindex');
                }

                $selection.attr('title', this.$element.attr('title'));
                $selection.attr('tabindex', this._tabindex);

                this.$selection = $selection;

                return $selection;
            };

            BaseSelection.prototype.bind = function(container, $container) {
                var self = this;

                var id = container.id + '-container';
                var resultsId = container.id + '-results';

                this.container = container;

                this.$selection.on('focus', function(evt) {
                    self.trigger('focus', evt);
                });

                this.$selection.on('blur', function(evt) {
                    self._handleBlur(evt);
                });

                this.$selection.on('keydown', function(evt) {
                    self.trigger('keypress', evt);

                    if (evt.which === KEYS.SPACE) {
                        evt.preventDefault();
                    }
                });

                container.on('results:focus', function(params) {
                    self.$selection.attr('aria-activedescendant', params.data._resultId);
                });

                container.on('selection:update', function(params) {
                    self.update(params.data);
                });

                container.on('open', function() {
                    // When the dropdown is open, aria-expanded="true"
                    self.$selection.attr('aria-expanded', 'true');
                    self.$selection.attr('aria-owns', resultsId);

                    self._attachCloseHandler(container);
                });

                container.on('close', function() {
                    // When the dropdown is closed, aria-expanded="false"
                    self.$selection.attr('aria-expanded', 'false');
                    self.$selection.removeAttr('aria-activedescendant');
                    self.$selection.removeAttr('aria-owns');

                    self.$selection.focus();
                    window.setTimeout(function() {
                        self.$selection.focus();
                    }, 0);

                    self._detachCloseHandler(container);
                });

                container.on('enable', function() {
                    self.$selection.attr('tabindex', self._tabindex);
                });

                container.on('disable', function() {
                    self.$selection.attr('tabindex', '-1');
                });
            };

            BaseSelection.prototype._handleBlur = function(evt) {
                var self = this;

                // This needs to be delayed as the active element is the body when the tab
                // key is pressed, possibly along with others.
                window.setTimeout(function() {
                    // Don't trigger `blur` if the focus is still in the selection
                    if (
                        (document.activeElement == self.$selection[0]) ||
                        ($.contains(self.$selection[0], document.activeElement))
                    ) {
                        return;
                    }

                    self.trigger('blur', evt);
                }, 1);
            };

            BaseSelection.prototype._attachCloseHandler = function(container) {
                var self = this;

                $(document.body).on('mousedown.select2.' + container.id, function(e) {
                    var $target = $(e.target);

                    var $select = $target.closest('.select2');

                    var $all = $('.select2.select2-container--open');

                    $all.each(function() {
                        var $this = $(this);

                        if (this == $select[0]) {
                            return;
                        }

                        var $element = Utils.GetData(this, 'element');

                        $element.select2('close');
                    });
                });
            };

            BaseSelection.prototype._detachCloseHandler = function(container) {
                $(document.body).off('mousedown.select2.' + container.id);
            };

            BaseSelection.prototype.position = function($selection, $container) {
                var $selectionContainer = $container.find('.selection');
                $selectionContainer.append($selection);
            };

            BaseSelection.prototype.destroy = function() {
                this._detachCloseHandler(this.container);
            };

            BaseSelection.prototype.update = function(data) {
                throw new Error('The `update` method must be defined in child classes.');
            };

            return BaseSelection;
        });

        S2.define('select2/selection/single', [
            'jquery',
            './base',
            '../utils',
            '../keys'
        ], function($, BaseSelection, Utils, KEYS) {
            function SingleSelection() {
                SingleSelection.__super__.constructor.apply(this, arguments);
            }

            Utils.Extend(SingleSelection, BaseSelection);

            SingleSelection.prototype.render = function() {
                var $selection = SingleSelection.__super__.render.call(this);

                $selection.addClass('select2-selection--single');

                $selection.html(
                    '<span class="select2-selection__rendered"></span>' +
                    '<span class="select2-selection__arrow" role="presentation">' +
                    '<b role="presentation"></b>' +
                    '</span>'
                );

                return $selection;
            };

            SingleSelection.prototype.bind = function(container, $container) {
                var self = this;

                SingleSelection.__super__.bind.apply(this, arguments);

                var id = container.id + '-container';

                this.$selection.find('.select2-selection__rendered')
                    .attr('id', id)
                    .attr('role', 'textbox')
                    .attr('aria-readonly', 'true');
                this.$selection.attr('aria-labelledby', id);

                this.$selection.on('mousedown', function(evt) {
                    // Only respond to left clicks
                    if (evt.which !== 1) {
                        return;
                    }

                    self.trigger('toggle', {
                        originalEvent: evt
                    });
                });

                this.$selection.on('focus', function(evt) {
                    // User focuses on the container
                });

                this.$selection.on('blur', function(evt) {
                    // User exits the container
                });

                container.on('focus', function(evt) {
                    if (!container.isOpen()) {
                        self.$selection.focus();
                    }
                });
            };

            SingleSelection.prototype.clear = function() {
                var $rendered = this.$selection.find('.select2-selection__rendered');
                $rendered.empty();
                $rendered.removeAttr('title'); // clear tooltip on empty
            };

            SingleSelection.prototype.display = function(data, container) {
                var template = this.options.get('templateSelection');
                var escapeMarkup = this.options.get('escapeMarkup');

                return escapeMarkup(template(data, container));
            };

            SingleSelection.prototype.selectionContainer = function() {
                return $('<span></span>');
            };

            SingleSelection.prototype.update = function(data) {
                if (data.length === 0) {
                    this.clear();
                    return;
                }

                var selection = data[0];

                var $rendered = this.$selection.find('.select2-selection__rendered');
                var formatted = this.display(selection, $rendered);

                $rendered.empty().append(formatted);
                $rendered.attr('title', selection.title || selection.text);
            };

            return SingleSelection;
        });

        S2.define('select2/selection/multiple', [
            'jquery',
            './base',
            '../utils'
        ], function($, BaseSelection, Utils) {
            function MultipleSelection($element, options) {
                MultipleSelection.__super__.constructor.apply(this, arguments);
            }

            Utils.Extend(MultipleSelection, BaseSelection);

            MultipleSelection.prototype.render = function() {
                var $selection = MultipleSelection.__super__.render.call(this);

                $selection.addClass('select2-selection--multiple');

                $selection.html(
                    '<ul class="select2-selection__rendered"></ul>'
                );

                return $selection;
            };

            MultipleSelection.prototype.bind = function(container, $container) {
                var self = this;

                MultipleSelection.__super__.bind.apply(this, arguments);

                this.$selection.on('click', function(evt) {
                    self.trigger('toggle', {
                        originalEvent: evt
                    });
                });

                this.$selection.on(
                    'click',
                    '.select2-selection__choice__remove',
                    function(evt) {
                        // Ignore the event if it is disabled
                        if (self.options.get('disabled')) {
                            return;
                        }

                        var $remove = $(this);
                        var $selection = $remove.parent();

                        var data = Utils.GetData($selection[0], 'data');

                        self.trigger('unselect', {
                            originalEvent: evt,
                            data: data
                        });
                    }
                );
            };

            MultipleSelection.prototype.clear = function() {
                var $rendered = this.$selection.find('.select2-selection__rendered');
                $rendered.empty();
                $rendered.removeAttr('title');
            };

            MultipleSelection.prototype.display = function(data, container) {
                var template = this.options.get('templateSelection');
                var escapeMarkup = this.options.get('escapeMarkup');

                return escapeMarkup(template(data, container));
            };

            MultipleSelection.prototype.selectionContainer = function() {
                var $container = $(
                    '<li class="select2-selection__choice">' +
                    '<span class="select2-selection__choice__remove" role="presentation">' +
                    '&times;' +
                    '</span>' +
                    '</li>'
                );

                return $container;
            };

            MultipleSelection.prototype.update = function(data) {
                this.clear();

                if (data.length === 0) {
                    return;
                }

                var $selections = [];

                for (var d = 0; d < data.length; d++) {
                    var selection = data[d];

                    var $selection = this.selectionContainer();
                    var formatted = this.display(selection, $selection);

                    $selection.append(formatted);
                    $selection.attr('title', selection.title || selection.text);

                    Utils.StoreData($selection[0], 'data', selection);

                    $selections.push($selection);
                }

                var $rendered = this.$selection.find('.select2-selection__rendered');

                Utils.appendMany($rendered, $selections);
            };

            return MultipleSelection;
        });

        S2.define('select2/selection/placeholder', [
            '../utils'
        ], function(Utils) {
            function Placeholder(decorated, $element, options) {
                this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

                decorated.call(this, $element, options);
            }

            Placeholder.prototype.normalizePlaceholder = function(_, placeholder) {
                if (typeof placeholder === 'string') {
                    placeholder = {
                        id: '',
                        text: placeholder
                    };
                }

                return placeholder;
            };

            Placeholder.prototype.createPlaceholder = function(decorated, placeholder) {
                var $placeholder = this.selectionContainer();

                $placeholder.html(this.display(placeholder));
                $placeholder.addClass('select2-selection__placeholder')
                    .removeClass('select2-selection__choice');

                return $placeholder;
            };

            Placeholder.prototype.update = function(decorated, data) {
                var singlePlaceholder = (
                    data.length == 1 && data[0].id != this.placeholder.id
                );
                var multipleSelections = data.length > 1;

                if (multipleSelections || singlePlaceholder) {
                    return decorated.call(this, data);
                }

                this.clear();

                var $placeholder = this.createPlaceholder(this.placeholder);

                this.$selection.find('.select2-selection__rendered').append($placeholder);
            };

            return Placeholder;
        });

        S2.define('select2/selection/allowClear', [
            'jquery',
            '../keys',
            '../utils'
        ], function($, KEYS, Utils) {
            function AllowClear() {}

            AllowClear.prototype.bind = function(decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                if (this.placeholder == null) {
                    if (this.options.get('debug') && window.console && console.error) {
                        console.error(
                            'Select2: The `allowClear` option should be used in combination ' +
                            'with the `placeholder` option.'
                        );
                    }
                }

                this.$selection.on('mousedown', '.select2-selection__clear',
                    function(evt) {
                        self._handleClear(evt);
                    });

                container.on('keypress', function(evt) {
                    self._handleKeyboardClear(evt, container);
                });
            };

            AllowClear.prototype._handleClear = function(_, evt) {
                // Ignore the event if it is disabled
                if (this.options.get('disabled')) {
                    return;
                }

                var $clear = this.$selection.find('.select2-selection__clear');

                // Ignore the event if nothing has been selected
                if ($clear.length === 0) {
                    return;
                }

                evt.stopPropagation();

                var data = Utils.GetData($clear[0], 'data');

                var previousVal = this.$element.val();
                this.$element.val(this.placeholder.id);

                var unselectData = {
                    data: data
                };
                this.trigger('clear', unselectData);
                if (unselectData.prevented) {
                    this.$element.val(previousVal);
                    return;
                }

                for (var d = 0; d < data.length; d++) {
                    unselectData = {
                        data: data[d]
                    };

                    // Trigger the `unselect` event, so people can prevent it from being
                    // cleared.
                    this.trigger('unselect', unselectData);

                    // If the event was prevented, don't clear it out.
                    if (unselectData.prevented) {
                        this.$element.val(previousVal);
                        return;
                    }
                }

                this.$element.trigger('change');

                this.trigger('toggle', {});
            };

            AllowClear.prototype._handleKeyboardClear = function(_, evt, container) {
                if (container.isOpen()) {
                    return;
                }

                if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
                    this._handleClear(evt);
                }
            };

            AllowClear.prototype.update = function(decorated, data) {
                decorated.call(this, data);

                if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
                    data.length === 0) {
                    return;
                }

                var $remove = $(
                    '<span class="select2-selection__clear">' +
                    '&times;' +
                    '</span>'
                );
                Utils.StoreData($remove[0], 'data', data);

                this.$selection.find('.select2-selection__rendered').prepend($remove);
            };

            return AllowClear;
        });

        S2.define('select2/selection/search', [
            'jquery',
            '../utils',
            '../keys'
        ], function($, Utils, KEYS) {
            function Search(decorated, $element, options) {
                decorated.call(this, $element, options);
            }

            Search.prototype.render = function(decorated) {
                var $search = $(
                    '<li class="select2-search select2-search--inline">' +
                    '<input class="select2-search__field" type="search" tabindex="-1"' +
                    ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
                    ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
                    '</li>'
                );

                this.$searchContainer = $search;
                this.$search = $search.find('input');

                var $rendered = decorated.call(this);

                this._transferTabIndex();

                return $rendered;
            };

            Search.prototype.bind = function(decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('open', function() {
                    self.$search.trigger('focus');
                });

                container.on('close', function() {
                    self.$search.val('');
                    self.$search.removeAttr('aria-activedescendant');
                    self.$search.trigger('focus');
                });

                container.on('enable', function() {
                    self.$search.prop('disabled', false);

                    self._transferTabIndex();
                });

                container.on('disable', function() {
                    self.$search.prop('disabled', true);
                });

                container.on('focus', function(evt) {
                    self.$search.trigger('focus');
                });

                container.on('results:focus', function(params) {
                    self.$search.attr('aria-activedescendant', params.id);
                });

                this.$selection.on('focusin', '.select2-search--inline', function(evt) {
                    self.trigger('focus', evt);
                });

                this.$selection.on('focusout', '.select2-search--inline', function(evt) {
                    self._handleBlur(evt);
                });

                this.$selection.on('keydown', '.select2-search--inline', function(evt) {
                    evt.stopPropagation();

                    self.trigger('keypress', evt);

                    self._keyUpPrevented = evt.isDefaultPrevented();

                    var key = evt.which;

                    if (key === KEYS.BACKSPACE && self.$search.val() === '') {
                        var $previousChoice = self.$searchContainer
                            .prev('.select2-selection__choice');

                        if ($previousChoice.length > 0) {
                            var item = Utils.GetData($previousChoice[0], 'data');

                            self.searchRemoveChoice(item);

                            evt.preventDefault();
                        }
                    }
                });

                // Try to detect the IE version should the `documentMode` property that
                // is stored on the document. This is only implemented in IE and is
                // slightly cleaner than doing a user agent check.
                // This property is not available in Edge, but Edge also doesn't have
                // this bug.
                var msie = document.documentMode;
                var disableInputEvents = msie && msie <= 11;

                // Workaround for browsers which do not support the `input` event
                // This will prevent double-triggering of events for browsers which support
                // both the `keyup` and `input` events.
                this.$selection.on(
                    'input.searchcheck',
                    '.select2-search--inline',
                    function(evt) {
                        // IE will trigger the `input` event when a placeholder is used on a
                        // search box. To get around this issue, we are forced to ignore all
                        // `input` events in IE and keep using `keyup`.
                        if (disableInputEvents) {
                            self.$selection.off('input.search input.searchcheck');
                            return;
                        }

                        // Unbind the duplicated `keyup` event
                        self.$selection.off('keyup.search');
                    }
                );

                this.$selection.on(
                    'keyup.search input.search',
                    '.select2-search--inline',
                    function(evt) {
                        // IE will trigger the `input` event when a placeholder is used on a
                        // search box. To get around this issue, we are forced to ignore all
                        // `input` events in IE and keep using `keyup`.
                        if (disableInputEvents && evt.type === 'input') {
                            self.$selection.off('input.search input.searchcheck');
                            return;
                        }

                        var key = evt.which;

                        // We can freely ignore events from modifier keys
                        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
                            return;
                        }

                        // Tabbing will be handled during the `keydown` phase
                        if (key == KEYS.TAB) {
                            return;
                        }

                        self.handleSearch(evt);
                    }
                );
            };

            /**
             * This method will transfer the tabindex attribute from the rendered
             * selection to the search box. This allows for the search box to be used as
             * the primary focus instead of the selection container.
             *
             * @private
             */
            Search.prototype._transferTabIndex = function(decorated) {
                this.$search.attr('tabindex', this.$selection.attr('tabindex'));
                this.$selection.attr('tabindex', '-1');
            };

            Search.prototype.createPlaceholder = function(decorated, placeholder) {
                this.$search.attr('placeholder', placeholder.text);
            };

            Search.prototype.update = function(decorated, data) {
                var searchHadFocus = this.$search[0] == document.activeElement;

                this.$search.attr('placeholder', '');

                decorated.call(this, data);

                this.$selection.find('.select2-selection__rendered')
                    .append(this.$searchContainer);

                this.resizeSearch();
                if (searchHadFocus) {
                    var isTagInput = this.$element.find('[data-select2-tag]').length;
                    if (isTagInput) {
                        // fix IE11 bug where tag input lost focus
                        this.$element.focus();
                    } else {
                        this.$search.focus();
                    }
                }
            };

            Search.prototype.handleSearch = function() {
                this.resizeSearch();

                if (!this._keyUpPrevented) {
                    var input = this.$search.val();

                    this.trigger('query', {
                        term: input
                    });
                }

                this._keyUpPrevented = false;
            };

            Search.prototype.searchRemoveChoice = function(decorated, item) {
                this.trigger('unselect', {
                    data: item
                });

                this.$search.val(item.text);
                this.handleSearch();
            };

            Search.prototype.resizeSearch = function() {
                this.$search.css('width', '25px');

                var width = '';

                if (this.$search.attr('placeholder') !== '') {
                    width = this.$selection.find('.select2-selection__rendered').innerWidth();
                } else {
                    var minimumWidth = this.$search.val().length + 1;

                    width = (minimumWidth * 0.75) + 'em';
                }

                this.$search.css('width', width);
            };

            return Search;
        });

        S2.define('select2/selection/eventRelay', [
            'jquery'
        ], function($) {
            function EventRelay() {}

            EventRelay.prototype.bind = function(decorated, container, $container) {
                var self = this;
                var relayEvents = [
                    'open', 'opening',
                    'close', 'closing',
                    'select', 'selecting',
                    'unselect', 'unselecting',
                    'clear', 'clearing'
                ];

                var preventableEvents = [
                    'opening', 'closing', 'selecting', 'unselecting', 'clearing'
                ];

                decorated.call(this, container, $container);

                container.on('*', function(name, params) {
                    // Ignore events that should not be relayed
                    if ($.inArray(name, relayEvents) === -1) {
                        return;
                    }

                    // The parameters should always be an object
                    params = params || {};

                    // Generate the jQuery event for the Select2 event
                    var evt = $.Event('select2:' + name, {
                        params: params
                    });

                    self.$element.trigger(evt);

                    // Only handle preventable events if it was one
                    if ($.inArray(name, preventableEvents) === -1) {
                        return;
                    }

                    params.prevented = evt.isDefaultPrevented();
                });
            };

            return EventRelay;
        });

        S2.define('select2/translation', [
            'jquery',
            'require'
        ], function($, require) {
            function Translation(dict) {
                this.dict = dict || {};
            }

            Translation.prototype.all = function() {
                return this.dict;
            };

            Translation.prototype.get = function(key) {
                return this.dict[key];
            };

            Translation.prototype.extend = function(translation) {
                this.dict = $.extend({}, translation.all(), this.dict);
            };

            // Static functions

            Translation._cache = {};

            Translation.loadPath = function(path) {
                if (!(path in Translation._cache)) {
                    var translations = require(path);

                    Translation._cache[path] = translations;
                }

                return new Translation(Translation._cache[path]);
            };

            return Translation;
        });

        S2.define('select2/diacritics', [

        ], function() {
            var diacritics = {
                '\u24B6': 'A',
                '\uFF21': 'A',
                '\u00C0': 'A',
                '\u00C1': 'A',
                '\u00C2': 'A',
                '\u1EA6': 'A',
                '\u1EA4': 'A',
                '\u1EAA': 'A',
                '\u1EA8': 'A',
                '\u00C3': 'A',
                '\u0100': 'A',
                '\u0102': 'A',
                '\u1EB0': 'A',
                '\u1EAE': 'A',
                '\u1EB4': 'A',
                '\u1EB2': 'A',
                '\u0226': 'A',
                '\u01E0': 'A',
                '\u00C4': 'A',
                '\u01DE': 'A',
                '\u1EA2': 'A',
                '\u00C5': 'A',
                '\u01FA': 'A',
                '\u01CD': 'A',
                '\u0200': 'A',
                '\u0202': 'A',
                '\u1EA0': 'A',
                '\u1EAC': 'A',
                '\u1EB6': 'A',
                '\u1E00': 'A',
                '\u0104': 'A',
                '\u023A': 'A',
                '\u2C6F': 'A',
                '\uA732': 'AA',
                '\u00C6': 'AE',
                '\u01FC': 'AE',
                '\u01E2': 'AE',
                '\uA734': 'AO',
                '\uA736': 'AU',
                '\uA738': 'AV',
                '\uA73A': 'AV',
                '\uA73C': 'AY',
                '\u24B7': 'B',
                '\uFF22': 'B',
                '\u1E02': 'B',
                '\u1E04': 'B',
                '\u1E06': 'B',
                '\u0243': 'B',
                '\u0182': 'B',
                '\u0181': 'B',
                '\u24B8': 'C',
                '\uFF23': 'C',
                '\u0106': 'C',
                '\u0108': 'C',
                '\u010A': 'C',
                '\u010C': 'C',
                '\u00C7': 'C',
                '\u1E08': 'C',
                '\u0187': 'C',
                '\u023B': 'C',
                '\uA73E': 'C',
                '\u24B9': 'D',
                '\uFF24': 'D',
                '\u1E0A': 'D',
                '\u010E': 'D',
                '\u1E0C': 'D',
                '\u1E10': 'D',
                '\u1E12': 'D',
                '\u1E0E': 'D',
                '\u0110': 'D',
                '\u018B': 'D',
                '\u018A': 'D',
                '\u0189': 'D',
                '\uA779': 'D',
                '\u01F1': 'DZ',
                '\u01C4': 'DZ',
                '\u01F2': 'Dz',
                '\u01C5': 'Dz',
                '\u24BA': 'E',
                '\uFF25': 'E',
                '\u00C8': 'E',
                '\u00C9': 'E',
                '\u00CA': 'E',
                '\u1EC0': 'E',
                '\u1EBE': 'E',
                '\u1EC4': 'E',
                '\u1EC2': 'E',
                '\u1EBC': 'E',
                '\u0112': 'E',
                '\u1E14': 'E',
                '\u1E16': 'E',
                '\u0114': 'E',
                '\u0116': 'E',
                '\u00CB': 'E',
                '\u1EBA': 'E',
                '\u011A': 'E',
                '\u0204': 'E',
                '\u0206': 'E',
                '\u1EB8': 'E',
                '\u1EC6': 'E',
                '\u0228': 'E',
                '\u1E1C': 'E',
                '\u0118': 'E',
                '\u1E18': 'E',
                '\u1E1A': 'E',
                '\u0190': 'E',
                '\u018E': 'E',
                '\u24BB': 'F',
                '\uFF26': 'F',
                '\u1E1E': 'F',
                '\u0191': 'F',
                '\uA77B': 'F',
                '\u24BC': 'G',
                '\uFF27': 'G',
                '\u01F4': 'G',
                '\u011C': 'G',
                '\u1E20': 'G',
                '\u011E': 'G',
                '\u0120': 'G',
                '\u01E6': 'G',
                '\u0122': 'G',
                '\u01E4': 'G',
                '\u0193': 'G',
                '\uA7A0': 'G',
                '\uA77D': 'G',
                '\uA77E': 'G',
                '\u24BD': 'H',
                '\uFF28': 'H',
                '\u0124': 'H',
                '\u1E22': 'H',
                '\u1E26': 'H',
                '\u021E': 'H',
                '\u1E24': 'H',
                '\u1E28': 'H',
                '\u1E2A': 'H',
                '\u0126': 'H',
                '\u2C67': 'H',
                '\u2C75': 'H',
                '\uA78D': 'H',
                '\u24BE': 'I',
                '\uFF29': 'I',
                '\u00CC': 'I',
                '\u00CD': 'I',
                '\u00CE': 'I',
                '\u0128': 'I',
                '\u012A': 'I',
                '\u012C': 'I',
                '\u0130': 'I',
                '\u00CF': 'I',
                '\u1E2E': 'I',
                '\u1EC8': 'I',
                '\u01CF': 'I',
                '\u0208': 'I',
                '\u020A': 'I',
                '\u1ECA': 'I',
                '\u012E': 'I',
                '\u1E2C': 'I',
                '\u0197': 'I',
                '\u24BF': 'J',
                '\uFF2A': 'J',
                '\u0134': 'J',
                '\u0248': 'J',
                '\u24C0': 'K',
                '\uFF2B': 'K',
                '\u1E30': 'K',
                '\u01E8': 'K',
                '\u1E32': 'K',
                '\u0136': 'K',
                '\u1E34': 'K',
                '\u0198': 'K',
                '\u2C69': 'K',
                '\uA740': 'K',
                '\uA742': 'K',
                '\uA744': 'K',
                '\uA7A2': 'K',
                '\u24C1': 'L',
                '\uFF2C': 'L',
                '\u013F': 'L',
                '\u0139': 'L',
                '\u013D': 'L',
                '\u1E36': 'L',
                '\u1E38': 'L',
                '\u013B': 'L',
                '\u1E3C': 'L',
                '\u1E3A': 'L',
                '\u0141': 'L',
                '\u023D': 'L',
                '\u2C62': 'L',
                '\u2C60': 'L',
                '\uA748': 'L',
                '\uA746': 'L',
                '\uA780': 'L',
                '\u01C7': 'LJ',
                '\u01C8': 'Lj',
                '\u24C2': 'M',
                '\uFF2D': 'M',
                '\u1E3E': 'M',
                '\u1E40': 'M',
                '\u1E42': 'M',
                '\u2C6E': 'M',
                '\u019C': 'M',
                '\u24C3': 'N',
                '\uFF2E': 'N',
                '\u01F8': 'N',
                '\u0143': 'N',
                '\u00D1': 'N',
                '\u1E44': 'N',
                '\u0147': 'N',
                '\u1E46': 'N',
                '\u0145': 'N',
                '\u1E4A': 'N',
                '\u1E48': 'N',
                '\u0220': 'N',
                '\u019D': 'N',
                '\uA790': 'N',
                '\uA7A4': 'N',
                '\u01CA': 'NJ',
                '\u01CB': 'Nj',
                '\u24C4': 'O',
                '\uFF2F': 'O',
                '\u00D2': 'O',
                '\u00D3': 'O',
                '\u00D4': 'O',
                '\u1ED2': 'O',
                '\u1ED0': 'O',
                '\u1ED6': 'O',
                '\u1ED4': 'O',
                '\u00D5': 'O',
                '\u1E4C': 'O',
                '\u022C': 'O',
                '\u1E4E': 'O',
                '\u014C': 'O',
                '\u1E50': 'O',
                '\u1E52': 'O',
                '\u014E': 'O',
                '\u022E': 'O',
                '\u0230': 'O',
                '\u00D6': 'O',
                '\u022A': 'O',
                '\u1ECE': 'O',
                '\u0150': 'O',
                '\u01D1': 'O',
                '\u020C': 'O',
                '\u020E': 'O',
                '\u01A0': 'O',
                '\u1EDC': 'O',
                '\u1EDA': 'O',
                '\u1EE0': 'O',
                '\u1EDE': 'O',
                '\u1EE2': 'O',
                '\u1ECC': 'O',
                '\u1ED8': 'O',
                '\u01EA': 'O',
                '\u01EC': 'O',
                '\u00D8': 'O',
                '\u01FE': 'O',
                '\u0186': 'O',
                '\u019F': 'O',
                '\uA74A': 'O',
                '\uA74C': 'O',
                '\u01A2': 'OI',
                '\uA74E': 'OO',
                '\u0222': 'OU',
                '\u24C5': 'P',
                '\uFF30': 'P',
                '\u1E54': 'P',
                '\u1E56': 'P',
                '\u01A4': 'P',
                '\u2C63': 'P',
                '\uA750': 'P',
                '\uA752': 'P',
                '\uA754': 'P',
                '\u24C6': 'Q',
                '\uFF31': 'Q',
                '\uA756': 'Q',
                '\uA758': 'Q',
                '\u024A': 'Q',
                '\u24C7': 'R',
                '\uFF32': 'R',
                '\u0154': 'R',
                '\u1E58': 'R',
                '\u0158': 'R',
                '\u0210': 'R',
                '\u0212': 'R',
                '\u1E5A': 'R',
                '\u1E5C': 'R',
                '\u0156': 'R',
                '\u1E5E': 'R',
                '\u024C': 'R',
                '\u2C64': 'R',
                '\uA75A': 'R',
                '\uA7A6': 'R',
                '\uA782': 'R',
                '\u24C8': 'S',
                '\uFF33': 'S',
                '\u1E9E': 'S',
                '\u015A': 'S',
                '\u1E64': 'S',
                '\u015C': 'S',
                '\u1E60': 'S',
                '\u0160': 'S',
                '\u1E66': 'S',
                '\u1E62': 'S',
                '\u1E68': 'S',
                '\u0218': 'S',
                '\u015E': 'S',
                '\u2C7E': 'S',
                '\uA7A8': 'S',
                '\uA784': 'S',
                '\u24C9': 'T',
                '\uFF34': 'T',
                '\u1E6A': 'T',
                '\u0164': 'T',
                '\u1E6C': 'T',
                '\u021A': 'T',
                '\u0162': 'T',
                '\u1E70': 'T',
                '\u1E6E': 'T',
                '\u0166': 'T',
                '\u01AC': 'T',
                '\u01AE': 'T',
                '\u023E': 'T',
                '\uA786': 'T',
                '\uA728': 'TZ',
                '\u24CA': 'U',
                '\uFF35': 'U',
                '\u00D9': 'U',
                '\u00DA': 'U',
                '\u00DB': 'U',
                '\u0168': 'U',
                '\u1E78': 'U',
                '\u016A': 'U',
                '\u1E7A': 'U',
                '\u016C': 'U',
                '\u00DC': 'U',
                '\u01DB': 'U',
                '\u01D7': 'U',
                '\u01D5': 'U',
                '\u01D9': 'U',
                '\u1EE6': 'U',
                '\u016E': 'U',
                '\u0170': 'U',
                '\u01D3': 'U',
                '\u0214': 'U',
                '\u0216': 'U',
                '\u01AF': 'U',
                '\u1EEA': 'U',
                '\u1EE8': 'U',
                '\u1EEE': 'U',
                '\u1EEC': 'U',
                '\u1EF0': 'U',
                '\u1EE4': 'U',
                '\u1E72': 'U',
                '\u0172': 'U',
                '\u1E76': 'U',
                '\u1E74': 'U',
                '\u0244': 'U',
                '\u24CB': 'V',
                '\uFF36': 'V',
                '\u1E7C': 'V',
                '\u1E7E': 'V',
                '\u01B2': 'V',
                '\uA75E': 'V',
                '\u0245': 'V',
                '\uA760': 'VY',
                '\u24CC': 'W',
                '\uFF37': 'W',
                '\u1E80': 'W',
                '\u1E82': 'W',
                '\u0174': 'W',
                '\u1E86': 'W',
                '\u1E84': 'W',
                '\u1E88': 'W',
                '\u2C72': 'W',
                '\u24CD': 'X',
                '\uFF38': 'X',
                '\u1E8A': 'X',
                '\u1E8C': 'X',
                '\u24CE': 'Y',
                '\uFF39': 'Y',
                '\u1EF2': 'Y',
                '\u00DD': 'Y',
                '\u0176': 'Y',
                '\u1EF8': 'Y',
                '\u0232': 'Y',
                '\u1E8E': 'Y',
                '\u0178': 'Y',
                '\u1EF6': 'Y',
                '\u1EF4': 'Y',
                '\u01B3': 'Y',
                '\u024E': 'Y',
                '\u1EFE': 'Y',
                '\u24CF': 'Z',
                '\uFF3A': 'Z',
                '\u0179': 'Z',
                '\u1E90': 'Z',
                '\u017B': 'Z',
                '\u017D': 'Z',
                '\u1E92': 'Z',
                '\u1E94': 'Z',
                '\u01B5': 'Z',
                '\u0224': 'Z',
                '\u2C7F': 'Z',
                '\u2C6B': 'Z',
                '\uA762': 'Z',
                '\u24D0': 'a',
                '\uFF41': 'a',
                '\u1E9A': 'a',
                '\u00E0': 'a',
                '\u00E1': 'a',
                '\u00E2': 'a',
                '\u1EA7': 'a',
                '\u1EA5': 'a',
                '\u1EAB': 'a',
                '\u1EA9': 'a',
                '\u00E3': 'a',
                '\u0101': 'a',
                '\u0103': 'a',
                '\u1EB1': 'a',
                '\u1EAF': 'a',
                '\u1EB5': 'a',
                '\u1EB3': 'a',
                '\u0227': 'a',
                '\u01E1': 'a',
                '\u00E4': 'a',
                '\u01DF': 'a',
                '\u1EA3': 'a',
                '\u00E5': 'a',
                '\u01FB': 'a',
                '\u01CE': 'a',
                '\u0201': 'a',
                '\u0203': 'a',
                '\u1EA1': 'a',
                '\u1EAD': 'a',
                '\u1EB7': 'a',
                '\u1E01': 'a',
                '\u0105': 'a',
                '\u2C65': 'a',
                '\u0250': 'a',
                '\uA733': 'aa',
                '\u00E6': 'ae',
                '\u01FD': 'ae',
                '\u01E3': 'ae',
                '\uA735': 'ao',
                '\uA737': 'au',
                '\uA739': 'av',
                '\uA73B': 'av',
                '\uA73D': 'ay',
                '\u24D1': 'b',
                '\uFF42': 'b',
                '\u1E03': 'b',
                '\u1E05': 'b',
                '\u1E07': 'b',
                '\u0180': 'b',
                '\u0183': 'b',
                '\u0253': 'b',
                '\u24D2': 'c',
                '\uFF43': 'c',
                '\u0107': 'c',
                '\u0109': 'c',
                '\u010B': 'c',
                '\u010D': 'c',
                '\u00E7': 'c',
                '\u1E09': 'c',
                '\u0188': 'c',
                '\u023C': 'c',
                '\uA73F': 'c',
                '\u2184': 'c',
                '\u24D3': 'd',
                '\uFF44': 'd',
                '\u1E0B': 'd',
                '\u010F': 'd',
                '\u1E0D': 'd',
                '\u1E11': 'd',
                '\u1E13': 'd',
                '\u1E0F': 'd',
                '\u0111': 'd',
                '\u018C': 'd',
                '\u0256': 'd',
                '\u0257': 'd',
                '\uA77A': 'd',
                '\u01F3': 'dz',
                '\u01C6': 'dz',
                '\u24D4': 'e',
                '\uFF45': 'e',
                '\u00E8': 'e',
                '\u00E9': 'e',
                '\u00EA': 'e',
                '\u1EC1': 'e',
                '\u1EBF': 'e',
                '\u1EC5': 'e',
                '\u1EC3': 'e',
                '\u1EBD': 'e',
                '\u0113': 'e',
                '\u1E15': 'e',
                '\u1E17': 'e',
                '\u0115': 'e',
                '\u0117': 'e',
                '\u00EB': 'e',
                '\u1EBB': 'e',
                '\u011B': 'e',
                '\u0205': 'e',
                '\u0207': 'e',
                '\u1EB9': 'e',
                '\u1EC7': 'e',
                '\u0229': 'e',
                '\u1E1D': 'e',
                '\u0119': 'e',
                '\u1E19': 'e',
                '\u1E1B': 'e',
                '\u0247': 'e',
                '\u025B': 'e',
                '\u01DD': 'e',
                '\u24D5': 'f',
                '\uFF46': 'f',
                '\u1E1F': 'f',
                '\u0192': 'f',
                '\uA77C': 'f',
                '\u24D6': 'g',
                '\uFF47': 'g',
                '\u01F5': 'g',
                '\u011D': 'g',
                '\u1E21': 'g',
                '\u011F': 'g',
                '\u0121': 'g',
                '\u01E7': 'g',
                '\u0123': 'g',
                '\u01E5': 'g',
                '\u0260': 'g',
                '\uA7A1': 'g',
                '\u1D79': 'g',
                '\uA77F': 'g',
                '\u24D7': 'h',
                '\uFF48': 'h',
                '\u0125': 'h',
                '\u1E23': 'h',
                '\u1E27': 'h',
                '\u021F': 'h',
                '\u1E25': 'h',
                '\u1E29': 'h',
                '\u1E2B': 'h',
                '\u1E96': 'h',
                '\u0127': 'h',
                '\u2C68': 'h',
                '\u2C76': 'h',
                '\u0265': 'h',
                '\u0195': 'hv',
                '\u24D8': 'i',
                '\uFF49': 'i',
                '\u00EC': 'i',
                '\u00ED': 'i',
                '\u00EE': 'i',
                '\u0129': 'i',
                '\u012B': 'i',
                '\u012D': 'i',
                '\u00EF': 'i',
                '\u1E2F': 'i',
                '\u1EC9': 'i',
                '\u01D0': 'i',
                '\u0209': 'i',
                '\u020B': 'i',
                '\u1ECB': 'i',
                '\u012F': 'i',
                '\u1E2D': 'i',
                '\u0268': 'i',
                '\u0131': 'i',
                '\u24D9': 'j',
                '\uFF4A': 'j',
                '\u0135': 'j',
                '\u01F0': 'j',
                '\u0249': 'j',
                '\u24DA': 'k',
                '\uFF4B': 'k',
                '\u1E31': 'k',
                '\u01E9': 'k',
                '\u1E33': 'k',
                '\u0137': 'k',
                '\u1E35': 'k',
                '\u0199': 'k',
                '\u2C6A': 'k',
                '\uA741': 'k',
                '\uA743': 'k',
                '\uA745': 'k',
                '\uA7A3': 'k',
                '\u24DB': 'l',
                '\uFF4C': 'l',
                '\u0140': 'l',
                '\u013A': 'l',
                '\u013E': 'l',
                '\u1E37': 'l',
                '\u1E39': 'l',
                '\u013C': 'l',
                '\u1E3D': 'l',
                '\u1E3B': 'l',
                '\u017F': 'l',
                '\u0142': 'l',
                '\u019A': 'l',
                '\u026B': 'l',
                '\u2C61': 'l',
                '\uA749': 'l',
                '\uA781': 'l',
                '\uA747': 'l',
                '\u01C9': 'lj',
                '\u24DC': 'm',
                '\uFF4D': 'm',
                '\u1E3F': 'm',
                '\u1E41': 'm',
                '\u1E43': 'm',
                '\u0271': 'm',
                '\u026F': 'm',
                '\u24DD': 'n',
                '\uFF4E': 'n',
                '\u01F9': 'n',
                '\u0144': 'n',
                '\u00F1': 'n',
                '\u1E45': 'n',
                '\u0148': 'n',
                '\u1E47': 'n',
                '\u0146': 'n',
                '\u1E4B': 'n',
                '\u1E49': 'n',
                '\u019E': 'n',
                '\u0272': 'n',
                '\u0149': 'n',
                '\uA791': 'n',
                '\uA7A5': 'n',
                '\u01CC': 'nj',
                '\u24DE': 'o',
                '\uFF4F': 'o',
                '\u00F2': 'o',
                '\u00F3': 'o',
                '\u00F4': 'o',
                '\u1ED3': 'o',
                '\u1ED1': 'o',
                '\u1ED7': 'o',
                '\u1ED5': 'o',
                '\u00F5': 'o',
                '\u1E4D': 'o',
                '\u022D': 'o',
                '\u1E4F': 'o',
                '\u014D': 'o',
                '\u1E51': 'o',
                '\u1E53': 'o',
                '\u014F': 'o',
                '\u022F': 'o',
                '\u0231': 'o',
                '\u00F6': 'o',
                '\u022B': 'o',
                '\u1ECF': 'o',
                '\u0151': 'o',
                '\u01D2': 'o',
                '\u020D': 'o',
                '\u020F': 'o',
                '\u01A1': 'o',
                '\u1EDD': 'o',
                '\u1EDB': 'o',
                '\u1EE1': 'o',
                '\u1EDF': 'o',
                '\u1EE3': 'o',
                '\u1ECD': 'o',
                '\u1ED9': 'o',
                '\u01EB': 'o',
                '\u01ED': 'o',
                '\u00F8': 'o',
                '\u01FF': 'o',
                '\u0254': 'o',
                '\uA74B': 'o',
                '\uA74D': 'o',
                '\u0275': 'o',
                '\u01A3': 'oi',
                '\u0223': 'ou',
                '\uA74F': 'oo',
                '\u24DF': 'p',
                '\uFF50': 'p',
                '\u1E55': 'p',
                '\u1E57': 'p',
                '\u01A5': 'p',
                '\u1D7D': 'p',
                '\uA751': 'p',
                '\uA753': 'p',
                '\uA755': 'p',
                '\u24E0': 'q',
                '\uFF51': 'q',
                '\u024B': 'q',
                '\uA757': 'q',
                '\uA759': 'q',
                '\u24E1': 'r',
                '\uFF52': 'r',
                '\u0155': 'r',
                '\u1E59': 'r',
                '\u0159': 'r',
                '\u0211': 'r',
                '\u0213': 'r',
                '\u1E5B': 'r',
                '\u1E5D': 'r',
                '\u0157': 'r',
                '\u1E5F': 'r',
                '\u024D': 'r',
                '\u027D': 'r',
                '\uA75B': 'r',
                '\uA7A7': 'r',
                '\uA783': 'r',
                '\u24E2': 's',
                '\uFF53': 's',
                '\u00DF': 's',
                '\u015B': 's',
                '\u1E65': 's',
                '\u015D': 's',
                '\u1E61': 's',
                '\u0161': 's',
                '\u1E67': 's',
                '\u1E63': 's',
                '\u1E69': 's',
                '\u0219': 's',
                '\u015F': 's',
                '\u023F': 's',
                '\uA7A9': 's',
                '\uA785': 's',
                '\u1E9B': 's',
                '\u24E3': 't',
                '\uFF54': 't',
                '\u1E6B': 't',
                '\u1E97': 't',
                '\u0165': 't',
                '\u1E6D': 't',
                '\u021B': 't',
                '\u0163': 't',
                '\u1E71': 't',
                '\u1E6F': 't',
                '\u0167': 't',
                '\u01AD': 't',
                '\u0288': 't',
                '\u2C66': 't',
                '\uA787': 't',
                '\uA729': 'tz',
                '\u24E4': 'u',
                '\uFF55': 'u',
                '\u00F9': 'u',
                '\u00FA': 'u',
                '\u00FB': 'u',
                '\u0169': 'u',
                '\u1E79': 'u',
                '\u016B': 'u',
                '\u1E7B': 'u',
                '\u016D': 'u',
                '\u00FC': 'u',
                '\u01DC': 'u',
                '\u01D8': 'u',
                '\u01D6': 'u',
                '\u01DA': 'u',
                '\u1EE7': 'u',
                '\u016F': 'u',
                '\u0171': 'u',
                '\u01D4': 'u',
                '\u0215': 'u',
                '\u0217': 'u',
                '\u01B0': 'u',
                '\u1EEB': 'u',
                '\u1EE9': 'u',
                '\u1EEF': 'u',
                '\u1EED': 'u',
                '\u1EF1': 'u',
                '\u1EE5': 'u',
                '\u1E73': 'u',
                '\u0173': 'u',
                '\u1E77': 'u',
                '\u1E75': 'u',
                '\u0289': 'u',
                '\u24E5': 'v',
                '\uFF56': 'v',
                '\u1E7D': 'v',
                '\u1E7F': 'v',
                '\u028B': 'v',
                '\uA75F': 'v',
                '\u028C': 'v',
                '\uA761': 'vy',
                '\u24E6': 'w',
                '\uFF57': 'w',
                '\u1E81': 'w',
                '\u1E83': 'w',
                '\u0175': 'w',
                '\u1E87': 'w',
                '\u1E85': 'w',
                '\u1E98': 'w',
                '\u1E89': 'w',
                '\u2C73': 'w',
                '\u24E7': 'x',
                '\uFF58': 'x',
                '\u1E8B': 'x',
                '\u1E8D': 'x',
                '\u24E8': 'y',
                '\uFF59': 'y',
                '\u1EF3': 'y',
                '\u00FD': 'y',
                '\u0177': 'y',
                '\u1EF9': 'y',
                '\u0233': 'y',
                '\u1E8F': 'y',
                '\u00FF': 'y',
                '\u1EF7': 'y',
                '\u1E99': 'y',
                '\u1EF5': 'y',
                '\u01B4': 'y',
                '\u024F': 'y',
                '\u1EFF': 'y',
                '\u24E9': 'z',
                '\uFF5A': 'z',
                '\u017A': 'z',
                '\u1E91': 'z',
                '\u017C': 'z',
                '\u017E': 'z',
                '\u1E93': 'z',
                '\u1E95': 'z',
                '\u01B6': 'z',
                '\u0225': 'z',
                '\u0240': 'z',
                '\u2C6C': 'z',
                '\uA763': 'z',
                '\u0386': '\u0391',
                '\u0388': '\u0395',
                '\u0389': '\u0397',
                '\u038A': '\u0399',
                '\u03AA': '\u0399',
                '\u038C': '\u039F',
                '\u038E': '\u03A5',
                '\u03AB': '\u03A5',
                '\u038F': '\u03A9',
                '\u03AC': '\u03B1',
                '\u03AD': '\u03B5',
                '\u03AE': '\u03B7',
                '\u03AF': '\u03B9',
                '\u03CA': '\u03B9',
                '\u0390': '\u03B9',
                '\u03CC': '\u03BF',
                '\u03CD': '\u03C5',
                '\u03CB': '\u03C5',
                '\u03B0': '\u03C5',
                '\u03C9': '\u03C9',
                '\u03C2': '\u03C3'
            };

            return diacritics;
        });

        S2.define('select2/data/base', [
            '../utils'
        ], function(Utils) {
            function BaseAdapter($element, options) {
                BaseAdapter.__super__.constructor.call(this);
            }

            Utils.Extend(BaseAdapter, Utils.Observable);

            BaseAdapter.prototype.current = function(callback) {
                throw new Error('The `current` method must be defined in child classes.');
            };

            BaseAdapter.prototype.query = function(params, callback) {
                throw new Error('The `query` method must be defined in child classes.');
            };

            BaseAdapter.prototype.bind = function(container, $container) {
                // Can be implemented in subclasses
            };

            BaseAdapter.prototype.destroy = function() {
                // Can be implemented in subclasses
            };

            BaseAdapter.prototype.generateResultId = function(container, data) {
                var id = container.id + '-result-';

                id += Utils.generateChars(4);

                if (data.id != null) {
                    id += '-' + data.id.toString();
                } else {
                    id += '-' + Utils.generateChars(4);
                }
                return id;
            };

            return BaseAdapter;
        });

        S2.define('select2/data/select', [
            './base',
            '../utils',
            'jquery'
        ], function(BaseAdapter, Utils, $) {
            function SelectAdapter($element, options) {
                this.$element = $element;
                this.options = options;

                SelectAdapter.__super__.constructor.call(this);
            }

            Utils.Extend(SelectAdapter, BaseAdapter);

            SelectAdapter.prototype.current = function(callback) {
                var data = [];
                var self = this;

                this.$element.find(':selected').each(function() {
                    var $option = $(this);

                    var option = self.item($option);

                    data.push(option);
                });

                callback(data);
            };

            SelectAdapter.prototype.select = function(data) {
                var self = this;

                data.selected = true;

                // If data.element is a DOM node, use it instead
                if ($(data.element).is('option')) {
                    data.element.selected = true;

                    this.$element.trigger('change');

                    return;
                }

                if (this.$element.prop('multiple')) {
                    this.current(function(currentData) {
                        var val = [];

                        data = [data];
                        data.push.apply(data, currentData);

                        for (var d = 0; d < data.length; d++) {
                            var id = data[d].id;

                            if ($.inArray(id, val) === -1) {
                                val.push(id);
                            }
                        }

                        self.$element.val(val);
                        self.$element.trigger('change');
                    });
                } else {
                    var val = data.id;

                    this.$element.val(val);
                    this.$element.trigger('change');
                }
            };

            SelectAdapter.prototype.unselect = function(data) {
                var self = this;

                if (!this.$element.prop('multiple')) {
                    return;
                }

                data.selected = false;

                if ($(data.element).is('option')) {
                    data.element.selected = false;

                    this.$element.trigger('change');

                    return;
                }

                this.current(function(currentData) {
                    var val = [];

                    for (var d = 0; d < currentData.length; d++) {
                        var id = currentData[d].id;

                        if (id !== data.id && $.inArray(id, val) === -1) {
                            val.push(id);
                        }
                    }

                    self.$element.val(val);

                    self.$element.trigger('change');
                });
            };

            SelectAdapter.prototype.bind = function(container, $container) {
                var self = this;

                this.container = container;

                container.on('select', function(params) {
                    self.select(params.data);
                });

                container.on('unselect', function(params) {
                    self.unselect(params.data);
                });
            };

            SelectAdapter.prototype.destroy = function() {
                // Remove anything added to child elements
                this.$element.find('*').each(function() {
                    // Remove any custom data set by Select2
                    Utils.RemoveData(this);
                });
            };

            SelectAdapter.prototype.query = function(params, callback) {
                var data = [];
                var self = this;

                var $options = this.$element.children();

                $options.each(function() {
                    var $option = $(this);

                    if (!$option.is('option') && !$option.is('optgroup')) {
                        return;
                    }

                    var option = self.item($option);

                    var matches = self.matches(params, option);

                    if (matches !== null) {
                        data.push(matches);
                    }
                });

                callback({
                    results: data
                });
            };

            SelectAdapter.prototype.addOptions = function($options) {
                Utils.appendMany(this.$element, $options);
            };

            SelectAdapter.prototype.option = function(data) {
                var option;

                if (data.children) {
                    option = document.createElement('optgroup');
                    option.label = data.text;
                } else {
                    option = document.createElement('option');

                    if (option.textContent !== undefined) {
                        option.textContent = data.text;
                    } else {
                        option.innerText = data.text;
                    }
                }

                if (data.id !== undefined) {
                    option.value = data.id;
                }

                if (data.disabled) {
                    option.disabled = true;
                }

                if (data.selected) {
                    option.selected = true;
                }

                if (data.title) {
                    option.title = data.title;
                }

                var $option = $(option);

                var normalizedData = this._normalizeItem(data);
                normalizedData.element = option;

                // Override the option's data with the combined data
                Utils.StoreData(option, 'data', normalizedData);

                return $option;
            };

            SelectAdapter.prototype.item = function($option) {
                var data = {};

                data = Utils.GetData($option[0], 'data');

                if (data != null) {
                    return data;
                }

                if ($option.is('option')) {
                    data = {
                        id: $option.val(),
                        text: $option.text(),
                        disabled: $option.prop('disabled'),
                        selected: $option.prop('selected'),
                        title: $option.prop('title')
                    };
                } else if ($option.is('optgroup')) {
                    data = {
                        text: $option.prop('label'),
                        children: [],
                        title: $option.prop('title')
                    };

                    var $children = $option.children('option');
                    var children = [];

                    for (var c = 0; c < $children.length; c++) {
                        var $child = $($children[c]);

                        var child = this.item($child);

                        children.push(child);
                    }

                    data.children = children;
                }

                data = this._normalizeItem(data);
                data.element = $option[0];

                Utils.StoreData($option[0], 'data', data);

                return data;
            };

            SelectAdapter.prototype._normalizeItem = function(item) {
                if (item !== Object(item)) {
                    item = {
                        id: item,
                        text: item
                    };
                }

                item = $.extend({}, {
                    text: ''
                }, item);

                var defaults = {
                    selected: false,
                    disabled: false
                };

                if (item.id != null) {
                    item.id = item.id.toString();
                }

                if (item.text != null) {
                    item.text = item.text.toString();
                }

                if (item._resultId == null && item.id && this.container != null) {
                    item._resultId = this.generateResultId(this.container, item);
                }

                return $.extend({}, defaults, item);
            };

            SelectAdapter.prototype.matches = function(params, data) {
                var matcher = this.options.get('matcher');

                return matcher(params, data);
            };

            return SelectAdapter;
        });

        S2.define('select2/data/array', [
            './select',
            '../utils',
            'jquery'
        ], function(SelectAdapter, Utils, $) {
            function ArrayAdapter($element, options) {
                var data = options.get('data') || [];

                ArrayAdapter.__super__.constructor.call(this, $element, options);

                this.addOptions(this.convertToOptions(data));
            }

            Utils.Extend(ArrayAdapter, SelectAdapter);

            ArrayAdapter.prototype.select = function(data) {
                var $option = this.$element.find('option').filter(function(i, elm) {
                    return elm.value == data.id.toString();
                });

                if ($option.length === 0) {
                    $option = this.option(data);

                    this.addOptions($option);
                }

                ArrayAdapter.__super__.select.call(this, data);
            };

            ArrayAdapter.prototype.convertToOptions = function(data) {
                var self = this;

                var $existing = this.$element.find('option');
                var existingIds = $existing.map(function() {
                    return self.item($(this)).id;
                }).get();

                var $options = [];

                // Filter out all items except for the one passed in the argument
                function onlyItem(item) {
                    return function() {
                        return $(this).val() == item.id;
                    };
                }

                for (var d = 0; d < data.length; d++) {
                    var item = this._normalizeItem(data[d]);

                    // Skip items which were pre-loaded, only merge the data
                    if ($.inArray(item.id, existingIds) >= 0) {
                        var $existingOption = $existing.filter(onlyItem(item));

                        var existingData = this.item($existingOption);
                        var newData = $.extend(true, {}, item, existingData);

                        var $newOption = this.option(newData);

                        $existingOption.replaceWith($newOption);

                        continue;
                    }

                    var $option = this.option(item);

                    if (item.children) {
                        var $children = this.convertToOptions(item.children);

                        Utils.appendMany($option, $children);
                    }

                    $options.push($option);
                }

                return $options;
            };

            return ArrayAdapter;
        });

        S2.define('select2/data/ajax', [
            './array',
            '../utils',
            'jquery'
        ], function(ArrayAdapter, Utils, $) {
            function AjaxAdapter($element, options) {
                this.ajaxOptions = this._applyDefaults(options.get('ajax'));

                if (this.ajaxOptions.processResults != null) {
                    this.processResults = this.ajaxOptions.processResults;
                }

                AjaxAdapter.__super__.constructor.call(this, $element, options);
            }

            Utils.Extend(AjaxAdapter, ArrayAdapter);

            AjaxAdapter.prototype._applyDefaults = function(options) {
                var defaults = {
                    data: function(params) {
                        return $.extend({}, params, {
                            q: params.term
                        });
                    },
                    transport: function(params, success, failure) {
                        var $request = $.ajax(params);

                        $request.then(success);
                        $request.fail(failure);

                        return $request;
                    }
                };

                return $.extend({}, defaults, options, true);
            };

            AjaxAdapter.prototype.processResults = function(results) {
                return results;
            };

            AjaxAdapter.prototype.query = function(params, callback) {
                var matches = [];
                var self = this;

                if (this._request != null) {
                    // JSONP requests cannot always be aborted
                    if ($.isFunction(this._request.abort)) {
                        this._request.abort();
                    }

                    this._request = null;
                }

                var options = $.extend({
                    type: 'GET'
                }, this.ajaxOptions);

                if (typeof options.url === 'function') {
                    options.url = options.url.call(this.$element, params);
                }

                if (typeof options.data === 'function') {
                    options.data = options.data.call(this.$element, params);
                }

                function request() {
                    var $request = options.transport(options, function(data) {
                        var results = self.processResults(data, params);

                        if (self.options.get('debug') && window.console && console.error) {
                            // Check to make sure that the response included a `results` key.
                            if (!results || !results.results || !$.isArray(results.results)) {
                                console.error(
                                    'Select2: The AJAX results did not return an array in the ' +
                                    '`results` key of the response.'
                                );
                            }
                        }

                        callback(results);
                    }, function() {
                        // Attempt to detect if a request was aborted
                        // Only works if the transport exposes a status property
                        if ('status' in $request &&
                            ($request.status === 0 || $request.status === '0')) {
                            return;
                        }

                        self.trigger('results:message', {
                            message: 'errorLoading'
                        });
                    });

                    self._request = $request;
                }

                if (this.ajaxOptions.delay && params.term != null) {
                    if (this._queryTimeout) {
                        window.clearTimeout(this._queryTimeout);
                    }

                    this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
                } else {
                    request();
                }
            };

            return AjaxAdapter;
        });

        S2.define('select2/data/tags', [
            'jquery'
        ], function($) {
            function Tags(decorated, $element, options) {
                var tags = options.get('tags');

                var createTag = options.get('createTag');

                if (createTag !== undefined) {
                    this.createTag = createTag;
                }

                var insertTag = options.get('insertTag');

                if (insertTag !== undefined) {
                    this.insertTag = insertTag;
                }

                decorated.call(this, $element, options);

                if ($.isArray(tags)) {
                    for (var t = 0; t < tags.length; t++) {
                        var tag = tags[t];
                        var item = this._normalizeItem(tag);

                        var $option = this.option(item);

                        this.$element.append($option);
                    }
                }
            }

            Tags.prototype.query = function(decorated, params, callback) {
                var self = this;

                this._removeOldTags();

                if (params.term == null || params.page != null) {
                    decorated.call(this, params, callback);
                    return;
                }

                function wrapper(obj, child) {
                    var data = obj.results;

                    for (var i = 0; i < data.length; i++) {
                        var option = data[i];

                        var checkChildren = (
                            option.children != null &&
                            !wrapper({
                                results: option.children
                            }, true)
                        );

                        var optionText = (option.text || '').toUpperCase();
                        var paramsTerm = (params.term || '').toUpperCase();

                        var checkText = optionText === paramsTerm;

                        if (checkText || checkChildren) {
                            if (child) {
                                return false;
                            }

                            obj.data = data;
                            callback(obj);

                            return;
                        }
                    }

                    if (child) {
                        return true;
                    }

                    var tag = self.createTag(params);

                    if (tag != null) {
                        var $option = self.option(tag);
                        $option.attr('data-select2-tag', true);

                        self.addOptions([$option]);

                        self.insertTag(data, tag);
                    }

                    obj.results = data;

                    callback(obj);
                }

                decorated.call(this, params, wrapper);
            };

            Tags.prototype.createTag = function(decorated, params) {
                var term = $.trim(params.term);

                if (term === '') {
                    return null;
                }

                return {
                    id: term,
                    text: term
                };
            };

            Tags.prototype.insertTag = function(_, data, tag) {
                data.unshift(tag);
            };

            Tags.prototype._removeOldTags = function(_) {
                var tag = this._lastTag;

                var $options = this.$element.find('option[data-select2-tag]');

                $options.each(function() {
                    if (this.selected) {
                        return;
                    }

                    $(this).remove();
                });
            };

            return Tags;
        });

        S2.define('select2/data/tokenizer', [
            'jquery'
        ], function($) {
            function Tokenizer(decorated, $element, options) {
                var tokenizer = options.get('tokenizer');

                if (tokenizer !== undefined) {
                    this.tokenizer = tokenizer;
                }

                decorated.call(this, $element, options);
            }

            Tokenizer.prototype.bind = function(decorated, container, $container) {
                decorated.call(this, container, $container);

                this.$search = container.dropdown.$search || container.selection.$search ||
                    $container.find('.select2-search__field');
            };

            Tokenizer.prototype.query = function(decorated, params, callback) {
                var self = this;

                function createAndSelect(data) {
                    // Normalize the data object so we can use it for checks
                    var item = self._normalizeItem(data);

                    // Check if the data object already exists as a tag
                    // Select it if it doesn't
                    var $existingOptions = self.$element.find('option').filter(function() {
                        return $(this).val() === item.id;
                    });

                    // If an existing option wasn't found for it, create the option
                    if (!$existingOptions.length) {
                        var $option = self.option(item);
                        $option.attr('data-select2-tag', true);

                        self._removeOldTags();
                        self.addOptions([$option]);
                    }

                    // Select the item, now that we know there is an option for it
                    select(item);
                }

                function select(data) {
                    self.trigger('select', {
                        data: data
                    });
                }

                params.term = params.term || '';

                var tokenData = this.tokenizer(params, this.options, createAndSelect);

                if (tokenData.term !== params.term) {
                    // Replace the search term if we have the search box
                    if (this.$search.length) {
                        this.$search.val(tokenData.term);
                        this.$search.focus();
                    }

                    params.term = tokenData.term;
                }

                decorated.call(this, params, callback);
            };

            Tokenizer.prototype.tokenizer = function(_, params, options, callback) {
                var separators = options.get('tokenSeparators') || [];
                var term = params.term;
                var i = 0;

                var createTag = this.createTag || function(params) {
                    return {
                        id: params.term,
                        text: params.term
                    };
                };

                while (i < term.length) {
                    var termChar = term[i];

                    if ($.inArray(termChar, separators) === -1) {
                        i++;

                        continue;
                    }

                    var part = term.substr(0, i);
                    var partParams = $.extend({}, params, {
                        term: part
                    });

                    var data = createTag(partParams);

                    if (data == null) {
                        i++;
                        continue;
                    }

                    callback(data);

                    // Reset the term to not include the tokenized portion
                    term = term.substr(i + 1) || '';
                    i = 0;
                }

                return {
                    term: term
                };
            };

            return Tokenizer;
        });

        S2.define('select2/data/minimumInputLength', [

        ], function() {
            function MinimumInputLength(decorated, $e, options) {
                this.minimumInputLength = options.get('minimumInputLength');

                decorated.call(this, $e, options);
            }

            MinimumInputLength.prototype.query = function(decorated, params, callback) {
                params.term = params.term || '';

                if (params.term.length < this.minimumInputLength) {
                    this.trigger('results:message', {
                        message: 'inputTooShort',
                        args: {
                            minimum: this.minimumInputLength,
                            input: params.term,
                            params: params
                        }
                    });

                    return;
                }

                decorated.call(this, params, callback);
            };

            return MinimumInputLength;
        });

        S2.define('select2/data/maximumInputLength', [

        ], function() {
            function MaximumInputLength(decorated, $e, options) {
                this.maximumInputLength = options.get('maximumInputLength');

                decorated.call(this, $e, options);
            }

            MaximumInputLength.prototype.query = function(decorated, params, callback) {
                params.term = params.term || '';

                if (this.maximumInputLength > 0 &&
                    params.term.length > this.maximumInputLength) {
                    this.trigger('results:message', {
                        message: 'inputTooLong',
                        args: {
                            maximum: this.maximumInputLength,
                            input: params.term,
                            params: params
                        }
                    });

                    return;
                }

                decorated.call(this, params, callback);
            };

            return MaximumInputLength;
        });

        S2.define('select2/data/maximumSelectionLength', [

        ], function() {
            function MaximumSelectionLength(decorated, $e, options) {
                this.maximumSelectionLength = options.get('maximumSelectionLength');

                decorated.call(this, $e, options);
            }

            MaximumSelectionLength.prototype.query =
                function(decorated, params, callback) {
                    var self = this;

                    this.current(function(currentData) {
                        var count = currentData != null ? currentData.length : 0;
                        if (self.maximumSelectionLength > 0 &&
                            count >= self.maximumSelectionLength) {
                            self.trigger('results:message', {
                                message: 'maximumSelected',
                                args: {
                                    maximum: self.maximumSelectionLength
                                }
                            });
                            return;
                        }
                        decorated.call(self, params, callback);
                    });
                };

            return MaximumSelectionLength;
        });

        S2.define('select2/dropdown', [
            'jquery',
            './utils'
        ], function($, Utils) {
            function Dropdown($element, options) {
                this.$element = $element;
                this.options = options;

                Dropdown.__super__.constructor.call(this);
            }

            Utils.Extend(Dropdown, Utils.Observable);

            Dropdown.prototype.render = function() {
                var $dropdown = $(
                    '<span class="select2-dropdown">' +
                    '<span class="select2-results"></span>' +
                    '</span>'
                );

                $dropdown.attr('dir', this.options.get('dir'));

                this.$dropdown = $dropdown;

                return $dropdown;
            };

            Dropdown.prototype.bind = function() {
                // Should be implemented in subclasses
            };

            Dropdown.prototype.position = function($dropdown, $container) {
                // Should be implmented in subclasses
            };

            Dropdown.prototype.destroy = function() {
                // Remove the dropdown from the DOM
                this.$dropdown.remove();
            };

            return Dropdown;
        });

        S2.define('select2/dropdown/search', [
            'jquery',
            '../utils'
        ], function($, Utils) {
            function Search() {}

            Search.prototype.render = function(decorated) {
                var $rendered = decorated.call(this);

                var $search = $(
                    '<span class="select2-search select2-search--dropdown">' +
                    '<input class="select2-search__field" type="search" tabindex="-1"' +
                    ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
                    ' spellcheck="false" role="textbox" />' +
                    '</span>'
                );

                this.$searchContainer = $search;
                this.$search = $search.find('input');

                $rendered.prepend($search);

                return $rendered;
            };

            Search.prototype.bind = function(decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                this.$search.on('keydown', function(evt) {
                    self.trigger('keypress', evt);

                    self._keyUpPrevented = evt.isDefaultPrevented();
                });

                // Workaround for browsers which do not support the `input` event
                // This will prevent double-triggering of events for browsers which support
                // both the `keyup` and `input` events.
                this.$search.on('input', function(evt) {
                    // Unbind the duplicated `keyup` event
                    $(this).off('keyup');
                });

                this.$search.on('keyup input', function(evt) {
                    self.handleSearch(evt);
                });

                container.on('open', function() {
                    self.$search.attr('tabindex', 0);

                    self.$search.focus();

                    window.setTimeout(function() {
                        self.$search.focus();
                    }, 0);
                });

                container.on('close', function() {
                    self.$search.attr('tabindex', -1);

                    self.$search.val('');
                    self.$search.blur();
                });

                container.on('focus', function() {
                    if (!container.isOpen()) {
                        self.$search.focus();
                    }
                });

                container.on('results:all', function(params) {
                    if (params.query.term == null || params.query.term === '') {
                        var showSearch = self.showSearch(params);
                        var enableSearch = self.options.get("enableSearch");
                        if (enableSearch) {
                            self.$searchContainer.removeClass('select2-search--hide');
                        } else {
                            self.$searchContainer.addClass('select2-search--hide');
                        }
                    }
                });
            };

            Search.prototype.handleSearch = function(evt) {
                if (!this._keyUpPrevented) {
                    var input = this.$search.val();

                    this.trigger('query', {
                        term: input
                    });
                }

                this._keyUpPrevented = false;
            };

            Search.prototype.showSearch = function(_, params) {
                return true;
            };

            return Search;
        });

        S2.define('select2/dropdown/hidePlaceholder', [

        ], function() {
            function HidePlaceholder(decorated, $element, options, dataAdapter) {
                this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

                decorated.call(this, $element, options, dataAdapter);
            }

            HidePlaceholder.prototype.append = function(decorated, data) {
                data.results = this.removePlaceholder(data.results);

                decorated.call(this, data);
            };

            HidePlaceholder.prototype.normalizePlaceholder = function(_, placeholder) {
                if (typeof placeholder === 'string') {
                    placeholder = {
                        id: '',
                        text: placeholder
                    };
                }

                return placeholder;
            };

            HidePlaceholder.prototype.removePlaceholder = function(_, data) {
                var modifiedData = data.slice(0);

                for (var d = data.length - 1; d >= 0; d--) {
                    var item = data[d];

                    if (this.placeholder.id === item.id) {
                        modifiedData.splice(d, 1);
                    }
                }

                return modifiedData;
            };

            return HidePlaceholder;
        });

        S2.define('select2/dropdown/infiniteScroll', [
            'jquery'
        ], function($) {
            function InfiniteScroll(decorated, $element, options, dataAdapter) {
                this.lastParams = {};

                decorated.call(this, $element, options, dataAdapter);

                this.$loadingMore = this.createLoadingMore();
                this.loading = false;
            }

            InfiniteScroll.prototype.append = function(decorated, data) {
                this.$loadingMore.remove();
                this.loading = false;

                decorated.call(this, data);

                if (this.showLoadingMore(data)) {
                    this.$results.append(this.$loadingMore);
                }
            };

            InfiniteScroll.prototype.bind = function(decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('query', function(params) {
                    self.lastParams = params;
                    self.loading = true;
                });

                container.on('query:append', function(params) {
                    self.lastParams = params;
                    self.loading = true;
                });

                this.$results.on('scroll', function() {
                    var isLoadMoreVisible = $.contains(
                        document.documentElement,
                        self.$loadingMore[0]
                    );

                    if (self.loading || !isLoadMoreVisible) {
                        return;
                    }

                    var currentOffset = self.$results.offset().top +
                        self.$results.outerHeight(false);
                    var loadingMoreOffset = self.$loadingMore.offset().top +
                        self.$loadingMore.outerHeight(false);

                    if (currentOffset + 50 >= loadingMoreOffset) {
                        self.loadMore();
                    }
                });
            };

            InfiniteScroll.prototype.loadMore = function() {
                this.loading = true;

                var params = $.extend({}, {
                    page: 1
                }, this.lastParams);

                params.page++;

                this.trigger('query:append', params);
            };

            InfiniteScroll.prototype.showLoadingMore = function(_, data) {
                return data.pagination && data.pagination.more;
            };

            InfiniteScroll.prototype.createLoadingMore = function() {
                var $option = $(
                    '<li ' +
                    'class="select2-results__option select2-results__option--load-more"' +
                    'role="treeitem" aria-disabled="true"></li>'
                );

                var message = this.options.get('translations').get('loadingMore');

                $option.html(message(this.lastParams));

                return $option;
            };

            return InfiniteScroll;
        });

        S2.define('select2/dropdown/attachBody', [
            'jquery',
            '../utils'
        ], function($, Utils) {
            function AttachBody(decorated, $element, options) {
                this.$dropdownParent = options.get('dropdownParent') || $(document.body);

                decorated.call(this, $element, options);
            }

            AttachBody.prototype.bind = function(decorated, container, $container) {
                var self = this;

                var setupResultsEvents = false;

                decorated.call(this, container, $container);

                container.on('open', function() {
                    self._showDropdown();
                    self._attachPositioningHandler(container);

                    if (!setupResultsEvents) {
                        setupResultsEvents = true;

                        container.on('results:all', function() {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });

                        container.on('results:append', function() {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });
                    }
                });

                container.on('close', function() {
                    self._hideDropdown();
                    self._detachPositioningHandler(container);
                });

                this.$dropdownContainer.on('mousedown', function(evt) {
                    evt.stopPropagation();
                });
            };

            AttachBody.prototype.destroy = function(decorated) {
                decorated.call(this);

                this.$dropdownContainer.remove();
            };

            AttachBody.prototype.position = function(decorated, $dropdown, $container) {
                // Clone all of the container classes
                $dropdown.attr('class', $container.attr('class'));

                $dropdown.removeClass('select2');
                $dropdown.addClass('select2-container--open');

                $dropdown.css({
                    position: 'absolute',
                    top: -999999
                });

                this.$container = $container;
            };

            AttachBody.prototype.render = function(decorated) {
                var $container = $('<span></span>');

                var $dropdown = decorated.call(this);
                $container.append($dropdown);

                this.$dropdownContainer = $container;

                return $container;
            };

            AttachBody.prototype._hideDropdown = function(decorated) {
                this.$dropdownContainer.detach();
            };

            AttachBody.prototype._attachPositioningHandler =
                function(decorated, container) {
                    var self = this;

                    var scrollEvent = 'scroll.select2.' + container.id;
                    var resizeEvent = 'resize.select2.' + container.id;
                    var orientationEvent = 'orientationchange.select2.' + container.id;

                    var $watchers = this.$container.parents().filter(Utils.hasScroll);
                    $watchers.each(function() {
                        Utils.StoreData(this, 'select2-scroll-position', {
                            x: $(this).scrollLeft(),
                            y: $(this).scrollTop()
                        });
                    });

                    $watchers.on(scrollEvent, function(ev) {
                        var position = Utils.GetData(this, 'select2-scroll-position');
                        $(this).scrollTop(position.y);
                    });

                    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
                        function(e) {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });
                };

            AttachBody.prototype._detachPositioningHandler =
                function(decorated, container) {
                    var scrollEvent = 'scroll.select2.' + container.id;
                    var resizeEvent = 'resize.select2.' + container.id;
                    var orientationEvent = 'orientationchange.select2.' + container.id;

                    var $watchers = this.$container.parents().filter(Utils.hasScroll);
                    $watchers.off(scrollEvent);

                    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
                };

            AttachBody.prototype._positionDropdown = function() {
                var $window = $(window);

                var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
                var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

                var newDirection = null;

                var offset = this.$container.offset();

                offset.bottom = offset.top + this.$container.outerHeight(false);

                var container = {
                    height: this.$container.outerHeight(false)
                };

                container.top = offset.top;
                container.bottom = offset.top + container.height;

                var dropdown = {
                    height: this.$dropdown.outerHeight(false)
                };

                var viewport = {
                    top: $window.scrollTop(),
                    bottom: $window.scrollTop() + $window.height()
                };

                var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
                var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

                var css = {
                    left: offset.left,
                    top: container.bottom
                };

                // Determine what the parent element is to use for calciulating the offset
                var $offsetParent = this.$dropdownParent;

                // For statically positoned elements, we need to get the element
                // that is determining the offset
                if ($offsetParent.css('position') === 'static') {
                    $offsetParent = $offsetParent.offsetParent();
                }

                var parentOffset = $offsetParent.offset();

                css.top -= parentOffset.top;
                css.left -= parentOffset.left;

                if (!isCurrentlyAbove && !isCurrentlyBelow) {
                    newDirection = 'below';
                }

                if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
                    newDirection = 'above';
                } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
                    newDirection = 'below';
                }

                if (newDirection == 'above' ||
                    (isCurrentlyAbove && newDirection !== 'below')) {
                    css.top = container.top - parentOffset.top - dropdown.height;
                }

                if (newDirection != null) {
                    this.$dropdown
                        .removeClass('select2-dropdown--below select2-dropdown--above')
                        .addClass('select2-dropdown--' + newDirection);
                    this.$container
                        .removeClass('select2-container--below select2-container--above')
                        .addClass('select2-container--' + newDirection);
                }

                this.$dropdownContainer.css(css);
            };

            AttachBody.prototype._resizeDropdown = function() {
                var css = {
                    width: this.$container.outerWidth(false) + 'px'
                };

                if (this.options.get('dropdownAutoWidth')) {
                    css.minWidth = css.width;
                    css.position = 'relative';
                    css.width = 'auto';
                }

                this.$dropdown.css(css);
            };

            AttachBody.prototype._showDropdown = function(decorated) {
                this.$dropdownContainer.appendTo(this.$dropdownParent);

                this._positionDropdown();
                this._resizeDropdown();
            };

            return AttachBody;
        });

        S2.define('select2/dropdown/minimumResultsForSearch', [

        ], function() {
            function countResults(data) {
                var count = 0;

                for (var d = 0; d < data.length; d++) {
                    var item = data[d];

                    if (item.children) {
                        count += countResults(item.children);
                    } else {
                        count++;
                    }
                }

                return count;
            }

            function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
                this.minimumResultsForSearch = options.get('minimumResultsForSearch');

                if (this.minimumResultsForSearch < 0) {
                    this.minimumResultsForSearch = Infinity;
                }

                decorated.call(this, $element, options, dataAdapter);
            }

            MinimumResultsForSearch.prototype.showSearch = function(decorated, params) {
                if (countResults(params.data.results) < this.minimumResultsForSearch) {
                    return false;
                }

                return decorated.call(this, params);
            };

            return MinimumResultsForSearch;
        });

        S2.define('select2/dropdown/selectOnClose', [
            '../utils'
        ], function(Utils) {
            function SelectOnClose() {}

            SelectOnClose.prototype.bind = function(decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('close', function(params) {
                    self._handleSelectOnClose(params);
                });
            };

            SelectOnClose.prototype._handleSelectOnClose = function(_, params) {
                if (params && params.originalSelect2Event != null) {
                    var event = params.originalSelect2Event;

                    // Don't select an item if the close event was triggered from a select or
                    // unselect event
                    if (event._type === 'select' || event._type === 'unselect') {
                        return;
                    }
                }

                var $highlightedResults = this.getHighlightedResults();

                // Only select highlighted results
                if ($highlightedResults.length < 1) {
                    return;
                }

                var data = Utils.GetData($highlightedResults[0], 'data');

                // Don't re-select already selected resulte
                if (
                    (data.element != null && data.element.selected) ||
                    (data.element == null && data.selected)
                ) {
                    return;
                }

                this.trigger('select', {
                    data: data
                });
            };

            return SelectOnClose;
        });

        S2.define('select2/dropdown/closeOnSelect', [

        ], function() {
            function CloseOnSelect() {}

            CloseOnSelect.prototype.bind = function(decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('select', function(evt) {
                    self._selectTriggered(evt);
                });

                container.on('unselect', function(evt) {
                    self._selectTriggered(evt);
                });
            };

            CloseOnSelect.prototype._selectTriggered = function(_, evt) {
                var originalEvent = evt.originalEvent;

                // Don't close if the control key is being held
                if (originalEvent && originalEvent.ctrlKey) {
                    return;
                }

                this.trigger('close', {
                    originalEvent: originalEvent,
                    originalSelect2Event: evt
                });
            };

            return CloseOnSelect;
        });

        S2.define('select2/i18n/en', [], function() {
            // English
            return {
                errorLoading: function() {
                    return 'The results could not be loaded.';
                },
                inputTooLong: function(args) {
                    var overChars = args.input.length - args.maximum;

                    var message = 'Please delete ' + overChars + ' character';

                    if (overChars != 1) {
                        message += 's';
                    }

                    return message;
                },
                inputTooShort: function(args) {
                    var remainingChars = args.minimum - args.input.length;

                    var message = 'Please enter ' + remainingChars + ' or more characters';

                    return message;
                },
                loadingMore: function() {
                    return 'Loading more results…';
                },
                maximumSelected: function(args) {
                    var message = 'You can only select ' + args.maximum + ' item';

                    if (args.maximum != 1) {
                        message += 's';
                    }

                    return message;
                },
                noResults: function() {
                    return 'No results found';
                },
                searching: function() {
                    return 'Searching…';
                }
            };
        });

        S2.define('select2/defaults', [
            'jquery',
            'require',

            './results',

            './selection/single',
            './selection/multiple',
            './selection/placeholder',
            './selection/allowClear',
            './selection/search',
            './selection/eventRelay',

            './utils',
            './translation',
            './diacritics',

            './data/select',
            './data/array',
            './data/ajax',
            './data/tags',
            './data/tokenizer',
            './data/minimumInputLength',
            './data/maximumInputLength',
            './data/maximumSelectionLength',

            './dropdown',
            './dropdown/search',
            './dropdown/hidePlaceholder',
            './dropdown/infiniteScroll',
            './dropdown/attachBody',
            './dropdown/minimumResultsForSearch',
            './dropdown/selectOnClose',
            './dropdown/closeOnSelect',

            './i18n/en'
        ], function($, require,

            ResultsList,

            SingleSelection, MultipleSelection, Placeholder, AllowClear,
            SelectionSearch, EventRelay,

            Utils, Translation, DIACRITICS,

            SelectData, ArrayData, AjaxData, Tags, Tokenizer,
            MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

            Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
            AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

            EnglishTranslation) {
            function Defaults() {
                this.reset();
            }

            Defaults.prototype.apply = function(options) {
                options = $.extend(true, {}, this.defaults, options);

                if (options.dataAdapter == null) {
                    if (options.ajax != null) {
                        options.dataAdapter = AjaxData;
                    } else if (options.data != null) {
                        options.dataAdapter = ArrayData;
                    } else {
                        options.dataAdapter = SelectData;
                    }

                    if (options.minimumInputLength > 0) {
                        options.dataAdapter = Utils.Decorate(
                            options.dataAdapter,
                            MinimumInputLength
                        );
                    }

                    if (options.maximumInputLength > 0) {
                        options.dataAdapter = Utils.Decorate(
                            options.dataAdapter,
                            MaximumInputLength
                        );
                    }

                    if (options.maximumSelectionLength > 0) {
                        options.dataAdapter = Utils.Decorate(
                            options.dataAdapter,
                            MaximumSelectionLength
                        );
                    }

                    if (options.tags) {
                        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
                    }

                    if (options.tokenSeparators != null || options.tokenizer != null) {
                        options.dataAdapter = Utils.Decorate(
                            options.dataAdapter,
                            Tokenizer
                        );
                    }

                    if (options.query != null) {
                        var Query = require(options.amdBase + 'compat/query');

                        options.dataAdapter = Utils.Decorate(
                            options.dataAdapter,
                            Query
                        );
                    }

                    if (options.initSelection != null) {
                        var InitSelection = require(options.amdBase + 'compat/initSelection');

                        options.dataAdapter = Utils.Decorate(
                            options.dataAdapter,
                            InitSelection
                        );
                    }
                }

                if (options.resultsAdapter == null) {
                    options.resultsAdapter = ResultsList;

                    if (options.ajax != null) {
                        options.resultsAdapter = Utils.Decorate(
                            options.resultsAdapter,
                            InfiniteScroll
                        );
                    }

                    if (options.placeholder != null) {
                        options.resultsAdapter = Utils.Decorate(
                            options.resultsAdapter,
                            HidePlaceholder
                        );
                    }

                    if (options.selectOnClose) {
                        options.resultsAdapter = Utils.Decorate(
                            options.resultsAdapter,
                            SelectOnClose
                        );
                    }
                }

                if (options.dropdownAdapter == null) {
                    if (options.multiple) {
                        options.dropdownAdapter = Dropdown;
                    } else {
                        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

                        options.dropdownAdapter = SearchableDropdown;
                    }

                    if (options.minimumResultsForSearch !== 0) {
                        options.dropdownAdapter = Utils.Decorate(
                            options.dropdownAdapter,
                            MinimumResultsForSearch
                        );
                    }

                    if (options.closeOnSelect) {
                        options.dropdownAdapter = Utils.Decorate(
                            options.dropdownAdapter,
                            CloseOnSelect
                        );
                    }

                    if (
                        options.dropdownCssClass != null ||
                        options.dropdownCss != null ||
                        options.adaptDropdownCssClass != null
                    ) {
                        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

                        options.dropdownAdapter = Utils.Decorate(
                            options.dropdownAdapter,
                            DropdownCSS
                        );
                    }

                    options.dropdownAdapter = Utils.Decorate(
                        options.dropdownAdapter,
                        AttachBody
                    );
                }

                if (options.selectionAdapter == null) {
                    if (options.multiple) {
                        options.selectionAdapter = MultipleSelection;
                    } else {
                        options.selectionAdapter = SingleSelection;
                    }

                    // Add the placeholder mixin if a placeholder was specified
                    if (options.placeholder != null) {
                        options.selectionAdapter = Utils.Decorate(
                            options.selectionAdapter,
                            Placeholder
                        );
                    }

                    if (options.allowClear) {
                        options.selectionAdapter = Utils.Decorate(
                            options.selectionAdapter,
                            AllowClear
                        );
                    }

                    if (options.multiple) {
                        options.selectionAdapter = Utils.Decorate(
                            options.selectionAdapter,
                            SelectionSearch
                        );
                    }

                    if (
                        options.containerCssClass != null ||
                        options.containerCss != null ||
                        options.adaptContainerCssClass != null
                    ) {
                        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

                        options.selectionAdapter = Utils.Decorate(
                            options.selectionAdapter,
                            ContainerCSS
                        );
                    }

                    options.selectionAdapter = Utils.Decorate(
                        options.selectionAdapter,
                        EventRelay
                    );
                }

                if (typeof options.language === 'string') {
                    // Check if the language is specified with a region
                    if (options.language.indexOf('-') > 0) {
                        // Extract the region information if it is included
                        var languageParts = options.language.split('-');
                        var baseLanguage = languageParts[0];

                        options.language = [options.language, baseLanguage];
                    } else {
                        options.language = [options.language];
                    }
                }

                if ($.isArray(options.language)) {
                    var languages = new Translation();
                    options.language.push('en');

                    var languageNames = options.language;

                    for (var l = 0; l < languageNames.length; l++) {
                        var name = languageNames[l];
                        var language = {};

                        try {
                            // Try to load it with the original name
                            language = Translation.loadPath(name);
                        } catch (e) {
                            try {
                                // If we couldn't load it, check if it wasn't the full path
                                name = this.defaults.amdLanguageBase + name;
                                language = Translation.loadPath(name);
                            } catch (ex) {
                                // The translation could not be loaded at all. Sometimes this is
                                // because of a configuration problem, other times this can be
                                // because of how Select2 helps load all possible translation files.
                                if (options.debug && window.console && console.warn) {
                                    console.warn(
                                        'Select2: The language file for "' + name + '" could not be ' +
                                        'automatically loaded. A fallback will be used instead.'
                                    );
                                }

                                continue;
                            }
                        }

                        languages.extend(language);
                    }

                    options.translations = languages;
                } else {
                    var baseTranslation = Translation.loadPath(
                        this.defaults.amdLanguageBase + 'en'
                    );
                    var customTranslation = new Translation(options.language);

                    customTranslation.extend(baseTranslation);

                    options.translations = customTranslation;
                }

                return options;
            };

            Defaults.prototype.reset = function() {
                function stripDiacritics(text) {
                    // Used 'uni range + named function' from http://jsperf.com/diacritics/18
                    function match(a) {
                        return DIACRITICS[a] || a;
                    }

                    return text.replace(/[^\u0000-\u007E]/g, match);
                }

                function matcher(params, data) {
                    // Always return the object if there is nothing to compare
                    if ($.trim(params.term) === '') {
                        return data;
                    }

                    // Do a recursive check for options with children
                    if (data.children && data.children.length > 0) {
                        // Clone the data object if there are children
                        // This is required as we modify the object to remove any non-matches
                        var match = $.extend(true, {}, data);

                        // Check each child of the option
                        for (var c = data.children.length - 1; c >= 0; c--) {
                            var child = data.children[c];

                            var matches = matcher(params, child);

                            // If there wasn't a match, remove the object in the array
                            if (matches == null) {
                                match.children.splice(c, 1);
                            }
                        }

                        // If any children matched, return the new object
                        if (match.children.length > 0) {
                            return match;
                        }

                        // If there were no matching children, check just the plain object
                        return matcher(params, match);
                    }

                    var original = stripDiacritics(data.text).toUpperCase();
                    var term = stripDiacritics(params.term).toUpperCase();

                    // Check if the text contains the term
                    if (original.indexOf(term) > -1) {
                        return data;
                    }

                    // If it doesn't contain the term, don't return anything
                    return null;
                }

                this.defaults = {
                    amdBase: './',
                    amdLanguageBase: './i18n/',
                    closeOnSelect: true,
                    debug: false,
                    dropdownAutoWidth: false,
                    escapeMarkup: Utils.escapeMarkup,
                    language: EnglishTranslation,
                    matcher: matcher,
                    minimumInputLength: 0,
                    maximumInputLength: 0,
                    maximumSelectionLength: 0,
                    minimumResultsForSearch: 0,
                    selectOnClose: false,
                    sorter: function(data) {
                        return data;
                    },
                    templateResult: function(result) {
                        return result.text;
                    },
                    templateSelection: function(selection) {
                        return selection.text;
                    },
                    theme: 'default',
                    width: 'resolve',
                    enableSearch: true
                };
            };

            Defaults.prototype.set = function(key, value) {
                var camelKey = $.camelCase(key);

                var data = {};
                data[camelKey] = value;

                var convertedData = Utils._convertData(data);

                $.extend(true, this.defaults, convertedData);
            };

            var defaults = new Defaults();

            return defaults;
        });

        S2.define('select2/options', [
            'require',
            'jquery',
            './defaults',
            './utils'
        ], function(require, $, Defaults, Utils) {
            function Options(options, $element) {
                this.options = options;

                if ($element != null) {
                    this.fromElement($element);
                }

                this.options = Defaults.apply(this.options);

                if ($element && $element.is('input')) {
                    var InputCompat = require(this.get('amdBase') + 'compat/inputData');

                    this.options.dataAdapter = Utils.Decorate(
                        this.options.dataAdapter,
                        InputCompat
                    );
                }
            }

            Options.prototype.fromElement = function($e) {
                var excludedData = ['select2'];

                if (this.options.multiple == null) {
                    this.options.multiple = $e.prop('multiple');
                }

                if (this.options.disabled == null) {
                    this.options.disabled = $e.prop('disabled');
                }

                if (this.options.language == null) {
                    if ($e.prop('lang')) {
                        this.options.language = $e.prop('lang').toLowerCase();
                    } else if ($e.closest('[lang]').prop('lang')) {
                        this.options.language = $e.closest('[lang]').prop('lang');
                    }
                }

                if (this.options.dir == null) {
                    if ($e.prop('dir')) {
                        this.options.dir = $e.prop('dir');
                    } else if ($e.closest('[dir]').prop('dir')) {
                        this.options.dir = $e.closest('[dir]').prop('dir');
                    } else {
                        this.options.dir = 'ltr';
                    }
                }

                $e.prop('disabled', this.options.disabled);
                $e.prop('multiple', this.options.multiple);

                if (Utils.GetData($e[0], 'select2Tags')) {
                    if (this.options.debug && window.console && console.warn) {
                        console.warn(
                            'Select2: The `data-select2-tags` attribute has been changed to ' +
                            'use the `data-data` and `data-tags="true"` attributes and will be ' +
                            'removed in future versions of Select2.'
                        );
                    }

                    Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
                    Utils.StoreData($e[0], 'tags', true);
                }

                if (Utils.GetData($e[0], 'ajaxUrl')) {
                    if (this.options.debug && window.console && console.warn) {
                        console.warn(
                            'Select2: The `data-ajax-url` attribute has been changed to ' +
                            '`data-ajax--url` and support for the old attribute will be removed' +
                            ' in future versions of Select2.'
                        );
                    }

                    $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
                    Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));

                }

                var dataset = {};

                // Prefer the element's `dataset` attribute if it exists
                // jQuery 1.x does not correctly handle data attributes with multiple dashes
                if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
                    dataset = $.extend(true, {}, $e[0].dataset, Utils.GetData($e[0]));
                } else {
                    dataset = Utils.GetData($e[0]);
                }

                var data = $.extend(true, {}, dataset);

                data = Utils._convertData(data);

                for (var key in data) {
                    if ($.inArray(key, excludedData) > -1) {
                        continue;
                    }

                    if ($.isPlainObject(this.options[key])) {
                        $.extend(this.options[key], data[key]);
                    } else {
                        this.options[key] = data[key];
                    }
                }

                return this;
            };

            Options.prototype.get = function(key) {
                return this.options[key];
            };

            Options.prototype.set = function(key, val) {
                this.options[key] = val;
            };

            return Options;
        });

        S2.define('select2/core', [
            'jquery',
            './options',
            './utils',
            './keys'
        ], function($, Options, Utils, KEYS) {
            var Select2 = function($element, options) {
                if (Utils.GetData($element[0], 'select2') != null) {
                    Utils.GetData($element[0], 'select2').destroy();
                }

                this.$element = $element;

                this.id = this._generateId($element);

                options = options || {};

                this.options = new Options(options, $element);

                Select2.__super__.constructor.call(this);

                // Set up the tabindex

                var tabindex = $element.attr('tabindex') || 0;
                Utils.StoreData($element[0], 'old-tabindex', tabindex);
                $element.attr('tabindex', '-1');

                // Set up containers and adapters

                var DataAdapter = this.options.get('dataAdapter');
                this.dataAdapter = new DataAdapter($element, this.options);

                var $container = this.render();

                this._placeContainer($container);

                var SelectionAdapter = this.options.get('selectionAdapter');
                this.selection = new SelectionAdapter($element, this.options);
                this.$selection = this.selection.render();

                this.selection.position(this.$selection, $container);

                var DropdownAdapter = this.options.get('dropdownAdapter');
                this.dropdown = new DropdownAdapter($element, this.options);
                this.$dropdown = this.dropdown.render();

                this.dropdown.position(this.$dropdown, $container);

                var ResultsAdapter = this.options.get('resultsAdapter');
                this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
                this.$results = this.results.render();

                this.results.position(this.$results, this.$dropdown);

                // Bind events

                var self = this;

                // Bind the container to all of the adapters
                this._bindAdapters();

                // Register any DOM event handlers
                this._registerDomEvents();

                // Register any internal event handlers
                this._registerDataEvents();
                this._registerSelectionEvents();
                this._registerDropdownEvents();
                this._registerResultsEvents();
                this._registerEvents();

                // Set the initial state
                this.dataAdapter.current(function(initialData) {
                    self.trigger('selection:update', {
                        data: initialData
                    });
                });

                // Hide the original select
                $element.addClass('select2-hidden-accessible');
                $element.attr('aria-hidden', 'true');

                // Synchronize any monitored attributes
                this._syncAttributes();

                Utils.StoreData($element[0], 'select2', this);

                // Ensure backwards compatibility with $element.data('select2').
                $element.data('select2', this);
            };

            Utils.Extend(Select2, Utils.Observable);

            Select2.prototype._generateId = function($element) {
                var id = '';

                if ($element.attr('id') != null) {
                    id = $element.attr('id');
                } else if ($element.attr('name') != null) {
                    id = $element.attr('name') + '-' + Utils.generateChars(2);
                } else {
                    id = Utils.generateChars(4);
                }

                id = id.replace(/(:|\.|\[|\]|,)/g, '');
                id = 'select2-' + id;

                return id;
            };

            Select2.prototype._placeContainer = function($container) {
                $container.insertAfter(this.$element);

                var width = this._resolveWidth(this.$element, this.options.get('width'));

                if (width != null) {
                    $container.css('width', width);
                }
            };

            Select2.prototype._resolveWidth = function($element, method) {
                var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

                if (method == 'resolve') {
                    var styleWidth = this._resolveWidth($element, 'style');

                    if (styleWidth != null) {
                        return styleWidth;
                    }

                    return this._resolveWidth($element, 'element');
                }

                if (method == 'element') {
                    var elementWidth = $element.outerWidth(false);

                    if (elementWidth <= 0) {
                        return 'auto';
                    }

                    return elementWidth + 'px';
                }

                if (method == 'style') {
                    var style = $element.attr('style');

                    if (typeof(style) !== 'string') {
                        return null;
                    }

                    var attrs = style.split(';');

                    for (var i = 0, l = attrs.length; i < l; i = i + 1) {
                        var attr = attrs[i].replace(/\s/g, '');
                        var matches = attr.match(WIDTH);

                        if (matches !== null && matches.length >= 1) {
                            return matches[1];
                        }
                    }

                    return null;
                }

                return method;
            };

            Select2.prototype._bindAdapters = function() {
                this.dataAdapter.bind(this, this.$container);
                this.selection.bind(this, this.$container);

                this.dropdown.bind(this, this.$container);
                this.results.bind(this, this.$container);
            };

            Select2.prototype._registerDomEvents = function() {
                var self = this;

                this.$element.on('change.select2', function() {
                    self.dataAdapter.current(function(data) {
                        self.trigger('selection:update', {
                            data: data
                        });
                    });
                });

                this.$element.on('focus.select2', function(evt) {
                    self.trigger('focus', evt);
                });

                this._syncA = Utils.bind(this._syncAttributes, this);
                this._syncS = Utils.bind(this._syncSubtree, this);

                if (this.$element[0].attachEvent) {
                    this.$element[0].attachEvent('onpropertychange', this._syncA);
                }

                var observer = window.MutationObserver ||
                    window.WebKitMutationObserver ||
                    window.MozMutationObserver;

                if (observer != null) {
                    this._observer = new observer(function(mutations) {
                        $.each(mutations, self._syncA);
                        $.each(mutations, self._syncS);
                    });
                    this._observer.observe(this.$element[0], {
                        attributes: true,
                        childList: true,
                        subtree: false
                    });
                } else if (this.$element[0].addEventListener) {
                    this.$element[0].addEventListener(
                        'DOMAttrModified',
                        self._syncA,
                        false
                    );
                    this.$element[0].addEventListener(
                        'DOMNodeInserted',
                        self._syncS,
                        false
                    );
                    this.$element[0].addEventListener(
                        'DOMNodeRemoved',
                        self._syncS,
                        false
                    );
                }
            };

            Select2.prototype._registerDataEvents = function() {
                var self = this;

                this.dataAdapter.on('*', function(name, params) {
                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerSelectionEvents = function() {
                var self = this;
                var nonRelayEvents = ['toggle', 'focus'];

                this.selection.on('toggle', function() {
                    self.toggleDropdown();
                });

                this.selection.on('focus', function(params) {
                    self.focus(params);
                });

                this.selection.on('*', function(name, params) {
                    if ($.inArray(name, nonRelayEvents) !== -1) {
                        return;
                    }

                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerDropdownEvents = function() {
                var self = this;

                this.dropdown.on('*', function(name, params) {
                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerResultsEvents = function() {
                var self = this;

                this.results.on('*', function(name, params) {
                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerEvents = function() {
                var self = this;

                this.on('open', function() {
                    self.$container.addClass('select2-container--open');
                });

                this.on('close', function() {
                    self.$container.removeClass('select2-container--open');
                });

                this.on('enable', function() {
                    self.$container.removeClass('select2-container--disabled');
                });

                this.on('disable', function() {
                    self.$container.addClass('select2-container--disabled');
                });

                this.on('blur', function() {
                    self.$container.removeClass('select2-container--focus');
                });

                this.on('query', function(params) {
                    if (!self.isOpen()) {
                        self.trigger('open', {});
                    }

                    this.dataAdapter.query(params, function(data) {
                        self.trigger('results:all', {
                            data: data,
                            query: params
                        });
                    });
                });

                this.on('query:append', function(params) {
                    this.dataAdapter.query(params, function(data) {
                        self.trigger('results:append', {
                            data: data,
                            query: params
                        });
                    });
                });

                this.on('keypress', function(evt) {
                    var key = evt.which;

                    if (self.isOpen()) {
                        if (key === KEYS.ESC || key === KEYS.TAB ||
                            (key === KEYS.UP && evt.altKey)) {
                            self.close();

                            evt.preventDefault();
                        } else if (key === KEYS.ENTER) {
                            self.trigger('results:select', {});

                            evt.preventDefault();
                        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
                            self.trigger('results:toggle', {});

                            evt.preventDefault();
                        } else if (key === KEYS.UP) {
                            self.trigger('results:previous', {});

                            evt.preventDefault();
                        } else if (key === KEYS.DOWN) {
                            self.trigger('results:next', {});

                            evt.preventDefault();
                        }
                    } else {
                        if (key === KEYS.ENTER || key === KEYS.SPACE ||
                            (key === KEYS.DOWN && evt.altKey)) {
                            self.open();

                            evt.preventDefault();
                        }
                    }
                });
            };

            Select2.prototype._syncAttributes = function() {
                this.options.set('disabled', this.$element.prop('disabled'));

                if (this.options.get('disabled')) {
                    if (this.isOpen()) {
                        this.close();
                    }

                    this.trigger('disable', {});
                } else {
                    this.trigger('enable', {});
                }
            };

            Select2.prototype._syncSubtree = function(evt, mutations) {
                var changed = false;
                var self = this;

                // Ignore any mutation events raised for elements that aren't options or
                // optgroups. This handles the case when the select element is destroyed
                if (
                    evt && evt.target && (
                        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
                    )
                ) {
                    return;
                }

                if (!mutations) {
                    // If mutation events aren't supported, then we can only assume that the
                    // change affected the selections
                    changed = true;
                } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
                    for (var n = 0; n < mutations.addedNodes.length; n++) {
                        var node = mutations.addedNodes[n];

                        if (node.selected) {
                            changed = true;
                        }
                    }
                } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
                    changed = true;
                }

                // Only re-pull the data if we think there is a change
                if (changed) {
                    this.dataAdapter.current(function(currentData) {
                        self.trigger('selection:update', {
                            data: currentData
                        });
                    });
                }
            };

            /**
             * Override the trigger method to automatically trigger pre-events when
             * there are events that can be prevented.
             */
            Select2.prototype.trigger = function(name, args) {
                var actualTrigger = Select2.__super__.trigger;
                var preTriggerMap = {
                    'open': 'opening',
                    'close': 'closing',
                    'select': 'selecting',
                    'unselect': 'unselecting',
                    'clear': 'clearing'
                };

                if (args === undefined) {
                    args = {};
                }

                if (name in preTriggerMap) {
                    var preTriggerName = preTriggerMap[name];
                    var preTriggerArgs = {
                        prevented: false,
                        name: name,
                        args: args
                    };

                    actualTrigger.call(this, preTriggerName, preTriggerArgs);

                    if (preTriggerArgs.prevented) {
                        args.prevented = true;

                        return;
                    }
                }

                actualTrigger.call(this, name, args);
            };

            Select2.prototype.toggleDropdown = function() {
                if (this.options.get('disabled')) {
                    return;
                }

                if (this.isOpen()) {
                    this.close();
                } else {
                    this.open();
                }
            };

            Select2.prototype.open = function() {
                if (this.isOpen()) {
                    return;
                }

                this.trigger('query', {});
            };

            Select2.prototype.close = function() {
                if (!this.isOpen()) {
                    return;
                }

                this.trigger('close', {});
            };

            Select2.prototype.isOpen = function() {
                return this.$container.hasClass('select2-container--open');
            };

            Select2.prototype.hasFocus = function() {
                return this.$container.hasClass('select2-container--focus');
            };

            Select2.prototype.focus = function(data) {
                // No need to re-trigger focus events if we are already focused
                if (this.hasFocus()) {
                    return;
                }

                this.$container.addClass('select2-container--focus');
                this.trigger('focus', {});
            };

            Select2.prototype.enable = function(args) {
                if (this.options.get('debug') && window.console && console.warn) {
                    console.warn(
                        'Select2: The `select2("enable")` method has been deprecated and will' +
                        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
                        ' instead.'
                    );
                }

                if (args == null || args.length === 0) {
                    args = [true];
                }

                var disabled = !args[0];

                this.$element.prop('disabled', disabled);
            };

            Select2.prototype.data = function() {
                if (this.options.get('debug') &&
                    arguments.length > 0 && window.console && console.warn) {
                    console.warn(
                        'Select2: Data can no longer be set using `select2("data")`. You ' +
                        'should consider setting the value instead using `$element.val()`.'
                    );
                }

                var data = [];

                this.dataAdapter.current(function(currentData) {
                    data = currentData;
                });

                return data;
            };

            Select2.prototype.val = function(args) {
                if (this.options.get('debug') && window.console && console.warn) {
                    console.warn(
                        'Select2: The `select2("val")` method has been deprecated and will be' +
                        ' removed in later Select2 versions. Use $element.val() instead.'
                    );
                }

                if (args == null || args.length === 0) {
                    return this.$element.val();
                }

                var newVal = args[0];

                if ($.isArray(newVal)) {
                    newVal = $.map(newVal, function(obj) {
                        return obj.toString();
                    });
                }

                this.$element.val(newVal).trigger('change');
            };

            Select2.prototype.destroy = function() {
                this.$container.remove();

                if (this.$element[0].detachEvent) {
                    this.$element[0].detachEvent('onpropertychange', this._syncA);
                }

                if (this._observer != null) {
                    this._observer.disconnect();
                    this._observer = null;
                } else if (this.$element[0].removeEventListener) {
                    this.$element[0]
                        .removeEventListener('DOMAttrModified', this._syncA, false);
                    this.$element[0]
                        .removeEventListener('DOMNodeInserted', this._syncS, false);
                    this.$element[0]
                        .removeEventListener('DOMNodeRemoved', this._syncS, false);
                }

                this._syncA = null;
                this._syncS = null;

                this.$element.off('.select2');
                this.$element.attr('tabindex',
                    Utils.GetData(this.$element[0], 'old-tabindex'));

                this.$element.removeClass('select2-hidden-accessible');
                this.$element.attr('aria-hidden', 'false');
                Utils.RemoveData(this.$element[0]);
                this.$element.removeData('select2');

                this.dataAdapter.destroy();
                this.selection.destroy();
                this.dropdown.destroy();
                this.results.destroy();

                this.dataAdapter = null;
                this.selection = null;
                this.dropdown = null;
                this.results = null;
            };

            Select2.prototype.render = function() {
                var $container = $(
                    '<span class="select2 select2-container">' +
                    '<span class="selection"></span>' +
                    '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
                    '</span>'
                );

                $container.attr('dir', this.options.get('dir'));

                this.$container = $container;

                this.$container.addClass('select2-container--' + this.options.get('theme'));

                Utils.StoreData($container[0], 'element', this.$element);

                return $container;
            };

            return Select2;
        });

        S2.define('jquery-mousewheel', [
            'jquery'
        ], function($) {
            // Used to shim jQuery.mousewheel for non-full builds.
            return $;
        });

        S2.define('jquery.select2', [
            'jquery',
            'jquery-mousewheel',

            './select2/core',
            './select2/defaults',
            './select2/utils'
        ], function($, _, Select2, Defaults, Utils) {
            if ($.fn.select2 == null) {
                // All methods that should return the element
                var thisMethods = ['open', 'close', 'destroy'];

                $.fn.select2 = function(options) {
                    options = options || {};

                    if (typeof options === 'object') {
                        this.each(function() {
                            var instanceOptions = $.extend(true, {}, options);

                            var instance = new Select2($(this), instanceOptions);
                        });

                        return this;
                    } else if (typeof options === 'string') {
                        var ret;
                        var args = Array.prototype.slice.call(arguments, 1);

                        this.each(function() {
                            var instance = Utils.GetData(this, 'select2');

                            if (instance == null && window.console && console.error) {
                                console.error(
                                    'The select2(\'' + options + '\') method was called on an ' +
                                    'element that is not using Select2.'
                                );
                            }

                            ret = instance[options].apply(instance, args);
                        });

                        // Check if we should be returning `this`
                        if ($.inArray(options, thisMethods) > -1) {
                            return this;
                        }

                        return ret;
                    } else {
                        throw new Error('Invalid arguments for Select2: ' + options);
                    }
                };
            }

            if ($.fn.select2.defaults == null) {
                $.fn.select2.defaults = Defaults;
            }

            return Select2;
        });

        // Return the AMD loader configuration so it can be used outside of this file
        return {
            define: S2.define,
            require: S2.require
        };
    }());

    // Autoload the jQuery bindings
    // We know that all of the modules exist above this, so we're safe
    var select2 = S2.require('jquery.select2');

    // Hold the AMD module references on the jQuery function that was just loaded
    // This allows Select2 to use the internal loader outside of this file, such
    // as in the language files.
    jQuery.fn.select2.amd = S2;

    // Return the Select2 instance for anyone who is importing it.
    return select2;
}));;
/**
 * @file
 * The Born Group module.
 *
 *
 * @category JS
 * @author Born Support <support@borngroup.com>
 * @copyright 2018 Copyright BORN Commerce Pvt Ltd, https://www.borngroup.com/
 * @license https://www.borngroup.com/ Private
 * @link http://digi.com.my/
 */
(function($, Drupal, drupalSettings) {
    "use strict";
    Drupal.behaviors.addressBehavior = {
        attach: function(context, settings) {
            var $elements, $userComments, $deleteWrapper, $mnpIdentityWrapper, $singlePaymentSection, $selectBankBlock,
                $addCardSection, $myaccountProfileEdit, $addAddressForm, $editAddressForm, i, $bornGsmProfile, $mnpForm, $refundWrapper;

            //profile edit
            $myaccountProfileEdit = $(".myaccount-profile-edit-wrapper");
            $myaccountProfileEdit.find(".gender-block select").select2({
                dropdownParent: $myaccountProfileEdit.find(".gender-block .select-wrapper"),
                enableSearch: false
            });
            $bornGsmProfile = $(".born-gsm-profile");

            $bornGsmProfile.find(".js-form-item-select-id select.form-control").select2({
                dropdownParent: $bornGsmProfile.find(".js-form-item-select-id .select-wrapper"),
                enableSearch: false
            });
            $bornGsmProfile.find(".form-item-city-passport select.form-control").select2({
                dropdownParent: $bornGsmProfile.find(".form-item-city-passport .select-wrapper"),
                enableSearch: true
            });

            $bornGsmProfile.find(".form-item-city-workpermit select.form-control").select2({
                dropdownParent: $bornGsmProfile.find(".form-item-city-workpermit .select-wrapper"),
                enableSearch: true
            });

            $myaccountProfileEdit.find(".form-item-identity-type select").select2({
                dropdownParent: $myaccountProfileEdit.find(".form-item-identity-type .select-wrapper"),
                enableSearch: false
            });
            //profile edit ends here

            //address form starts here
            $addAddressForm = $(".add-address-form");
            $editAddressForm = $(".edit-address-form");

            function attachAddressSelect($selector) {
                $selector.find(".js-form-item-country-id select").select2({
                    dropdownParent: $selector.find(".js-form-item-country-id .select-wrapper")
                });
                $selector.find(".js-form-item-state select").select2({
                    dropdownParent: $selector.find(".js-form-item-state .select-wrapper")
                });
                $selector.find(".js-form-item-city-name select").select2({
                    dropdownParent: $selector.find(".js-form-item-city-name .select-wrapper")
                });
            }
            attachAddressSelect($addAddressForm);
            attachAddressSelect($editAddressForm);

            $(".add-address-form .js-form-item-country-id select , .add-address-form .js-form-item-city-name select, .add-address-form .js-form-item-state select").once().on("change", function() {
                $(this).parents(".select-wrapper").find(".select2-selection__rendered").css("color", "#272727");
                $(this).parents(".select-wrapper").addClass("modified");
            });
            //address form ends here

            $(".block-mydigi-submenu #block-mydigi-menu").off("click").on("click", function() {
                $(this).parents(".block-mydigi-submenu").find(".menu--born-my-digi").toggleClass("active");
            });

            //refund
            $refundWrapper = $(".myaccount-refund-request-wrapper");
            $userComments = $refundWrapper.find(".main-content .user-comments");
            $userComments.find(".form-textarea").once().on("input", function() {
                if ($(this).val().length > 400) {
                    $userComments.find(".remaining-chars").show();
                    $userComments.find(".remaining-chars .character-length").text(500 - $(this).val().length);
                } else {
                    $userComments.find(".remaining-chars").hide();
                }
            });
            if ($refundWrapper.find(".form-item-agreement input").is(":checked")) {
                $refundWrapper.find(".refund-button").removeAttr("disabled");
            } else {
                $refundWrapper.find(".refund-button").attr("disabled", "disabled");
            }
            $refundWrapper.find(".form-item-agreement input").on("change", function() {
                if ($(this).is(":checked")) {
                    $refundWrapper.find(".refund-button").removeAttr("disabled");
                } else {
                    $refundWrapper.find(".refund-button").attr("disabled", "disabled");
                }
            });
            //refund ends here

            //mnp
            $(".mnp-resubmit-request-wrapper .resubmit-mnp-reason-container-header").find(".reason-header h4").once().on("click", function() {
                $(this).parents(".resubmit-mnp-reason-container").find(".resubmit-mnp-reason-container-details").slideToggle(200);
            });
            $mnpForm = $(".mnp-resubmit-request-wrapper .mnp-form-wrapper");

            $mnpForm.once().on("input", ".phone-number-validation-check", function() {
                var curValue = $(this).val();
                if ((curValue.indexOf("01") === 0) && (!(isNaN(curValue))) && (curValue.toLowerCase().indexOf("e") < 0)) {
                    $(this).parent(".form-item").removeClass("has-error");
                    $(this).parents(".phone-number-wrapper").find(".invalid-phonenumber").hide();
                    if ($mnpForm.find(".invalid-phonenumber:visible").length === 0) {
                        $mnpForm.find(".resubmit-button button").prop("disabled", false);
                    }
                } else {
                    $(this).parent(".form-item").addClass("has-error");
                    $(this).parents(".phone-number-wrapper").find(".invalid-phonenumber").show();
                    $mnpForm.find(".resubmit-button button").prop("disabled", true);
                }
            });
            $mnpForm.find(".phone-number-validation-check").trigger("input");
            $mnpForm.on("input", ".nric-number-wrapper .form-item input", function() {
                if (this.value.length >= this.maxLength) {
                    if ($(this).parents(".nric-textfield").next().length > 0) {
                        $(this).parents(".nric-textfield").next().find("input").focus();
                    }
                }
            });
            $mnpIdentityWrapper = $(".mnp-resubmit-request-wrapper .identity-wrapper");
            $mnpIdentityWrapper.find(".identity-block select").select2({
                dropdownParent: $mnpIdentityWrapper.find(".identity-block .select-wrapper"),
                enableSearch: false
            });
            if (window.location.pathname.indexOf("/selfcare/profile/saved-addresses") >= 0 || window.location.pathname.indexOf("/selfcare/profile/payment-methods") >= 0) {
                $(".block-mydigi-submenu li a[href='/selfcare/profile/personal-information']").parent().addClass("active");
            }
        }
    };

})(jQuery, Drupal, drupalSettings);;
/**
 * @file
 * The Born Group module.
 *
 *
 * @category JS
 * @author Born Support <support@borngroup.com>
 * @copyright 2018 Copyright BORN Commerce Pvt Ltd, https://www.borngroup.com/
 * @license https://www.borngroup.com/ Private
 * @link http://digi.com.my/
 */
(function($, Drupal, drupalSettings) {
    "use strict";
    Drupal.behaviors.maintenancePageBehavior = {
        attach: function(context, settings) {

            var $filter = $(".maintenance_page_footer .filter"),
                $filterButton = $(".maintenance_page_footer .filter-button");
            $filterButton.click(function() { // to filter the data when clicked on the tabs
                var value = $(this).attr("data-filter");
                $filterButton.removeClass("active");
                $(this).addClass("active");

                if (value === "all") {
                    $filter.show("500");
                } else {
                    $filter.not("." + value).addClass("hidden");
                    $filter.filter("." + value).removeClass("hidden");

                }
            });
        }
    };

})(jQuery, Drupal, drupalSettings);;
/*! Copyright (c) 2011 Piotr Rochala (http://rocha.la)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Version: 1.3.8
 *
 */
(function($) {

    $.fn.extend({
        slimScroll: function(options) {

            var defaults = {

                // width in pixels of the visible scroll area
                width: 'auto',

                // height in pixels of the visible scroll area
                height: '250px',

                // width in pixels of the scrollbar and rail
                size: '7px',

                // scrollbar color, accepts any hex/color value
                color: '#000',

                // scrollbar position - left/right
                position: 'right',

                // distance in pixels between the side edge and the scrollbar
                distance: '1px',

                // default scroll position on load - top / bottom / $('selector')
                start: 'top',

                // sets scrollbar opacity
                opacity: .4,

                // enables always-on mode for the scrollbar
                alwaysVisible: false,

                // check if we should hide the scrollbar when user is hovering over
                disableFadeOut: false,

                // sets visibility of the rail
                railVisible: false,

                // sets rail color
                railColor: '#333',

                // sets rail opacity
                railOpacity: .2,

                // whether  we should use jQuery UI Draggable to enable bar dragging
                railDraggable: true,

                // defautlt CSS class of the slimscroll rail
                railClass: 'slimScrollRail',

                // defautlt CSS class of the slimscroll bar
                barClass: 'slimScrollBar',

                // defautlt CSS class of the slimscroll wrapper
                wrapperClass: 'slimScrollDiv',

                // check if mousewheel should scroll the window if we reach top/bottom
                allowPageScroll: false,

                // scroll amount applied to each mouse wheel step
                wheelStep: 20,

                // scroll amount applied when user is using gestures
                touchScrollStep: 200,

                // sets border radius
                borderRadius: '7px',

                // sets border radius of the rail
                railBorderRadius: '7px'
            };

            var o = $.extend(defaults, options);

            // do it for every element that matches selector
            this.each(function() {

                var isOverPanel, isOverBar, isDragg, queueHide, touchDif,
                    barHeight, percentScroll, lastScroll,
                    divS = '<div></div>',
                    minBarHeight = 30,
                    releaseScroll = false;

                // used in event handlers and for better minification
                var me = $(this);

                // ensure we are not binding it again
                if (me.parent().hasClass(o.wrapperClass)) {
                    // start from last bar position
                    var offset = me.scrollTop();

                    // find bar and rail
                    bar = me.siblings('.' + o.barClass);
                    rail = me.siblings('.' + o.railClass);

                    getBarHeight();

                    // check if we should scroll existing instance
                    if ($.isPlainObject(options)) {
                        // Pass height: auto to an existing slimscroll object to force a resize after contents have changed
                        if ('height' in options && options.height == 'auto') {
                            me.parent().css('height', 'auto');
                            me.css('height', 'auto');
                            var height = me.parent().parent().height();
                            me.parent().css('height', height);
                            me.css('height', height);
                        } else if ('height' in options) {
                            var h = options.height;
                            me.parent().css('height', h);
                            me.css('height', h);
                        }

                        if ('scrollTo' in options) {
                            // jump to a static point
                            offset = parseInt(o.scrollTo);
                        } else if ('scrollBy' in options) {
                            // jump by value pixels
                            offset += parseInt(o.scrollBy);
                        } else if ('destroy' in options) {
                            // remove slimscroll elements
                            bar.remove();
                            rail.remove();
                            me.unwrap();
                            return;
                        }

                        // scroll content by the given offset
                        scrollContent(offset, false, true);
                    }

                    return;
                } else if ($.isPlainObject(options)) {
                    if ('destroy' in options) {
                        return;
                    }
                }

                // optionally set height to the parent's height
                o.height = (o.height == 'auto') ? me.parent().height() : o.height;

                // wrap content
                var wrapper = $(divS)
                    .addClass(o.wrapperClass)
                    .css({
                        position: 'relative',
                        overflow: 'hidden',
                        width: o.width,
                        height: o.height
                    });

                // update style for the div
                me.css({
                    overflow: 'hidden',
                    width: o.width,
                    height: o.height
                });

                // create scrollbar rail
                var rail = $(divS)
                    .addClass(o.railClass)
                    .css({
                        width: o.size,
                        height: '100%',
                        position: 'absolute',
                        top: 0,
                        display: (o.alwaysVisible && o.railVisible) ? 'block' : 'none',
                        'border-radius': o.railBorderRadius,
                        background: o.railColor,
                        opacity: o.railOpacity,
                        zIndex: 90
                    });

                // create scrollbar
                var bar = $(divS)
                    .addClass(o.barClass)
                    .css({
                        background: o.color,
                        width: o.size,
                        position: 'absolute',
                        top: 0,
                        opacity: o.opacity,
                        display: o.alwaysVisible ? 'block' : 'none',
                        'border-radius': o.borderRadius,
                        BorderRadius: o.borderRadius,
                        MozBorderRadius: o.borderRadius,
                        WebkitBorderRadius: o.borderRadius,
                        zIndex: 99
                    });

                // set position
                var posCss = (o.position == 'right') ? {
                    right: o.distance
                } : {
                    left: o.distance
                };
                rail.css(posCss);
                bar.css(posCss);

                // wrap it
                me.wrap(wrapper);

                // append to parent div
                me.parent().append(bar);
                me.parent().append(rail);

                // make it draggable and no longer dependent on the jqueryUI
                if (o.railDraggable) {
                    bar.bind("mousedown", function(e) {
                        var $doc = $(document);
                        isDragg = true;
                        t = parseFloat(bar.css('top'));
                        pageY = e.pageY;

                        $doc.bind("mousemove.slimscroll", function(e) {
                            currTop = t + e.pageY - pageY;
                            bar.css('top', currTop);
                            scrollContent(0, bar.position().top, false); // scroll content
                        });

                        $doc.bind("mouseup.slimscroll", function(e) {
                            isDragg = false;
                            hideBar();
                            $doc.unbind('.slimscroll');
                        });
                        return false;
                    }).bind("selectstart.slimscroll", function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                        return false;
                    });
                }

                // on rail over
                rail.hover(function() {
                    showBar();
                }, function() {
                    hideBar();
                });

                // on bar over
                bar.hover(function() {
                    isOverBar = true;
                }, function() {
                    isOverBar = false;
                });

                // show on parent mouseover
                me.hover(function() {
                    isOverPanel = true;
                    showBar();
                    hideBar();
                }, function() {
                    isOverPanel = false;
                    hideBar();
                });

                // support for mobile
                me.bind('touchstart', function(e, b) {
                    if (e.originalEvent.touches.length) {
                        // record where touch started
                        touchDif = e.originalEvent.touches[0].pageY;
                    }
                });

                me.bind('touchmove', function(e) {
                    // prevent scrolling the page if necessary
                    if (!releaseScroll) {
                        e.originalEvent.preventDefault();
                    }
                    if (e.originalEvent.touches.length) {
                        // see how far user swiped
                        var diff = (touchDif - e.originalEvent.touches[0].pageY) / o.touchScrollStep;
                        // scroll content
                        scrollContent(diff, true);
                        touchDif = e.originalEvent.touches[0].pageY;
                    }
                });

                // set up initial height
                getBarHeight();

                // check start position
                if (o.start === 'bottom') {
                    // scroll content to bottom
                    bar.css({
                        top: me.outerHeight() - bar.outerHeight()
                    });
                    scrollContent(0, true);
                } else if (o.start !== 'top') {
                    // assume jQuery selector
                    scrollContent($(o.start).position().top, null, true);

                    // make sure bar stays hidden
                    if (!o.alwaysVisible) {
                        bar.hide();
                    }
                }

                // attach scroll events
                attachWheel(this);

                function _onWheel(e) {
                    // use mouse wheel only when mouse is over
                    if (!isOverPanel) {
                        return;
                    }

                    var e = e || window.event;

                    var delta = 0;
                    if (e.wheelDelta) {
                        delta = -e.wheelDelta / 120;
                    }
                    if (e.detail) {
                        delta = e.detail / 3;
                    }

                    var target = e.target || e.srcTarget || e.srcElement;
                    if ($(target).closest('.' + o.wrapperClass).is(me.parent())) {
                        // scroll content
                        scrollContent(delta, true);
                    }

                    // stop window scroll
                    if (e.preventDefault && !releaseScroll) {
                        e.preventDefault();
                    }
                    if (!releaseScroll) {
                        e.returnValue = false;
                    }
                }

                function scrollContent(y, isWheel, isJump) {
                    releaseScroll = false;
                    var delta = y;
                    var maxTop = me.outerHeight() - bar.outerHeight();

                    if (isWheel) {
                        // move bar with mouse wheel
                        delta = parseInt(bar.css('top')) + y * parseInt(o.wheelStep) / 100 * bar.outerHeight();

                        // move bar, make sure it doesn't go out
                        delta = Math.min(Math.max(delta, 0), maxTop);

                        // if scrolling down, make sure a fractional change to the
                        // scroll position isn't rounded away when the scrollbar's CSS is set
                        // this flooring of delta would happened automatically when
                        // bar.css is set below, but we floor here for clarity
                        delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);

                        // scroll the scrollbar
                        bar.css({
                            top: delta + 'px'
                        });
                    }

                    // calculate actual scroll amount
                    percentScroll = parseInt(bar.css('top')) / (me.outerHeight() - bar.outerHeight());
                    delta = percentScroll * (me[0].scrollHeight - me.outerHeight());

                    if (isJump) {
                        delta = y;
                        var offsetTop = delta / me[0].scrollHeight * me.outerHeight();
                        offsetTop = Math.min(Math.max(offsetTop, 0), maxTop);
                        bar.css({
                            top: offsetTop + 'px'
                        });
                    }

                    // scroll content
                    me.scrollTop(delta);

                    // fire scrolling event
                    me.trigger('slimscrolling', ~~delta);

                    // ensure bar is visible
                    showBar();

                    // trigger hide when scroll is stopped
                    hideBar();
                }

                function attachWheel(target) {
                    if (window.addEventListener) {
                        target.addEventListener('DOMMouseScroll', _onWheel, false);
                        target.addEventListener('mousewheel', _onWheel, false);
                    } else {
                        document.attachEvent("onmousewheel", _onWheel)
                    }
                }

                function getBarHeight() {
                    // calculate scrollbar height and make sure it is not too small
                    barHeight = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), minBarHeight);
                    bar.css({
                        height: barHeight + 'px'
                    });

                    // hide scrollbar if content is not long enough
                    var display = barHeight == me.outerHeight() ? 'none' : 'block';
                    bar.css({
                        display: display
                    });
                }

                function showBar() {
                    // recalculate bar height
                    getBarHeight();
                    clearTimeout(queueHide);

                    // when bar reached top or bottom
                    if (percentScroll == ~~percentScroll) {
                        //release wheel
                        releaseScroll = o.allowPageScroll;

                        // publish approporiate event
                        if (lastScroll != percentScroll) {
                            var msg = (~~percentScroll == 0) ? 'top' : 'bottom';
                            me.trigger('slimscroll', msg);
                        }
                    } else {
                        releaseScroll = false;
                    }
                    lastScroll = percentScroll;

                    // show only when required
                    if (barHeight >= me.outerHeight()) {
                        //allow window scroll
                        releaseScroll = true;
                        return;
                    }
                    bar.stop(true, true).fadeIn('fast');
                    if (o.railVisible) {
                        rail.stop(true, true).fadeIn('fast');
                    }
                }

                function hideBar() {
                    // only hide when options allow it
                    if (!o.alwaysVisible) {
                        queueHide = setTimeout(function() {
                            if (!(o.disableFadeOut && isOverPanel) && !isOverBar && !isDragg) {
                                bar.fadeOut('slow');
                                rail.fadeOut('slow');
                            }
                        }, 1000);
                    }
                }

            });

            // maintain chainability
            return this;
        }
    });

    $.fn.extend({
        slimscroll: $.fn.slimScroll
    });

})(jQuery);;
/*! jquery.cookie v1.4.1 | MIT */
! function(a) {
    "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? a(require("jquery")) : a(jQuery)
}(function(a) {
    function b(a) {
        return h.raw ? a : encodeURIComponent(a)
    }

    function c(a) {
        return h.raw ? a : decodeURIComponent(a)
    }

    function d(a) {
        return b(h.json ? JSON.stringify(a) : String(a))
    }

    function e(a) {
        0 === a.indexOf('"') && (a = a.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\"));
        try {
            return a = decodeURIComponent(a.replace(g, " ")), h.json ? JSON.parse(a) : a
        } catch (b) {}
    }

    function f(b, c) {
        var d = h.raw ? b : e(b);
        return a.isFunction(c) ? c(d) : d
    }
    var g = /\+/g,
        h = a.cookie = function(e, g, i) {
            if (void 0 !== g && !a.isFunction(g)) {
                if (i = a.extend({}, h.defaults, i), "number" == typeof i.expires) {
                    var j = i.expires,
                        k = i.expires = new Date;
                    k.setTime(+k + 864e5 * j)
                }
                return document.cookie = [b(e), "=", d(g), i.expires ? "; expires=" + i.expires.toUTCString() : "", i.path ? "; path=" + i.path : "", i.domain ? "; domain=" + i.domain : "", i.secure ? "; secure" : ""].join("")
            }
            for (var l = e ? void 0 : {}, m = document.cookie ? document.cookie.split("; ") : [], n = 0, o = m.length; o > n; n++) {
                var p = m[n].split("="),
                    q = c(p.shift()),
                    r = p.join("=");
                if (e && e === q) {
                    l = f(r, g);
                    break
                }
                e || void 0 === (r = f(r)) || (l[q] = r)
            }
            return l
        };
    h.defaults = {}, a.removeCookie = function(b, c) {
        return void 0 === a.cookie(b) ? !1 : (a.cookie(b, "", a.extend({}, c, {
            expires: -1
        })), !a.cookie(b))
    }
});;
/**
 * @file
 * eu_cookie_compliance.js
 *
 * Defines the behavior of the eu cookie compliance banner.
 */

(function($, Drupal, drupalSettings) {

    'use strict';
    var euCookieComplianceBlockCookies;

    Drupal.behaviors.euCookieCompliancePopup = {
        attach: function(context) {
            $('body').once('eu-cookie-compliance').each(function() {
                // If configured, check JSON callback to determine if in EU.
                if (drupalSettings.eu_cookie_compliance.popup_eu_only_js) {
                    if (Drupal.eu_cookie_compliance.showBanner()) {
                        var url = drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + 'eu-cookie-compliance-check';
                        var data = {};
                        $.getJSON(url, data, function(data) {
                            // If in the EU, show the compliance banner.
                            if (data.in_eu) {
                                Drupal.eu_cookie_compliance.execute();
                            }

                            // If not in EU, set an agreed cookie automatically.
                            else {
                                Drupal.eu_cookie_compliance.setStatus(2);
                            }
                        });
                    }
                }

                // Otherwise, fallback to standard behavior which is to render the banner.
                else {
                    Drupal.eu_cookie_compliance.execute();
                }
            });
        },
    };

    Drupal.eu_cookie_compliance = {};

    Drupal.eu_cookie_compliance.execute = function() {
        try {
            if (!drupalSettings.eu_cookie_compliance.popup_enabled) {
                return;
            }

            if (!Drupal.eu_cookie_compliance.cookiesEnabled()) {
                return;
            }

            var status = Drupal.eu_cookie_compliance.getCurrentStatus();
            if ((status === 0 && drupalSettings.eu_cookie_compliance.method === 'default') || status === null) {
                if (!drupalSettings.eu_cookie_compliance.disagree_do_not_show_popup || status === null) {
                    // Detect mobile here and use mobile_popup_html_info, if we have a mobile device.
                    if (window.matchMedia('(max-width: ' + drupalSettings.eu_cookie_compliance.mobile_breakpoint + 'px)').matches && drupalSettings.eu_cookie_compliance.use_mobile_message) {
                        Drupal.eu_cookie_compliance.createPopup(drupalSettings.eu_cookie_compliance.mobile_popup_html_info);
                    } else {
                        Drupal.eu_cookie_compliance.createPopup(drupalSettings.eu_cookie_compliance.popup_html_info);
                    }

                    Drupal.eu_cookie_compliance.attachAgreeEvents();
                }
            } else if (status === 1 && drupalSettings.eu_cookie_compliance.popup_agreed_enabled) {
                Drupal.eu_cookie_compliance.createPopup(drupalSettings.eu_cookie_compliance.popup_html_agreed);
                Drupal.eu_cookie_compliance.attachHideEvents();
            } else if (status === 2 && drupalSettings.eu_cookie_compliance.withdraw_enabled) {
                Drupal.eu_cookie_compliance.createWithdrawBanner(drupalSettings.eu_cookie_compliance.withdraw_markup);
                Drupal.eu_cookie_compliance.attachWithdrawEvents();
            }
        } catch (e) {}
    };

    Drupal.eu_cookie_compliance.createWithdrawBanner = function(html) {
        var $html = $('<div></div>').html(html);
        var $banner = $('.eu-cookie-withdraw-banner', $html);
        $html.attr('id', 'sliding-popup');
        $html.addClass('eu-cookie-withdraw-wrapper');

        if (!drupalSettings.eu_cookie_compliance.popup_use_bare_css) {
            $banner.height(drupalSettings.eu_cookie_compliance.popup_height)
                .width(drupalSettings.eu_cookie_compliance.popup_width);
        }
        $html.hide();
        var height = 0;
        if (drupalSettings.eu_cookie_compliance.popup_position) {
            $html.prependTo('body');
            height = $html.outerHeight();

            $html.show()
                .addClass('sliding-popup-top')
                .addClass('clearfix')
                .css({
                    top: -1 * height
                });
            // For some reason, the tab outerHeight is -10 if we don't use a timeout
            // function to reveal the tab.
            setTimeout(function() {
                var height = $html.outerHeight();

                $html.animate({
                    top: -1 * (height)
                }, drupalSettings.eu_cookie_compliance.popup_delay, null, function() {
                    $html.trigger('eu_cookie_compliance_popup_open');
                });
            }.bind($html), 0);
        } else {
            if (drupalSettings.eu_cookie_compliance.better_support_for_screen_readers) {
                $html.prependTo('body');
            } else {
                $html.appendTo('body');
            }
            height = $html.outerHeight();
            $html.show()
                .addClass('sliding-popup-bottom')
                .css({
                    bottom: -1 * height
                });
            // For some reason, the tab outerHeight is -10 if we don't use a timeout
            // function to reveal the tab.
            setTimeout(function() {
                var height = $html.outerHeight();

                $html.animate({
                    bottom: -1 * (height)
                }, drupalSettings.eu_cookie_compliance.popup_delay, null, function() {
                    $html.trigger('eu_cookie_compliance_popup_open');
                });
            }.bind($html), 0);
        }
    };

    Drupal.eu_cookie_compliance.toggleWithdrawBanner = function() {
        var $wrapper = $('#sliding-popup');
        var $tab = $('.eu-cookie-withdraw-tab');
        var $bannerIsShowing = drupalSettings.eu_cookie_compliance.popup_position ? parseInt($wrapper.css('top')) === 0 : parseInt($wrapper.css('bottom')) === 0;
        var height = $wrapper.outerHeight();
        if (drupalSettings.eu_cookie_compliance.popup_position) {
            if ($bannerIsShowing) {
                $wrapper.animate({
                    'top': -1 * (height)
                }, drupalSettings.eu_cookie_compliance.popup_delay);
            } else {
                $wrapper.animate({
                    'top': 0
                }, drupalSettings.eu_cookie_compliance.popup_delay);
            }
        } else {
            if ($bannerIsShowing) {
                $wrapper.animate({
                    'bottom': -1 * (height)
                }, drupalSettings.eu_cookie_compliance.popup_delay);
            } else {
                $wrapper.animate({
                    'bottom': 0
                }, drupalSettings.eu_cookie_compliance.popup_delay);
            }
        }
    };

    Drupal.eu_cookie_compliance.createPopup = function(html) {
        // This fixes a problem with jQuery 1.9.
        var popup = $('<div></div>').html(html);
        popup.attr('id', 'sliding-popup');
        if (!drupalSettings.eu_cookie_compliance.popup_use_bare_css) {
            popup.height(drupalSettings.eu_cookie_compliance.popup_height)
                .width(drupalSettings.eu_cookie_compliance.popup_width);
        }

        popup.hide();
        var height = 0;
        if (drupalSettings.eu_cookie_compliance.popup_position) {
            popup.prependTo('body');
            height = popup.outerHeight();
            popup.show()
                .addClass('sliding-popup-top clearfix')
                .css({
                    top: -1 * height
                })
                .animate({
                    top: 0
                }, drupalSettings.eu_cookie_compliance.popup_delay, null, function() {
                    popup.trigger('eu_cookie_compliance_popup_open');
                });
        } else {
            if (drupalSettings.eu_cookie_compliance.better_support_for_screen_readers) {
                popup.prependTo('body');
            } else {
                popup.appendTo('body');
            }

            height = popup.outerHeight();
            popup.show()
                .addClass('sliding-popup-bottom')
                .css({
                    bottom: -1 * height
                })
                .animate({
                    bottom: 0
                }, drupalSettings.eu_cookie_compliance.popup_delay, null, function() {
                    popup.trigger('eu_cookie_compliance_popup_open');
                });
        }
    };

    Drupal.eu_cookie_compliance.attachAgreeEvents = function() {
        var clickingConfirms = drupalSettings.eu_cookie_compliance.popup_clicking_confirmation;
        var scrollConfirms = drupalSettings.eu_cookie_compliance.popup_scrolling_confirmation;

        $('.agree-button').click(Drupal.eu_cookie_compliance.acceptAction);
        $('.decline-button').click(Drupal.eu_cookie_compliance.declineAction);

        if (clickingConfirms) {
            $('a, input[type=submit], button[type=submit]').not('.popup-content *').bind('click.euCookieCompliance', Drupal.eu_cookie_compliance.acceptAction);
        }

        if (scrollConfirms) {
            var alreadyScrolled = false;
            var scrollHandler = function() {
                if (alreadyScrolled) {
                    Drupal.eu_cookie_compliance.acceptAction();
                    $(window).off('scroll', scrollHandler);
                } else {
                    alreadyScrolled = true;
                }
            };

            $(window).bind('scroll', scrollHandler);
        }

        $('.find-more-button').not('.find-more-button-processed').addClass('find-more-button-processed').click(Drupal.eu_cookie_compliance.moreInfoAction);
    };

    Drupal.eu_cookie_compliance.attachHideEvents = function() {
        var popupHideAgreed = drupalSettings.eu_cookie_compliance.popup_hide_agreed;
        var clickingConfirms = drupalSettings.eu_cookie_compliance.popup_clicking_confirmation;
        $('.hide-popup-button').click(function() {
            Drupal.eu_cookie_compliance.changeStatus(2);
        });
        if (clickingConfirms) {
            $('a, input[type=submit], button[type=submit]').unbind('click.euCookieCompliance');
        }

        if (popupHideAgreed) {
            $('a, input[type=submit], button[type=submit]').bind('click.euCookieComplianceHideAgreed', function() {
                Drupal.eu_cookie_compliance.changeStatus(2);
            });
        }

        $('.find-more-button').not('.find-more-button-processed').addClass('find-more-button-processed').click(Drupal.eu_cookie_compliance.moreInfoAction);
    };

    Drupal.eu_cookie_compliance.attachWithdrawEvents = function() {
        $('.eu-cookie-withdraw-button').click(Drupal.eu_cookie_compliance.withdrawAction);
        $('.eu-cookie-withdraw-tab').click(Drupal.eu_cookie_compliance.toggleWithdrawBanner);
    };

    Drupal.eu_cookie_compliance.acceptAction = function() {
        var agreedEnabled = drupalSettings.eu_cookie_compliance.popup_agreed_enabled;
        var nextStatus = 1;
        if (!agreedEnabled) {
            Drupal.eu_cookie_compliance.setStatus(1);
            nextStatus = 2;
        }

        if (!euCookieComplianceHasLoadedScripts) {
            euCookieComplianceLoadScripts();
        }

        if (typeof euCookieComplianceBlockCookies !== 'undefined') {
            clearInterval(euCookieComplianceBlockCookies);
        }

        Drupal.eu_cookie_compliance.changeStatus(nextStatus);
    };

    Drupal.eu_cookie_compliance.declineAction = function() {
        Drupal.eu_cookie_compliance.setStatus(0);
        var popup = $('#sliding-popup');
        if (popup.hasClass('sliding-popup-top')) {
            popup.animate({
                top: popup.outerHeight() * -1
            }).trigger('eu_cookie_compliance_popup_close');
        } else {
            popup.animate({
                bottom: popup.outerHeight() * -1
            }).trigger('eu_cookie_compliance_popup_close');
        }
    };

    Drupal.eu_cookie_compliance.withdrawAction = function() {
        Drupal.eu_cookie_compliance.setStatus(0);

        location.reload();
    };

    Drupal.eu_cookie_compliance.moreInfoAction = function() {
        if (drupalSettings.eu_cookie_compliance.disagree_do_not_show_popup) {
            Drupal.eu_cookie_compliance.setStatus(0);
            $('#sliding-popup').trigger('eu_cookie_compliance_popup_close').remove();
        } else {
            if (drupalSettings.eu_cookie_compliance.popup_link_new_window) {
                window.open(drupalSettings.eu_cookie_compliance.popup_link);
            } else {
                window.location.href = drupalSettings.eu_cookie_compliance.popup_link;
            }
        }
    };

    Drupal.eu_cookie_compliance.getCurrentStatus = function() {
        var cookieName = (drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed' : drupalSettings.eu_cookie_compliance.cookie_name;
        var value = $.cookie(cookieName);
        value = parseInt(value);
        if (isNaN(value)) {
            value = null;
        }

        return value;
    };

    Drupal.eu_cookie_compliance.changeStatus = function(value) {
        var status = Drupal.eu_cookie_compliance.getCurrentStatus();
        var reloadPage = drupalSettings.eu_cookie_compliance.reload_page;
        if (status === value) {
            return;
        }

        if (drupalSettings.eu_cookie_compliance.popup_position) {
            $('.sliding-popup-top').animate({
                top: $('#sliding-popup').outerHeight() * -1
            }, drupalSettings.eu_cookie_compliance.popup_delay, function() {
                if (status === null && !reloadPage) {
                    $('#sliding-popup').html(drupalSettings.eu_cookie_compliance.popup_html_agreed).animate({
                        top: 0
                    }, drupalSettings.eu_cookie_compliance.popup_delay);
                    Drupal.eu_cookie_compliance.attachHideEvents();
                } else if (status === 1) {
                    $('#sliding-popup').trigger('eu_cookie_compliance_popup_close').remove();
                }
            });
        } else {
            $('.sliding-popup-bottom').animate({
                bottom: $('#sliding-popup').outerHeight() * -1
            }, drupalSettings.eu_cookie_compliance.popup_delay, function() {
                if (status === null && !reloadPage) {
                    $('#sliding-popup').html(drupalSettings.eu_cookie_compliance.popup_html_agreed).animate({
                        bottom: 0
                    }, drupalSettings.eu_cookie_compliance.popup_delay);
                    Drupal.eu_cookie_compliance.attachHideEvents();
                } else if (status === 1) {
                    $('#sliding-popup').trigger('eu_cookie_compliance_popup_close').remove();
                }
            });
        }

        if (drupalSettings.eu_cookie_compliance.reload_page) {
            location.reload();
        }

        if (value === 2 && drupalSettings.eu_cookie_compliance.withdraw_enabled) {
            Drupal.eu_cookie_compliance.createWithdrawBanner(drupalSettings.eu_cookie_compliance.withdraw_markup);
            Drupal.eu_cookie_compliance.attachWithdrawEvents();
        }

        Drupal.eu_cookie_compliance.setStatus(value);
    };

    Drupal.eu_cookie_compliance.setStatus = function(status) {
        var date = new Date();
        var domain = drupalSettings.eu_cookie_compliance.domain ? drupalSettings.eu_cookie_compliance.domain : '';
        var path = drupalSettings.path.baseUrl;
        var cookieName = (drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed' : drupalSettings.eu_cookie_compliance.cookie_name;
        if (path.length > 1) {
            var pathEnd = path.length - 1;
            if (path.lastIndexOf('/') === pathEnd) {
                path = path.substring(0, pathEnd);
            }
        }

        var cookie_session = parseInt(drupalSettings.eu_cookie_compliance.cookie_session);
        if (cookie_session) {
            $.cookie(cookieName, status, {
                path: path,
                domain: domain
            });
        } else {
            var lifetime = parseInt(drupalSettings.eu_cookie_compliance.cookie_lifetime);
            date.setDate(date.getDate() + lifetime);
            $.cookie(cookieName, status, {
                expires: date,
                path: path,
                domain: domain
            });
        }
        $(document).trigger('eu_cookie_compliance.changeStatus', [status]);

        // Store consent if applicable.
        if (drupalSettings.eu_cookie_compliance.store_consent && ((status === 1 && drupalSettings.eu_cookie_compliance.popup_agreed_enabled) || (status === 2 && !drupalSettings.eu_cookie_compliance.popup_agreed_enabled))) {
            var url = drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + 'eu-cookie-compliance/store_consent/banner';
            $.post(url, {}, function(data) {});
        }
    };

    Drupal.eu_cookie_compliance.hasAgreed = function() {
        var status = Drupal.eu_cookie_compliance.getCurrentStatus();
        return (status === 1 || status === 2);
    };

    Drupal.eu_cookie_compliance.showBanner = function() {
        var showBanner = false;
        var status = Drupal.eu_cookie_compliance.getCurrentStatus();
        if ((status === 0 && drupalSettings.eu_cookie_compliance.method === 'default') || status === null) {
            if (!drupalSettings.eu_cookie_compliance.disagree_do_not_show_popup || status === null) {
                showBanner = true;
            }
        } else if (status === 1 && drupalSettings.eu_cookie_compliance.popup_agreed_enabled) {
            showBanner = true;
        }

        return showBanner;
    };

    Drupal.eu_cookie_compliance.cookiesEnabled = function() {
        var cookieEnabled = (navigator.cookieEnabled);
        if (typeof navigator.cookieEnabled === 'undefined' && !cookieEnabled) {
            $.cookie('testcookie', 'testcookie', {
                expires: 100
            });
            cookieEnabled = ($.cookie('testcookie').indexOf('testcookie') !== -1);
        }

        return (cookieEnabled);
    };

    // Load blocked scripts if the user has agreed to being tracked.
    var euCookieComplianceHasLoadedScripts = false;
    $(function() {
        if (Drupal.eu_cookie_compliance.hasAgreed() ||
            (Drupal.eu_cookie_compliance.getCurrentStatus() === null && drupalSettings.eu_cookie_compliance.method !== 'opt_in')
        ) {
            euCookieComplianceLoadScripts();
            euCookieComplianceHasLoadedScripts = true;
        }
    });

    // Block cookies when the user hasn't agreed.
    if ((drupalSettings.eu_cookie_compliance.method === 'opt_in' && (Drupal.eu_cookie_compliance.getCurrentStatus() === null || !Drupal.eu_cookie_compliance.hasAgreed())) ||
        (drupalSettings.eu_cookie_compliance.method === 'opt_out' && !Drupal.eu_cookie_compliance.hasAgreed() && Drupal.eu_cookie_compliance.getCurrentStatus() !== null)
    ) {
        // Split the white-listed cookies.
        var euCookieComplianceWhitelist = drupalSettings.eu_cookie_compliance.whitelisted_cookies.split(/\r\n|\n|\r/g);

        // Add the EU Cookie Compliance cookie.
        euCookieComplianceWhitelist.push((typeof drupalSettings.eu_cookie_compliance.cookie_name === 'undefined' || drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed' : drupalSettings.eu_cookie_compliance.cookie_name);
        euCookieComplianceBlockCookies = setInterval(function() {
            // Load all cookies from jQuery.
            var cookies = $.cookie();

            // Check each cookie and try to remove it if it's not white-listed.
            for (var i in cookies) {
                var remove = true;
                var hostname = window.location.hostname;
                var cookieRemoved = false;
                var index = 0;

                // Skip the PHP session cookie.
                if (i.indexOf('SESS') === 0 || i.indexOf('SSESS') === 0) {
                    remove = false;
                }

                // Check if the cookie is white-listed.
                for (var item in euCookieComplianceWhitelist) {
                    if (i === euCookieComplianceWhitelist[item]) {
                        remove = false;
                    }
                }

                // Remove the cookie if it's not white-listed.
                if (remove) {
                    while (!cookieRemoved && hostname !== '') {
                        // Attempt to remove.
                        cookieRemoved = $.removeCookie(i, {
                            domain: '.' + hostname,
                            path: '/'
                        });
                        if (!cookieRemoved) {
                            cookieRemoved = $.removeCookie(i, {
                                domain: hostname,
                                path: '/'
                            });
                        }

                        index = hostname.indexOf('.');

                        // We can be on a sub-domain, so keep checking the main domain as well.
                        hostname = (index === -1) ? '' : hostname.substring(index + 1);
                    }
                }
            }
        }, 5000);
    }

})(jQuery, Drupal, drupalSettings);;
/**
 * @file
 * Bootstrap Popovers.
 */

var Drupal = Drupal || {};

(function($, Drupal, Bootstrap) {
    "use strict";

    var $document = $(document);

    /**
     * Extend the Bootstrap Popover plugin constructor class.
     */
    Bootstrap.extendPlugin('popover', function(settings) {
        return {
            DEFAULTS: {
                animation: !!settings.popover_animation,
                autoClose: !!settings.popover_auto_close,
                enabled: settings.popover_enabled,
                html: !!settings.popover_html,
                placement: settings.popover_placement,
                selector: settings.popover_selector,
                trigger: settings.popover_trigger,
                title: settings.popover_title,
                content: settings.popover_content,
                delay: parseInt(settings.popover_delay, 10),
                container: settings.popover_container
            }
        };
    });

    /**
     * Bootstrap Popovers.
     *
     * @todo This should really be properly delegated if selector option is set.
     */
    Drupal.behaviors.bootstrapPopovers = {
        $activePopover: null,
        attach: function(context) {
            // Immediately return if popovers are not available.
            if (!$.fn.popover || !$.fn.popover.Constructor.DEFAULTS.enabled) {
                return;
            }

            var _this = this;

            $document
                .on('show.bs.popover', '[data-toggle=popover]', function() {
                    var $trigger = $(this);
                    var popover = $trigger.data('bs.popover');

                    // Only keep track of clicked triggers that we're manually handling.
                    if (popover.options.originalTrigger === 'click') {
                        if (_this.$activePopover && _this.getOption('autoClose') && !_this.$activePopover.is($trigger)) {
                            _this.$activePopover.popover('hide');
                        }
                        _this.$activePopover = $trigger;
                    }
                })
                // Unfortunately, :focusable is only made available when using jQuery
                // UI. While this would be the most semantic pseudo selector to use
                // here, jQuery UI may not always be loaded. Instead, just use :visible
                // here as this just needs some sort of selector here. This activates
                // delegate binding to elements in jQuery so it can work it's bubbling
                // focus magic since elements don't really propagate their focus events.
                // @see https://www.drupal.org/project/bootstrap/issues/3013236
                .on('focus.bs.popover', ':visible', function(e) {
                    var $target = $(e.target);
                    if (_this.$activePopover && _this.getOption('autoClose') && !_this.$activePopover.is($target) && !$target.closest('.popover.in')[0]) {
                        _this.$activePopover.popover('hide');
                        _this.$activePopover = null;
                    }
                })
                .on('click.bs.popover', function(e) {
                    var $target = $(e.target);
                    if (_this.$activePopover && _this.getOption('autoClose') && !$target.is('[data-toggle=popover]') && !$target.closest('.popover.in')[0]) {
                        _this.$activePopover.popover('hide');
                        _this.$activePopover = null;
                    }
                })
                .on('keyup.bs.popover', function(e) {
                    if (_this.$activePopover && _this.getOption('autoClose') && e.which === 27) {
                        _this.$activePopover.popover('hide');
                        _this.$activePopover = null;
                    }
                });

            var elements = $(context).find('[data-toggle=popover]').toArray();
            for (var i = 0; i < elements.length; i++) {
                var $element = $(elements[i]);
                var options = $.extend({}, $.fn.popover.Constructor.DEFAULTS, $element.data());

                // Store the original trigger.
                options.originalTrigger = options.trigger;

                // If the trigger is "click", then we'll handle it manually here.
                if (options.trigger === 'click') {
                    options.trigger = 'manual';
                }

                // Retrieve content from a target element.
                var target = options.target || $element.is('a[href^="#"]') && $element.attr('href');
                var $target = $document.find(target).clone();
                if (!options.content && $target[0]) {
                    $target.removeClass('visually-hidden hidden').removeAttr('aria-hidden');
                    options.content = $target.wrap('<div/>').parent()[options.html ? 'html' : 'text']() || '';
                }

                // Initialize the popover.
                $element.popover(options);

                // Handle clicks manually.
                if (options.originalTrigger === 'click') {
                    // To ensure the element is bound multiple times, remove any
                    // previously set event handler before adding another one.
                    $element
                        .off('click.drupal.bootstrap.popover')
                        .on('click.drupal.bootstrap.popover', function(e) {
                            $(this).popover('toggle');
                            e.preventDefault();
                            e.stopPropagation();
                        });
                }
            }
        },
        detach: function(context) {
            // Immediately return if popovers are not available.
            if (!$.fn.popover || !$.fn.popover.Constructor.DEFAULTS.enabled) {
                return;
            }

            // Destroy all popovers.
            $(context).find('[data-toggle="popover"]')
                .off('click.drupal.bootstrap.popover')
                .popover('destroy');
        },
        getOption: function(name, defaultValue, element) {
            var $element = element ? $(element) : this.$activePopover;
            var options = $.extend(true, {}, $.fn.popover.Constructor.DEFAULTS, ($element && $element.data('bs.popover') || {}).options);
            if (options[name] !== void 0) {
                return options[name];
            }
            return defaultValue !== void 0 ? defaultValue : void 0;
        }
    };

})(window.jQuery, window.Drupal, window.Drupal.bootstrap);;
/**
 * @file
 * Bootstrap Tooltips.
 */

var Drupal = Drupal || {};

(function($, Drupal, Bootstrap) {
    "use strict";

    /**
     * Extend the Bootstrap Tooltip plugin constructor class.
     */
    Bootstrap.extendPlugin('tooltip', function(settings) {
        return {
            DEFAULTS: {
                animation: !!settings.tooltip_animation,
                enabled: settings.tooltip_enabled,
                html: !!settings.tooltip_html,
                placement: settings.tooltip_placement,
                selector: settings.tooltip_selector,
                trigger: settings.tooltip_trigger,
                delay: parseInt(settings.tooltip_delay, 10),
                container: settings.tooltip_container
            }
        };
    });

    /**
     * Bootstrap Tooltips.
     *
     * @todo This should really be properly delegated if selector option is set.
     */
    Drupal.behaviors.bootstrapTooltips = {
        attach: function(context) {
            // Immediately return if tooltips are not available.
            if (!$.fn.tooltip || !$.fn.tooltip.Constructor.DEFAULTS.enabled) {
                return;
            }

            var elements = $(context).find('[data-toggle="tooltip"]').toArray();
            for (var i = 0; i < elements.length; i++) {
                var $element = $(elements[i]);
                var options = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, $element.data());
                $element.tooltip(options);
            }
        },
        detach: function(context) {
            // Immediately return if tooltips are not available.
            if (!$.fn.tooltip || !$.fn.tooltip.Constructor.DEFAULTS.enabled) {
                return;
            }

            // Destroy all tooltips.
            $(context).find('[data-toggle="tooltip"]').tooltip('destroy');
        }
    };

})(window.jQuery, window.Drupal, window.Drupal.bootstrap);;
/**
 * @file
 * The Born Group module.
 *
 *
 * @category JS
 * @author Born Support <support@borngroup.com>
 * @copyright 2018 Copyright BORN Commerce Pvt Ltd, https://www.borngroup.com/
 * @license https://www.borngroup.com/ Private
 * @link http://digi.com.my/
 */

(function($, Drupal, drupalSettings) {
    "use strict";
    Drupal.behaviors.supportBehavior = {
        attach: function(context, settings) {
            var $supportHelpcenter = $(".support-helpcenter-wrapper"),
                $hierarchicalTaxonomyMenu = $supportHelpcenter.find(".hierarchical-taxonomy-menu"),
                innerWidth,
                $subCategoryBlock = $(".support-category-menu"),
                $mainContainer = $(".main-container"),
                $contentWrapper = $mainContainer.find(".content-wrapper"),
                $annoucementDetailHighlighted = $contentWrapper.find("section.col-md-9 .highlighted"),
                pathName, $tncActiveItem, $level3Items, $level2Items;

            function checkWidth() {
                return window.innerWidth;
            }
            innerWidth = checkWidth();
            if (innerWidth < 769) {
                setTimeout(function() {
                    $hierarchicalTaxonomyMenu.find("ul.menu").hide();
                });
            }
            $.each($hierarchicalTaxonomyMenu.find("> li"), function(i, li) {
                if ($(li).find("ul.menu li.menu-item").length > 3) {
                    $(li).find("ul.menu").find(".view-more").remove();
                    var $linkChildrens = $(this).find(".block-taxonomymenu__link");
                    var hrefRef = $($linkChildrens[1]).attr("href");
                    var $firstChild = $(this).children()[0];
                    $($firstChild).attr("href", hrefRef);
                    $(li).find("ul.menu").append("<li class='view-more'><a class='text-link' href='" + hrefRef + "'>View More </a></li>");
                }
            });
            if (innerWidth < 769) {
                $hierarchicalTaxonomyMenu.find(" > li.menu-item > a").once().on("click", function(e) {
                    e.preventDefault();
                    $hierarchicalTaxonomyMenu.find(" > li.menu-item").not(this.parentElement).find("ul.menu").slideUp();
                    $hierarchicalTaxonomyMenu.find(" > li.menu-item").not(this.parentElement).find("> a").removeClass("expanded");
                    $(this).parent().find("ul.menu").slideToggle();
                    $(this).toggleClass("expanded");
                });
            }
            var selectedtext = $subCategoryBlock.find(".support-type-list li.text-bold").text();
            $subCategoryBlock.find(".toggle-dropdown").remove();
            $subCategoryBlock.prepend("<div class='toggle-dropdown'>" + selectedtext + "</div>");
            $subCategoryBlock.find(".toggle-dropdown").off("click").on("click", function() {
                $(this).parents(".support-category-menu").find(".support-type-list").toggleClass("active");
            });
            $subCategoryBlock.find(".support-type-list li").once().on("click", function() {
                $(this).parents(".support-type-list").toggleClass("active");
                $(this).parents(".support-category-menu").find("toggle-dropdown").text($(this).text());
            });

            //announcement page starts
            if ($("body").hasClass("page-node-type-announcement")) {

                if (typeof(window.isAnnoucementLeftNavOpen) === "undefined") {
                    window['isAnnoucementLeftNavOpen'] = "open";
                    if (window.innerWidth < 768) {
                        $mainContainer.addClass("announcement-detail-mobile-page");
                        if ($annoucementDetailHighlighted.find(".all-announcements-wrapper").length === 0) {
                            $annoucementDetailHighlighted.append("<h2>Announcements</h2><div class='all-announcements-wrapper'><span class='all-announcements-text'> All announcements</span><span class='all-announcements-arrow'></span></div>");
                        }
                    }

                    $(window).resize(function() {
                        if (window.innerWidth > 768) {
                            $annoucementDetailHighlighted.remove();
                        }
                    });

                    $contentWrapper.find(".all-announcements-wrapper").click(function() {
                        $mainContainer.removeClass("announcement-detail-mobile-page");
                    });
                }
            }

            if ($("body").hasClass("page-our-network")) {

                if (innerWidth < 769) {
                    $(".info-blocks-section .view-our-network .view-content").slick({
                        dots: false,
                        arrows: false,
                        slidesToShow: 2,
                        infinite: true,
                        slidesToScroll: 1,
                        centerMode: false,
                        focusOnSelect: false,
                        speed: 1000,
                        variableWidth: true,
                        cssEase: "ease-in-out"
                    });
                }

                $(window).resize(function() {
                    if (innerWidth < 769) {
                        $(".info-blocks-section .view-our-network .view-content").slick({
                            dots: false,
                            arrows: false,
                            slidesToShow: 2,
                            infinite: true,
                            slidesToScroll: 1,
                            centerMode: false,
                            focusOnSelect: false,
                            speed: 1000,
                            variableWidth: true,
                            cssEase: "ease-in-out"
                        });
                    } else {
                        $(".info-blocks-section .view-our-network .view-content").slick('unslick');
                    }
                });

            }

            if ($("body").hasClass("page-node-type-terms-and-conditions")) {

                pathName = window.location.pathname;

                $("body").find('a[href="' + pathName + '"]').addClass("tnc-active-accordian-menu");

                $(document).on("click", ".level-2-item-expanded", function() {
                    $(this).addClass("level-2-item-collapsed");
                    $(this).removeClass("level-2-item-expanded");
                    $(this).next("ul").slideUp();
                });

                $(document).on("click", ".level-2-item-collapsed", function() {
                    $(this).addClass("level-2-item-expanded");
                    $(this).removeClass("level-2-item-collapsed");
                    $(this).next("ul").slideDown();
                });

                $(document).on("click", ".level-3-item-expanded", function() {
                    $(this).addClass("level-3-item-collapsed");
                    $(this).removeClass("level-3-item-expanded");
                    $(this).next("ul").slideUp();
                });

                $(document).on("click", ".level-3-item-collapsed", function() {
                    $(this).addClass("level-3-item-expanded");
                    $(this).removeClass("level-3-item-collapsed");
                    $(this).next("ul").slideDown();
                });

                $tncActiveItem = $("body").find(".tnc-active-accordian-menu");
                $tncActiveItem.closest("ul").addClass("tnc-active-ul");
                $level3Items = $tncActiveItem.parents(".level-3-item").siblings().find(".level-3-item-expanded");
                if ($level3Items.length > 1) {
                    $level3Items.trigger("click");
                }
                $level2Items = $level3Items.parents(".level-2-item").siblings().find(".level-2-item-expanded");
                if ($level2Items.length > 1) {
                    $level2Items.trigger("click");
                } else {
                    $level2Items = $tncActiveItem.parents(".level-2-item").siblings().find(".level-2-item-expanded");
                    $level2Items.trigger("click");
                }
            }
            if ($("body").hasClass("path-taxonomy")) {
                pathName = window.location.pathname;
                $("body").find('a[href="' + pathName + '"]').addClass("active-menu");
                setTimeout(function() {
                    $(".active-menu").parents("ul").siblings("a").addClass("active-menu");
                    $(".active-menu").parents("ul").slideDown().siblings(".parent-toggle").removeClass("arrow-right").addClass("arrow-down");
                }, 200);


                $(".view-support-detail .form-group > div:first-child .views-field-title").addClass("active");
                if ($("body").hasClass("page-activating-your-new-sim")) {
                    $(".view-support-detail .form-group > div:first-child .views-field-title").removeClass("active");
                    $(".views-field-body").hide();

                }

                $(".view-support-detail .form-group > div .views-field-title").once().on("click", function() {
                    $(this).toggleClass("active").next(".views-field-body").slideToggle();
                });
                $(".block-taxonomymenu__menu-item--expanded").each(function() {
                    var $anchorTag = $(this).find('a').first();
                    var $firstAnchorChild = $(this).find('ul').first().find("li").first().find("a");
                    $anchorTag.prop("href", $firstAnchorChild.prop("href"));
                });
            }
            if ($("body").once().hasClass("path-taxonomy")) {
                if (window.location.href.indexOf("#") !== -1) {
                    var hasTag = window.location.href.split("#");
                    var popularItem = hasTag[1].split("-").join(" ");
                    var titleItem = popularItem.substring(0, popularItem.length - 10); // handling "TM" is available or not in Title
                    $(".views-field-title").removeClass("active");
                    $(".views-field-body").hide();
                    $(".views-field-title").each(function() {
                        var titleText;
                        if ($(this).text().slice(-2) == "™?") { // checking "TM" is available or not in Title
                            titleText = $(this).text().substring(0, $(this).text().length - 2);
                        } else {
                            titleText = $(this).text();
                            titleItem = popularItem;
                        }
                        if (titleText == titleItem) {
                            $(this).addClass("active");
                            $(this).next(".views-field-body").slideToggle();
                        }
                    });
                }
                if (window.innerWidth < 769) { // mobile view need to scroll the content to the top
                    function checkWindowLoad() {
                        var scrollTopContent = $(".views-element-container").offset().top - 100;
                        window.scrollTo(0, scrollTopContent);
                    }
                    setTimeout(checkWindowLoad, 1500); // function should call after page load
                }
            }
            //Announcement changes
            $.each($(".page-node-type-announcement .item-list li .announcement-list"), function() {
                if ($(this).attr("data-url") === window.location.pathname) {
                    $(this).parents("li").addClass("active-link");
                }
            });
            $(document).once().on("click", ".announcement-list", function() {
                $('html, body').animate({
                    scrollTop: $(".page-node-type-announcement").offset().top
                }, 500);
                $(this).parents(".view-content").find(".item-list li").removeClass("active-link");
                $(this).parents("li").addClass("active-link");
                if (window.innerWidth < 768) {
                    $mainContainer.addClass("announcement-detail-mobile-page");
                }
                var announcementId = $(this).data("announcementid");
                $.ajax({
                    url: "/rest/export/announcement_data?id=" + announcementId,
                    success: function(result) {
                        var description, title, pageurl;
                        result.forEach(function(item) {
                            title = item.title
                            description = item.field_description;
                            pageurl = item.view_node;
                        });
                        history.pushState({
                            title: title,
                            desc: description,
                        }, title, pageurl);
                        document.title = title;
                        $('.page-node-type-announcement .page-header').html(title);
                        $('.page-node-type-announcement .field--name-field-description').html(description);
                    }
                });
            });
            window.onpopstate = function(event) {
                if (history.state) {
                    document.title = history.state.title;
                    $('.page-node-type-announcement .page-header').html(history.state.title);
                    $('.page-node-type-announcement .field--name-field-description').html(history.state.desc);
                }
            };
        }
    };
})(jQuery, Drupal, drupalSettings);;
Drupal.TBMegaMenu = Drupal.TBMegaMenu || {};

(function($, Drupal, drupalSettings) {
    "use strict";

    Drupal.TBMegaMenu.oldWindowWidth = 0;
    Drupal.TBMegaMenu.displayedMenuMobile = false;
    Drupal.TBMegaMenu.supportedScreens = [980];
    Drupal.TBMegaMenu.menuResponsive = function() {
        var windowWidth = window.innerWidth ? window.innerWidth : $(window).width();
        var navCollapse = $('.tb-megamenu').children('.nav-collapse');
        if (windowWidth < Drupal.TBMegaMenu.supportedScreens[0]) {
            navCollapse.addClass('collapse');
            if (Drupal.TBMegaMenu.displayedMenuMobile) {
                navCollapse.css({
                    height: 'auto',
                    overflow: 'visible'
                });
            } else {
                navCollapse.css({
                    height: 0,
                    overflow: 'hidden'
                });
            }
        } else {
            // If width of window is greater than 980 (supported screen).
            navCollapse.removeClass('collapse');
            if (navCollapse.height() <= 0) {
                navCollapse.css({
                    height: 'auto',
                    overflow: 'visible'
                });
            }
        }
    };

    Drupal.behaviors.tbMegaMenuAction = {
        attach: function(context, settings) {
            var button = $(context).find('.tb-megamenu-button').once('tb-megamenu-action');
            $(button).click(function() {
                if (parseInt($(this).parent().children('.nav-collapse').height())) {
                    $(this).parent().children('.nav-collapse').css({
                        height: 0,
                        overflow: 'hidden'
                    });
                    Drupal.TBMegaMenu.displayedMenuMobile = false;
                } else {
                    $(this).parent().children('.nav-collapse').css({
                        height: 'auto',
                        overflow: 'visible'
                    });
                    Drupal.TBMegaMenu.displayedMenuMobile = true;
                }
            });


            var isTouch = 'ontouchstart' in window && !(/hp-tablet/gi).test(navigator.appVersion);
            if (!isTouch) {
                $(document).ready(function($) {
                    var mm_duration = 0;
                    $('.tb-megamenu').each(function() {
                        if ($(this).data('duration')) {
                            mm_duration = $(this).data('duration');
                        }
                    });
                    var mm_timeout = mm_duration ? 100 + mm_duration : 500;
                    $('.nav > li, li.mega').hover(function(event) {
                            var $this = $(this);
                            if ($this.hasClass('mega')) {
                                $this.addClass('animating');
                                clearTimeout($this.data('animatingTimeout'));
                                $this.data('animatingTimeout', setTimeout(function() {
                                    $this.removeClass('animating');
                                }, mm_timeout));
                            }
                            clearTimeout($this.data('hoverTimeout'));
                            $this.data('hoverTimeout', setTimeout(function() {
                                $this.addClass('open');
                            }, 100));
                        },
                        function(event) {
                            var $this = $(this);
                            if ($this.hasClass('mega')) {
                                $this.addClass('animating');
                                clearTimeout($this.data('animatingTimeout'));
                                $this.data('animatingTimeout', setTimeout(function() {
                                    $this.removeClass('animating');
                                }, mm_timeout));
                            }
                            clearTimeout($this.data('hoverTimeout'));
                            $this.data('hoverTimeout', setTimeout(function() {
                                $this.removeClass('open');
                            }, 100));
                        });
                });
            }

            $(window).resize(function() {
                var windowWidth = window.innerWidth ? window.innerWidth : $(window).width();
                if (windowWidth != Drupal.TBMegaMenu.oldWindowWidth) {
                    Drupal.TBMegaMenu.oldWindowWidth = windowWidth;
                    Drupal.TBMegaMenu.menuResponsive();
                }
            });
        }
    };
})(jQuery, Drupal, drupalSettings);

;
Drupal.TBMegaMenu = Drupal.TBMegaMenu || {};

(function($, Drupal, drupalSettings) {
    "use strict";

    Drupal.TBMegaMenu.createTouchMenu = function(items) {
        items.children('a').each(function() {
            var $item = $(this);
            var tbitem = $(this).parent();
            $item.click(function(event) {
                if ($item.hasClass('tb-megamenu-clicked')) {
                    var $uri = $item.attr('href');
                    window.location.href = $uri;
                } else {
                    event.preventDefault();
                    $item.addClass('tb-megamenu-clicked');
                    if (!tbitem.hasClass('open')) {
                        tbitem.addClass('open');
                    }
                }
            }).closest('li').mouseleave(function() {
                $item.removeClass('tb-megamenu-clicked');
                tbitem.removeClass('open');
            });
        });
        /*
     items.children('a').children('span.caret').each( function() {
	var $item = $(this).parent();
        $item.click(function(event){
          tbitem = $item.parent();
          if ($item.hasClass('tb-megamenu-clicked')) {
            Drupal.TBMegaMenu.eventStopPropagation(event);
            if(tbitem.hasClass('open')){	
              tbitem.removeClass('open');
              $item.removeClass('tb-megamenu-clicked');
            }
          }
          else {
            Drupal.TBMegaMenu.eventStopPropagation(event);
            $item.addClass('tb-megamenu-clicked');
            if(!tbitem.hasClass('open')){	
              tbitem.addClass('open');
              $item.removeClass('tb-megamenu-clicked');
            }
          }
        });
     });
     */
    };

    Drupal.TBMegaMenu.eventStopPropagation = function(event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        } else if (window.event) {
            window.event.cancelBubble = true;
        }
    };

    Drupal.behaviors.tbMegaMenuTouchAction = {
        attach: function(context) {
            var isTouch = 'ontouchstart' in window && !(/hp-tablet/gi).test(navigator.appVersion);
            if (isTouch) {
                $('html').addClass('touch');
                Drupal.TBMegaMenu.createTouchMenu($('.tb-megamenu ul.nav li.mega').has('.dropdown-menu'));
            }
        }
    };
})(jQuery, Drupal, drupalSettings);;
/**
 * @file
 * The Born Group module.
 *
 *
 * @category JS
 * @custom
 * @author Born Support <support@borngroup.com>
 * @copyright 2018 Copyright BORN Commerce Pvt Ltd, https://www.borngroup.com/
 * @license https://www.borngroup.com/ Private
 * @link http://digi.com.my/
 */
(function(global, factory) {
    "use strict";
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], function($) {
            return factory($, global, global.document);
        });
    } else if (typeof module === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = factory(require('jquery'), global, global.document);
    } else {
        // Browser globals
        factory(jQuery, global, global.document);
    }
}(typeof window !== 'undefined' ? window : this, function($, window, document, undefined) {
    "use strict";
    var heights = [],
        names = [],
        elements = [],
        overflow = [],
        index = 0,
        currentIndex = 0,
        interstitialIndex = 1,
        hasLocation = false,
        timeoutId,
        timeoutId2,
        $window = $(window),
        portHeight,
        top = $window.scrollTop(),
        scrollable = false,
        locked = false,
        scrolled = false,
        manualScroll,
        swipeScroll,
        util,
        disabled = false,
        scrollSamples = [],
        scrollTime = new Date().getTime(),
        firstLoad = true,
        initialised = false,
        destination = 0,
        wheelEvent = 'onwheel' in document ? 'wheel' : document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll',
        settings = {
            //section should be an identifier that is the same for each section
            section: ".section",
            sectionName: "section-name",
            interstitialSection: "",
            easing: "easeOutExpo",
            scrollSpeed: 1100,
            offset: 0,
            scrollbars: true,
            target: "html,body",
            standardScrollElements: false,
            setHeights: true,
            overflowScroll: true,
            updateHash: true,
            touchScroll: true,
            before: function() {},
            after: function() {},
            afterResize: function() {},
            afterRender: function() {}
        };

    function getportHeight() {
        return ($window.height() + settings.offset);
    }

    function animateScroll(index, instant, callbacks, toTop) {
        if (currentIndex === index) {
            callbacks = false;
        }
        if (disabled === true) {
            return true;
        }
        if (names[index]) {
            scrollable = false;
            if (firstLoad === true) {
                settings.afterRender();
                firstLoad = false;
            }
            if (callbacks) {
                if (typeof settings.before == 'function' && settings.before(index, elements) === false) {
                    return true;
                }
            }
            interstitialIndex = 1;
            destination = heights[index];
            if (firstLoad === false && currentIndex > index && toTop === false) {
                //We're going backwards
                if (overflow[index]) {
                    portHeight = getportHeight();

                    interstitialIndex = parseInt(elements[index].outerHeight() / portHeight);

                    destination = parseInt(heights[index]) + (elements[index].outerHeight() - portHeight);
                }
            }


            if (settings.updateHash && settings.sectionName && !(firstLoad === true && index === 0)) {
                if (history.pushState) {
                    try {
                        history.replaceState(null, null, names[index]);
                    } catch (e) {
                        if (window.console) {
                            console.warn("Scrollify warning: Page must be hosted to manipulate the hash value.");
                        }
                    }

                } else {
                    window.location.hash = names[index];
                }
            }

            currentIndex = index;
            if (instant) {
                $(settings.target).stop().scrollTop(destination);
                if (callbacks) {
                    settings.after(index, elements);
                }
            } else {
                locked = true;
                if ($().velocity) {
                    $(settings.target).stop().velocity('scroll', {
                        duration: settings.scrollSpeed,
                        easing: settings.easing,
                        offset: destination,
                        mobileHA: false
                    });
                } else {
                    $(settings.target).stop().animate({
                        scrollTop: destination
                    }, settings.scrollSpeed, settings.easing);
                }

                if (window.location.hash.length && settings.sectionName && window.console) {
                    try {
                        if ($(window.location.hash).length) {
                            console.warn("Scrollify warning: ID matches hash value - this will cause the page to anchor.");
                        }
                    } catch (e) {}
                }
                $(settings.target).promise().done(function() {
                    locked = false;
                    firstLoad = false;
                    if (callbacks) {
                        settings.after(index, elements);
                    }
                });
            }

        }
    }

    function isAccelerating(samples) {
        function average(num) {
            var sum = 0;

            var lastElements = samples.slice(Math.max(samples.length - num, 1));

            for (var i = 0; i < lastElements.length; i++) {
                sum += lastElements[i];
            }

            return Math.ceil(sum / num);
        }

        var avEnd = average(10);
        var avMiddle = average(70);

        if (avEnd >= avMiddle) {
            return true;
        } else {
            return false;
        }
    }
    var scrollify = function(options) {
        initialised = true;
        $.easing['easeOutExpo'] = function(x, t, b, c, d) {
            return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        };

        manualScroll = {
            handleMousedown: function() {
                if (disabled === true) {
                    return true;
                }
                scrollable = false;
                scrolled = false;
            },
            handleMouseup: function() {
                if (disabled === true) {
                    return true;
                }
                scrollable = true;
                if (scrolled) {
                    //instant,callbacks
                    manualScroll.calculateNearest(false, true);
                }
            },
            handleScroll: function() {
                if (disabled === true) {
                    return true;
                }
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }

                timeoutId = setTimeout(function() {
                    scrolled = true;
                    if (scrollable === false) {
                        return false;
                    }
                    scrollable = false;
                    //instant,callbacks
                    manualScroll.calculateNearest(false, true);
                }, 200);
            },
            calculateNearest: function(instant, callbacks) {
                top = $window.scrollTop();
                var i = 1,
                    max = heights.length,
                    closest = 0,
                    prev = Math.abs(heights[0] - top),
                    diff;
                for (; i < max; i++) {
                    diff = Math.abs(heights[i] - top);

                    if (diff < prev) {
                        prev = diff;
                        closest = i;
                    }
                }
                if ((atBottom() && closest > index) || atTop()) {
                    index = closest;
                    //index, instant, callbacks, toTop
                    animateScroll(closest, instant, callbacks, false);
                }
            },
            wheelHandler: function(e) {
                if (disabled === true) {
                    return true;
                } else if (settings.standardScrollElements) {
                    if ($(e.target).is(settings.standardScrollElements) || $(e.target).closest(settings.standardScrollElements).length) {
                        return true;
                    }
                }
                if (!overflow[index]) {
                    e.preventDefault();
                }
                var currentScrollTime = new Date().getTime();


                e = e || window.event;
                var value = e.originalEvent.wheelDelta || -e.originalEvent.deltaY || -e.originalEvent.detail;
                var delta = Math.max(-1, Math.min(1, value));

                //delta = delta || -e.originalEvent.detail / 3 || e.originalEvent.wheelDelta / 120;

                if (scrollSamples.length > 149) {
                    scrollSamples.shift();
                }
                //scrollSamples.push(Math.abs(delta*10));
                scrollSamples.push(Math.abs(value));

                if ((currentScrollTime - scrollTime) > 200) {
                    scrollSamples = [];
                }
                scrollTime = currentScrollTime;


                if (locked) {
                    return false;
                }
                if (delta < 0) {
                    if (index < heights.length - 1) {
                        if (atBottom()) {
                            if (isAccelerating(scrollSamples)) {
                                e.preventDefault();
                                index++;
                                locked = true;
                                //index, instant, callbacks, toTop
                                animateScroll(index, false, true, false);
                            } else {
                                return false;
                            }
                        }
                    }
                } else if (delta > 0) {
                    if (index > 0) {
                        if (atTop()) {
                            if (isAccelerating(scrollSamples)) {
                                e.preventDefault();
                                index--;
                                locked = true;
                                //index, instant, callbacks, toTop
                                animateScroll(index, false, true, false);
                            } else {
                                return false
                            }
                        }
                    }
                }

            },
            keyHandler: function(e) {
                if (disabled === true || document.activeElement.readOnly === false) {
                    return true;
                }
                if (locked === true) {
                    return false;
                }
                if (e.keyCode == 38 || e.keyCode == 33) {
                    if (index > 0) {
                        if (atTop()) {
                            e.preventDefault();
                            index--;
                            //index, instant, callbacks, toTop
                            animateScroll(index, false, true, false);
                        }
                    }
                } else if (e.keyCode == 40 || e.keyCode == 34) {
                    if (index < heights.length - 1) {
                        if (atBottom()) {
                            e.preventDefault();
                            index++;
                            //index, instant, callbacks, toTop
                            animateScroll(index, false, true, false);
                        }
                    }
                }
            },
            init: function() {
                if (settings.scrollbars) {
                    $window.on('mousedown', manualScroll.handleMousedown);
                    $window.on('mouseup', manualScroll.handleMouseup);
                    $window.on('scroll', manualScroll.handleScroll);
                } else {
                    $("body").css({
                        "overflow": "hidden"
                    });
                }
                $window.on(wheelEvent, manualScroll.wheelHandler);
                //$(document).bind(wheelEvent,manualScroll.wheelHandler);
                $window.on('keydown', manualScroll.keyHandler);
            }
        };

        swipeScroll = {
            touches: {
                "touchstart": {
                    "y": -1,
                    "x": -1
                },
                "touchmove": {
                    "y": -1,
                    "x": -1
                },
                "touchend": false,
                "direction": "undetermined"
            },
            options: {
                "distance": 30,
                "timeGap": 800,
                "timeStamp": new Date().getTime()
            },
            touchHandler: function(event) {
                if (disabled === true) {
                    return true;
                } else if (settings.standardScrollElements) {
                    if ($(event.target).is(settings.standardScrollElements) || $(event.target).closest(settings.standardScrollElements).length) {
                        return true;
                    }
                }
                var touch;
                if (typeof event !== 'undefined') {
                    if (typeof event.touches !== 'undefined') {
                        touch = event.touches[0];
                        switch (event.type) {
                            case 'touchstart':
                                swipeScroll.touches.touchstart.y = touch.pageY;
                                swipeScroll.touches.touchmove.y = -1;

                                swipeScroll.touches.touchstart.x = touch.pageX;
                                swipeScroll.touches.touchmove.x = -1;

                                swipeScroll.options.timeStamp = new Date().getTime();
                                swipeScroll.touches.touchend = false;
                            case 'touchmove':
                                swipeScroll.touches.touchmove.y = touch.pageY;
                                swipeScroll.touches.touchmove.x = touch.pageX;
                                if (swipeScroll.touches.touchstart.y !== swipeScroll.touches.touchmove.y && (Math.abs(swipeScroll.touches.touchstart.y - swipeScroll.touches.touchmove.y) > Math.abs(swipeScroll.touches.touchstart.x - swipeScroll.touches.touchmove.x))) {
                                    //if(!overflow[index]) {
                                    event.preventDefault();
                                    //}
                                    swipeScroll.touches.direction = "y";
                                    if ((swipeScroll.options.timeStamp + swipeScroll.options.timeGap) < (new Date().getTime()) && swipeScroll.touches.touchend == false) {

                                        swipeScroll.touches.touchend = true;
                                        if (swipeScroll.touches.touchstart.y > -1) {

                                            if (Math.abs(swipeScroll.touches.touchmove.y - swipeScroll.touches.touchstart.y) > swipeScroll.options.distance) {
                                                if (swipeScroll.touches.touchstart.y < swipeScroll.touches.touchmove.y) {

                                                    swipeScroll.up();

                                                } else {
                                                    swipeScroll.down();

                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 'touchend':
                                if (swipeScroll.touches[event.type] === false) {
                                    swipeScroll.touches[event.type] = true;
                                    if (swipeScroll.touches.touchstart.y > -1 && swipeScroll.touches.touchmove.y > -1 && swipeScroll.touches.direction === "y") {

                                        if (Math.abs(swipeScroll.touches.touchmove.y - swipeScroll.touches.touchstart.y) > swipeScroll.options.distance) {
                                            if (swipeScroll.touches.touchstart.y < swipeScroll.touches.touchmove.y) {
                                                swipeScroll.up();

                                            } else {
                                                swipeScroll.down();

                                            }
                                        }
                                        swipeScroll.touches.touchstart.y = -1;
                                        swipeScroll.touches.touchstart.x = -1;
                                        swipeScroll.touches.direction = "undetermined";
                                    }
                                }
                            default:
                                break;
                        }
                    }
                }
            },
            down: function() {

                if (index < heights.length) {

                    if (atBottom() && index < heights.length - 1) {

                        index++;
                        //index, instant, callbacks, toTop
                        animateScroll(index, false, true, false);
                    } else {
                        portHeight = getportHeight();
                        if (Math.floor(elements[index].height() / portHeight) > interstitialIndex) {

                            interstitialScroll(parseInt(heights[index]) + (portHeight * interstitialIndex));
                            interstitialIndex += 1;

                        } else {
                            if (elements[index].hasClass('footer-wrap')) {
                                interstitialScroll(parseInt(heights[index]));
                            } else {
                                interstitialScroll(parseInt(heights[index]) + (elements[index].outerHeight() - portHeight));
                            }
                        }

                    }
                }
            },
            up: function() {
                if (index >= 0) {
                    if (atTop() && index > 0) {

                        index--;
                        //index, instant, callbacks, toTop
                        animateScroll(index, false, true, false);
                    } else {

                        if (interstitialIndex > 2) {
                            portHeight = getportHeight();

                            interstitialIndex -= 1;
                            interstitialScroll(parseInt(heights[index]) + (portHeight * interstitialIndex));

                        } else {

                            interstitialIndex = 1;
                            interstitialScroll(parseInt(heights[index]));
                        }
                    }

                }
            },
            init: function() {
                if (document.addEventListener && settings.touchScroll) {
                    var eventListenerOptions = {
                        passive: false
                    };
                    document.addEventListener('touchstart', swipeScroll.touchHandler, eventListenerOptions);
                    document.addEventListener('touchmove', swipeScroll.touchHandler, eventListenerOptions);
                    document.addEventListener('touchend', swipeScroll.touchHandler, eventListenerOptions);
                }
            }
        };


        util = {
            refresh: function(withCallback, scroll) {
                clearTimeout(timeoutId2);
                timeoutId2 = setTimeout(function() {
                    //retain position
                    sizePanels(true);
                    //scroll, firstLoad
                    calculatePositions(scroll, false);
                    if (withCallback) {
                        settings.afterResize();
                    }
                }, 400);
            },
            handleUpdate: function() {
                //callbacks, scroll
                //changed from false,true to false,false
                util.refresh(false, false);
            },
            handleResize: function() {
                //callbacks, scroll
                util.refresh(true, false);
            },
            handleOrientation: function() {
                //callbacks, scroll
                util.refresh(true, true);
            }
        };
        settings = $.extend(settings, options);

        //retain position
        sizePanels(false);

        calculatePositions(false, true);

        if (true === hasLocation) {
            //index, instant, callbacks, toTop
            animateScroll(index, false, true, true);
        } else {
            setTimeout(function() {
                //instant,callbacks
                manualScroll.calculateNearest(true, false);
            }, 200);
        }
        if (heights.length) {
            manualScroll.init();
            swipeScroll.init();

            $window.on("resize", util.handleResize);
            if (document.addEventListener) {
                window.addEventListener("orientationchange", util.handleOrientation, false);
            }
        }

        function interstitialScroll(pos) {
            if ($().velocity) {
                $(settings.target).stop().velocity('scroll', {
                    duration: settings.scrollSpeed,
                    easing: settings.easing,
                    offset: pos,
                    mobileHA: false
                });
            } else {
                $(settings.target).stop().animate({
                    scrollTop: pos
                }, settings.scrollSpeed, settings.easing);
            }
        }

        function sizePanels(keepPosition) {
            if (keepPosition) {
                top = $window.scrollTop();
            }

            var selector = settings.section;
            overflow = [];
            if (settings.interstitialSection.length) {
                selector += "," + settings.interstitialSection;
            }
            if (settings.scrollbars === false) {
                settings.overflowScroll = false;
            }
            portHeight = getportHeight();
            $(selector).each(function(i) {
                var $this = $(this);

                if (settings.setHeights) {
                    if ($this.is(settings.interstitialSection)) {
                        overflow[i] = false;
                    } else {
                        if (($this.css("height", "auto").outerHeight() < portHeight) || $this.css("overflow") === "hidden") {
                            $this.css({
                                "height": portHeight
                            });

                            overflow[i] = false;
                        } else {

                            $this.css({
                                "height": $this.height()
                            });

                            if (settings.overflowScroll) {
                                overflow[i] = true;
                            } else {
                                overflow[i] = false;
                            }
                        }

                    }

                } else {

                    if (($this.outerHeight() < portHeight) || (settings.overflowScroll === false)) {
                        overflow[i] = false;
                    } else {
                        overflow[i] = true;
                    }
                }
            });
            if (keepPosition) {
                $window.scrollTop(top);
            }
        }

        function calculatePositions(scroll, firstLoad) {
            var selector = settings.section;
            if (settings.interstitialSection.length) {
                selector += "," + settings.interstitialSection;
            }
            heights = [];
            names = [];
            elements = [];
            $(selector).each(function(i) {
                var $this = $(this);
                if (i > 0) {
                    heights[i] = parseInt($this.offset().top) + settings.offset;
                } else {
                    heights[i] = parseInt($this.offset().top);
                }
                if (settings.sectionName && $this.data(settings.sectionName)) {
                    names[i] = "#" + $this.data(settings.sectionName).toString().replace(/ /g, "-");
                } else {
                    if ($this.is(settings.interstitialSection) === false) {
                        names[i] = "#" + (i + 1);
                    } else {
                        names[i] = "#";
                        if (i === $(selector).length - 1 && i > 1) {
                            heights[i] = heights[i - 1] + (parseInt($($(selector)[i - 1]).outerHeight()) - parseInt($(window).height())) + parseInt($this.outerHeight());
                        }
                    }
                }
                elements[i] = $this;
                try {
                    if ($(names[i]).length && window.console) {
                        console.warn("Scrollify warning: Section names can't match IDs - this will cause the browser to anchor.");
                    }
                } catch (e) {}

                if (window.location.hash === names[i]) {
                    index = i;
                    hasLocation = true;
                }

            });

            if (true === scroll) {
                //index, instant, callbacks, toTop
                animateScroll(index, false, false, false);
            }
        }

        function atTop() {
            if (!overflow[index]) {
                return true;
            }
            top = $window.scrollTop();
            if (top > parseInt(heights[index])) {
                return false;
            } else {
                return true;
            }
        }

        function atBottom() {
            if (!overflow[index]) {
                return true;
            }
            top = $window.scrollTop();
            portHeight = getportHeight();

            if (top < parseInt(heights[index]) + (elements[index].outerHeight() - portHeight) - 28) {

                return false;

            } else {
                return true;
            }
        }
    }

    function move(panel, instant) {
        var z = names.length;
        for (; z >= 0; z--) {
            if (typeof panel === 'string') {
                if (names[z] === panel) {
                    index = z;
                    //index, instant, callbacks, toTop
                    animateScroll(z, instant, true, true);
                }
            } else {
                if (z === panel) {
                    index = z;
                    //index, instant, callbacks, toTop
                    animateScroll(z, instant, true, true);
                }
            }
        }
    }
    scrollify.move = function(panel) {
        if (panel === undefined) {
            return false;
        }
        if (panel.originalEvent) {
            panel = $(this).attr("href");
        }
        move(panel, false);
    };
    scrollify.instantMove = function(panel) {
        if (panel === undefined) {
            return false;
        }
        move(panel, true);
    };
    scrollify.next = function() {
        if (index < names.length) {
            index += 1;
            //index, instant, callbacks, toTop
            animateScroll(index, false, true, true);
        }
    };
    scrollify.previous = function() {
        if (index > 0) {
            index -= 1;
            //index, instant, callbacks, toTop
            animateScroll(index, false, true, true);
        }
    };
    scrollify.instantNext = function() {
        if (index < names.length) {
            index += 1;
            //index, instant, callbacks, toTop
            animateScroll(index, true, true, true);
        }
    };
    scrollify.instantPrevious = function() {
        if (index > 0) {
            index -= 1;
            //index, instant, callbacks, toTop
            animateScroll(index, true, true, true);
        }
    };
    scrollify.destroy = function() {
        if (!initialised) {
            return false;
        }
        if (settings.setHeights) {
            $(settings.section).each(function() {
                $(this).css("height", "auto");
            });
        }
        $window.off("resize", util.handleResize);
        if (settings.scrollbars) {
            $window.off('mousedown', manualScroll.handleMousedown);
            $window.off('mouseup', manualScroll.handleMouseup);
            $window.off('scroll', manualScroll.handleScroll);
        }
        $window.off(wheelEvent, manualScroll.wheelHandler);
        $window.off('keydown', manualScroll.keyHandler);

        if (document.addEventListener && settings.touchScroll) {
            document.removeEventListener('touchstart', swipeScroll.touchHandler, false);
            document.removeEventListener('touchmove', swipeScroll.touchHandler, false);
            document.removeEventListener('touchend', swipeScroll.touchHandler, false);
        }
        heights = [];
        names = [];
        elements = [];
        overflow = [];
    };
    scrollify.update = function() {
        if (!initialised) {
            return false;
        }
        util.handleUpdate();
    };
    scrollify.current = function() {
        return elements[index];
    };
    scrollify.currentIndex = function() {
        return index;
    };
    scrollify.disable = function() {
        disabled = true;
    };
    scrollify.enable = function() {
        disabled = false;
        if (initialised) {
            //instant,callbacks
            manualScroll.calculateNearest(false, false);
        }
    };
    scrollify.isDisabled = function() {
        return disabled;
    };
    scrollify.setOptions = function(updatedOptions) {
        if (!initialised) {
            return false;
        }
        if (typeof updatedOptions === "object") {
            settings = $.extend(settings, updatedOptions);
            util.handleUpdate();
        } else if (window.console) {
            console.warn("Scrollify warning: setOptions expects an object.");
        }
    };
    $.scrollify = scrollify;
    return scrollify;
}));;
! function(i) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], i) : "undefined" != typeof exports ? module.exports = i(require("jquery")) : i(jQuery)
}(function(i) {
    "use strict";
    var e = window.Slick || {};
    (e = function() {
        var e = 0;
        return function(t, o) {
            var s, n = this;
            n.defaults = {
                accessibility: !0,
                adaptiveHeight: !1,
                appendArrows: i(t),
                appendDots: i(t),
                arrows: !0,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: !1,
                autoplaySpeed: 3e3,
                centerMode: !1,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(e, t) {
                    return i('<button type="button" />').text(t + 1)
                },
                dots: !1,
                dotsClass: "slick-dots",
                draggable: !0,
                easing: "linear",
                edgeFriction: .35,
                fade: !1,
                focusOnSelect: !1,
                focusOnChange: !1,
                infinite: !0,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: !1,
                pauseOnHover: !0,
                pauseOnFocus: !0,
                pauseOnDotsHover: !1,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: !1,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: !0,
                swipeToSlide: !1,
                touchMove: !0,
                touchThreshold: 5,
                useCSS: !0,
                useTransform: !0,
                variableWidth: !1,
                vertical: !1,
                verticalSwiping: !1,
                waitForAnimate: !0,
                zIndex: 1e3
            }, n.initials = {
                animating: !1,
                dragging: !1,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: !1,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: !1,
                slideOffset: 0,
                swipeLeft: null,
                swiping: !1,
                $list: null,
                touchObject: {},
                transformsEnabled: !1,
                unslicked: !1
            }, i.extend(n, n.initials), n.activeBreakpoint = null, n.animType = null, n.animProp = null, n.breakpoints = [], n.breakpointSettings = [], n.cssTransitions = !1, n.focussed = !1, n.interrupted = !1, n.hidden = "hidden", n.paused = !0, n.positionProp = null, n.respondTo = null, n.rowCount = 1, n.shouldClick = !0, n.$slider = i(t), n.$slidesCache = null, n.transformType = null, n.transitionType = null, n.visibilityChange = "visibilitychange", n.windowWidth = 0, n.windowTimer = null, s = i(t).data("slick") || {}, n.options = i.extend({}, n.defaults, o, s), n.currentSlide = n.options.initialSlide, n.originalSettings = n.options, void 0 !== document.mozHidden ? (n.hidden = "mozHidden", n.visibilityChange = "mozvisibilitychange") : void 0 !== document.webkitHidden && (n.hidden = "webkitHidden", n.visibilityChange = "webkitvisibilitychange"), n.autoPlay = i.proxy(n.autoPlay, n), n.autoPlayClear = i.proxy(n.autoPlayClear, n), n.autoPlayIterator = i.proxy(n.autoPlayIterator, n), n.changeSlide = i.proxy(n.changeSlide, n), n.clickHandler = i.proxy(n.clickHandler, n), n.selectHandler = i.proxy(n.selectHandler, n), n.setPosition = i.proxy(n.setPosition, n), n.swipeHandler = i.proxy(n.swipeHandler, n), n.dragHandler = i.proxy(n.dragHandler, n), n.keyHandler = i.proxy(n.keyHandler, n), n.instanceUid = e++, n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, n.registerBreakpoints(), n.init(!0)
        }
    }()).prototype.activateADA = function() {
        this.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        })
    }, e.prototype.addSlide = e.prototype.slickAdd = function(e, t, o) {
        var s = this;
        if ("boolean" == typeof t) o = t, t = null;
        else if (t < 0 || t >= s.slideCount) return !1;
        s.unload(), "number" == typeof t ? 0 === t && 0 === s.$slides.length ? i(e).appendTo(s.$slideTrack) : o ? i(e).insertBefore(s.$slides.eq(t)) : i(e).insertAfter(s.$slides.eq(t)) : !0 === o ? i(e).prependTo(s.$slideTrack) : i(e).appendTo(s.$slideTrack), s.$slides = s.$slideTrack.children(this.options.slide), s.$slideTrack.children(this.options.slide).detach(), s.$slideTrack.append(s.$slides), s.$slides.each(function(e, t) {
            i(t).attr("data-slick-index", e)
        }), s.$slidesCache = s.$slides, s.reinit()
    }, e.prototype.animateHeight = function() {
        var i = this;
        if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {
            var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
            i.$list.animate({
                height: e
            }, i.options.speed)
        }
    }, e.prototype.animateSlide = function(e, t) {
        var o = {},
            s = this;
        s.animateHeight(), !0 === s.options.rtl && !1 === s.options.vertical && (e = -e), !1 === s.transformsEnabled ? !1 === s.options.vertical ? s.$slideTrack.animate({
            left: e
        }, s.options.speed, s.options.easing, t) : s.$slideTrack.animate({
            top: e
        }, s.options.speed, s.options.easing, t) : !1 === s.cssTransitions ? (!0 === s.options.rtl && (s.currentLeft = -s.currentLeft), i({
            animStart: s.currentLeft
        }).animate({
            animStart: e
        }, {
            duration: s.options.speed,
            easing: s.options.easing,
            step: function(i) {
                i = Math.ceil(i), !1 === s.options.vertical ? (o[s.animType] = "translate(" + i + "px, 0px)", s.$slideTrack.css(o)) : (o[s.animType] = "translate(0px," + i + "px)", s.$slideTrack.css(o))
            },
            complete: function() {
                t && t.call()
            }
        })) : (s.applyTransition(), e = Math.ceil(e), !1 === s.options.vertical ? o[s.animType] = "translate3d(" + e + "px, 0px, 0px)" : o[s.animType] = "translate3d(0px," + e + "px, 0px)", s.$slideTrack.css(o), t && setTimeout(function() {
            s.disableTransition(), t.call()
        }, s.options.speed))
    }, e.prototype.getNavTarget = function() {
        var e = this,
            t = e.options.asNavFor;
        return t && null !== t && (t = i(t).not(e.$slider)), t
    }, e.prototype.asNavFor = function(e) {
        var t = this.getNavTarget();
        null !== t && "object" == typeof t && t.each(function() {
            var t = i(this).slick("getSlick");
            t.unslicked || t.slideHandler(e, !0)
        })
    }, e.prototype.applyTransition = function(i) {
        var e = this,
            t = {};
        !1 === e.options.fade ? t[e.transitionType] = e.transformType + " " + e.options.speed + "ms " + e.options.cssEase : t[e.transitionType] = "opacity " + e.options.speed + "ms " + e.options.cssEase, !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t)
    }, e.prototype.autoPlay = function() {
        var i = this;
        i.autoPlayClear(), i.slideCount > i.options.slidesToShow && (i.autoPlayTimer = setInterval(i.autoPlayIterator, i.options.autoplaySpeed))
    }, e.prototype.autoPlayClear = function() {
        var i = this;
        i.autoPlayTimer && clearInterval(i.autoPlayTimer)
    }, e.prototype.autoPlayIterator = function() {
        var i = this,
            e = i.currentSlide + i.options.slidesToScroll;
        i.paused || i.interrupted || i.focussed || (!1 === i.options.infinite && (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1 ? i.direction = 0 : 0 === i.direction && (e = i.currentSlide - i.options.slidesToScroll, i.currentSlide - 1 == 0 && (i.direction = 1))), i.slideHandler(e))
    }, e.prototype.buildArrows = function() {
        var e = this;
        !0 === e.options.arrows && (e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow"), e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow"), e.slideCount > e.options.slidesToShow ? (e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.prependTo(e.options.appendArrows), e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.appendTo(e.options.appendArrows), !0 !== e.options.infinite && e.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({
            "aria-disabled": "true",
            tabindex: "-1"
        }))
    }, e.prototype.buildDots = function() {
        var e, t, o = this;
        if (!0 === o.options.dots) {
            for (o.$slider.addClass("slick-dotted"), t = i("<ul />").addClass(o.options.dotsClass), e = 0; e <= o.getDotCount(); e += 1) t.append(i("<li />").append(o.options.customPaging.call(this, o, e)));
            o.$dots = t.appendTo(o.options.appendDots), o.$dots.find("li").first().addClass("slick-active")
        }
    }, e.prototype.buildOut = function() {
        var e = this;
        e.$slides = e.$slider.children(e.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), e.slideCount = e.$slides.length, e.$slides.each(function(e, t) {
            i(t).attr("data-slick-index", e).data("originalStyling", i(t).attr("style") || "")
        }), e.$slider.addClass("slick-slider"), e.$slideTrack = 0 === e.slideCount ? i('<div class="slick-track"/>').appendTo(e.$slider) : e.$slides.wrapAll('<div class="slick-track"/>').parent(), e.$list = e.$slideTrack.wrap('<div class="slick-list"/>').parent(), e.$slideTrack.css("opacity", 0), !0 !== e.options.centerMode && !0 !== e.options.swipeToSlide || (e.options.slidesToScroll = 1), i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"), e.setupInfinite(), e.buildArrows(), e.buildDots(), e.updateDots(), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), !0 === e.options.draggable && e.$list.addClass("draggable")
    }, e.prototype.buildRows = function() {
        var i, e, t, o, s, n, r, l = this;
        if (o = document.createDocumentFragment(), n = l.$slider.children(), l.options.rows > 1) {
            for (r = l.options.slidesPerRow * l.options.rows, s = Math.ceil(n.length / r), i = 0; i < s; i++) {
                var d = document.createElement("div");
                for (e = 0; e < l.options.rows; e++) {
                    var a = document.createElement("div");
                    for (t = 0; t < l.options.slidesPerRow; t++) {
                        var c = i * r + (e * l.options.slidesPerRow + t);
                        n.get(c) && a.appendChild(n.get(c))
                    }
                    d.appendChild(a)
                }
                o.appendChild(d)
            }
            l.$slider.empty().append(o), l.$slider.children().children().children().css({
                width: 100 / l.options.slidesPerRow + "%",
                display: "inline-block"
            })
        }
    }, e.prototype.checkResponsive = function(e, t) {
        var o, s, n, r = this,
            l = !1,
            d = r.$slider.width(),
            a = window.innerWidth || i(window).width();
        if ("window" === r.respondTo ? n = a : "slider" === r.respondTo ? n = d : "min" === r.respondTo && (n = Math.min(a, d)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) {
            s = null;
            for (o in r.breakpoints) r.breakpoints.hasOwnProperty(o) && (!1 === r.originalSettings.mobileFirst ? n < r.breakpoints[o] && (s = r.breakpoints[o]) : n > r.breakpoints[o] && (s = r.breakpoints[o]));
            null !== s ? null !== r.activeBreakpoint ? (s !== r.activeBreakpoint || t) && (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e), l = s), e || !1 === l || r.$slider.trigger("breakpoint", [r, l])
        }
    }, e.prototype.changeSlide = function(e, t) {
        var o, s, n, r = this,
            l = i(e.currentTarget);
        switch (l.is("a") && e.preventDefault(), l.is("li") || (l = l.closest("li")), n = r.slideCount % r.options.slidesToScroll != 0, o = n ? 0 : (r.slideCount - r.currentSlide) % r.options.slidesToScroll, e.data.message) {
            case "previous":
                s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide - s, !1, t);
                break;
            case "next":
                s = 0 === o ? r.options.slidesToScroll : o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide + s, !1, t);
                break;
            case "index":
                var d = 0 === e.data.index ? 0 : e.data.index || l.index() * r.options.slidesToScroll;
                r.slideHandler(r.checkNavigable(d), !1, t), l.children().trigger("focus");
                break;
            default:
                return
        }
    }, e.prototype.checkNavigable = function(i) {
        var e, t;
        if (e = this.getNavigableIndexes(), t = 0, i > e[e.length - 1]) i = e[e.length - 1];
        else
            for (var o in e) {
                if (i < e[o]) {
                    i = t;
                    break
                }
                t = e[o]
            }
        return i
    }, e.prototype.cleanUpEvents = function() {
        var e = this;
        e.options.dots && null !== e.$dots && (i("li", e.$dots).off("click.slick", e.changeSlide).off("mouseenter.slick", i.proxy(e.interrupt, e, !0)).off("mouseleave.slick", i.proxy(e.interrupt, e, !1)), !0 === e.options.accessibility && e.$dots.off("keydown.slick", e.keyHandler)), e.$slider.off("focus.slick blur.slick"), !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide), e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide), !0 === e.options.accessibility && (e.$prevArrow && e.$prevArrow.off("keydown.slick", e.keyHandler), e.$nextArrow && e.$nextArrow.off("keydown.slick", e.keyHandler))), e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler), e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler), e.$list.off("touchend.slick mouseup.slick", e.swipeHandler), e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler), e.$list.off("click.slick", e.clickHandler), i(document).off(e.visibilityChange, e.visibility), e.cleanUpSlideEvents(), !0 === e.options.accessibility && e.$list.off("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().off("click.slick", e.selectHandler), i(window).off("orientationchange.slick.slick-" + e.instanceUid, e.orientationChange), i(window).off("resize.slick.slick-" + e.instanceUid, e.resize), i("[draggable!=true]", e.$slideTrack).off("dragstart", e.preventDefault), i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition)
    }, e.prototype.cleanUpSlideEvents = function() {
        var e = this;
        e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1))
    }, e.prototype.cleanUpRows = function() {
        var i, e = this;
        e.options.rows > 1 && ((i = e.$slides.children().children()).removeAttr("style"), e.$slider.empty().append(i))
    }, e.prototype.clickHandler = function(i) {
        !1 === this.shouldClick && (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault())
    }, e.prototype.destroy = function(e) {
        var t = this;
        t.autoPlayClear(), t.touchObject = {}, t.cleanUpEvents(), i(".slick-cloned", t.$slider).detach(), t.$dots && t.$dots.remove(), t.$prevArrow && t.$prevArrow.length && (t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()), t.$nextArrow && t.$nextArrow.length && (t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()), t.$slides && (t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
            i(this).attr("style", i(this).data("originalStyling"))
        }), t.$slideTrack.children(this.options.slide).detach(), t.$slideTrack.detach(), t.$list.detach(), t.$slider.append(t.$slides)), t.cleanUpRows(), t.$slider.removeClass("slick-slider"), t.$slider.removeClass("slick-initialized"), t.$slider.removeClass("slick-dotted"), t.unslicked = !0, e || t.$slider.trigger("destroy", [t])
    }, e.prototype.disableTransition = function(i) {
        var e = this,
            t = {};
        t[e.transitionType] = "", !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t)
    }, e.prototype.fadeSlide = function(i, e) {
        var t = this;
        !1 === t.cssTransitions ? (t.$slides.eq(i).css({
            zIndex: t.options.zIndex
        }), t.$slides.eq(i).animate({
            opacity: 1
        }, t.options.speed, t.options.easing, e)) : (t.applyTransition(i), t.$slides.eq(i).css({
            opacity: 1,
            zIndex: t.options.zIndex
        }), e && setTimeout(function() {
            t.disableTransition(i), e.call()
        }, t.options.speed))
    }, e.prototype.fadeSlideOut = function(i) {
        var e = this;
        !1 === e.cssTransitions ? e.$slides.eq(i).animate({
            opacity: 0,
            zIndex: e.options.zIndex - 2
        }, e.options.speed, e.options.easing) : (e.applyTransition(i), e.$slides.eq(i).css({
            opacity: 0,
            zIndex: e.options.zIndex - 2
        }))
    }, e.prototype.filterSlides = e.prototype.slickFilter = function(i) {
        var e = this;
        null !== i && (e.$slidesCache = e.$slides, e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.filter(i).appendTo(e.$slideTrack), e.reinit())
    }, e.prototype.focusHandler = function() {
        var e = this;
        e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function(t) {
            t.stopImmediatePropagation();
            var o = i(this);
            setTimeout(function() {
                e.options.pauseOnFocus && (e.focussed = o.is(":focus"), e.autoPlay())
            }, 0)
        })
    }, e.prototype.getCurrent = e.prototype.slickCurrentSlide = function() {
        return this.currentSlide
    }, e.prototype.getDotCount = function() {
        var i = this,
            e = 0,
            t = 0,
            o = 0;
        if (!0 === i.options.infinite)
            if (i.slideCount <= i.options.slidesToShow) ++o;
            else
                for (; e < i.slideCount;) ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;
        else if (!0 === i.options.centerMode) o = i.slideCount;
        else if (i.options.asNavFor)
            for (; e < i.slideCount;) ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;
        else o = 1 + Math.ceil((i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll);
        return o - 1
    }, e.prototype.getLeft = function(i) {
        var e, t, o, s, n = this,
            r = 0;
        return n.slideOffset = 0, t = n.$slides.first().outerHeight(!0), !0 === n.options.infinite ? (n.slideCount > n.options.slidesToShow && (n.slideOffset = n.slideWidth * n.options.slidesToShow * -1, s = -1, !0 === n.options.vertical && !0 === n.options.centerMode && (2 === n.options.slidesToShow ? s = -1.5 : 1 === n.options.slidesToShow && (s = -2)), r = t * n.options.slidesToShow * s), n.slideCount % n.options.slidesToScroll != 0 && i + n.options.slidesToScroll > n.slideCount && n.slideCount > n.options.slidesToShow && (i > n.slideCount ? (n.slideOffset = (n.options.slidesToShow - (i - n.slideCount)) * n.slideWidth * -1, r = (n.options.slidesToShow - (i - n.slideCount)) * t * -1) : (n.slideOffset = n.slideCount % n.options.slidesToScroll * n.slideWidth * -1, r = n.slideCount % n.options.slidesToScroll * t * -1))) : i + n.options.slidesToShow > n.slideCount && (n.slideOffset = (i + n.options.slidesToShow - n.slideCount) * n.slideWidth, r = (i + n.options.slidesToShow - n.slideCount) * t), n.slideCount <= n.options.slidesToShow && (n.slideOffset = 0, r = 0), !0 === n.options.centerMode && n.slideCount <= n.options.slidesToShow ? n.slideOffset = n.slideWidth * Math.floor(n.options.slidesToShow) / 2 - n.slideWidth * n.slideCount / 2 : !0 === n.options.centerMode && !0 === n.options.infinite ? n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2) - n.slideWidth : !0 === n.options.centerMode && (n.slideOffset = 0, n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2)), e = !1 === n.options.vertical ? i * n.slideWidth * -1 + n.slideOffset : i * t * -1 + r, !0 === n.options.variableWidth && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, !0 === n.options.centerMode && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow + 1), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, e += (n.$list.width() - o.outerWidth()) / 2)), e
    }, e.prototype.getOption = e.prototype.slickGetOption = function(i) {
        return this.options[i]
    }, e.prototype.getNavigableIndexes = function() {
        var i, e = this,
            t = 0,
            o = 0,
            s = [];
        for (!1 === e.options.infinite ? i = e.slideCount : (t = -1 * e.options.slidesToScroll, o = -1 * e.options.slidesToScroll, i = 2 * e.slideCount); t < i;) s.push(t), t = o + e.options.slidesToScroll, o += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;
        return s
    }, e.prototype.getSlick = function() {
        return this
    }, e.prototype.getSlideCount = function() {
        var e, t, o = this;
        return t = !0 === o.options.centerMode ? o.slideWidth * Math.floor(o.options.slidesToShow / 2) : 0, !0 === o.options.swipeToSlide ? (o.$slideTrack.find(".slick-slide").each(function(s, n) {
            if (n.offsetLeft - t + i(n).outerWidth() / 2 > -1 * o.swipeLeft) return e = n, !1
        }), Math.abs(i(e).attr("data-slick-index") - o.currentSlide) || 1) : o.options.slidesToScroll
    }, e.prototype.goTo = e.prototype.slickGoTo = function(i, e) {
        this.changeSlide({
            data: {
                message: "index",
                index: parseInt(i)
            }
        }, e)
    }, e.prototype.init = function(e) {
        var t = this;
        i(t.$slider).hasClass("slick-initialized") || (i(t.$slider).addClass("slick-initialized"), t.buildRows(), t.buildOut(), t.setProps(), t.startLoad(), t.loadSlider(), t.initializeEvents(), t.updateArrows(), t.updateDots(), t.checkResponsive(!0), t.focusHandler()), e && t.$slider.trigger("init", [t]), !0 === t.options.accessibility && t.initADA(), t.options.autoplay && (t.paused = !1, t.autoPlay())
    }, e.prototype.initADA = function() {
        var e = this,
            t = Math.ceil(e.slideCount / e.options.slidesToShow),
            o = e.getNavigableIndexes().filter(function(i) {
                return i >= 0 && i < e.slideCount
            });
        e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        }), null !== e.$dots && (e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function(t) {
            var s = o.indexOf(t);
            i(this).attr({
                role: "tabpanel",
                id: "slick-slide" + e.instanceUid + t,
                tabindex: -1
            }), -1 !== s && i(this).attr({
                "aria-describedby": "slick-slide-control" + e.instanceUid + s
            })
        }), e.$dots.attr("role", "tablist").find("li").each(function(s) {
            var n = o[s];
            i(this).attr({
                role: "presentation"
            }), i(this).find("button").first().attr({
                role: "tab",
                id: "slick-slide-control" + e.instanceUid + s,
                "aria-controls": "slick-slide" + e.instanceUid + n,
                "aria-label": s + 1 + " of " + t,
                "aria-selected": null,
                tabindex: "-1"
            })
        }).eq(e.currentSlide).find("button").attr({
            "aria-selected": "true",
            tabindex: "0"
        }).end());
        for (var s = e.currentSlide, n = s + e.options.slidesToShow; s < n; s++) e.$slides.eq(s).attr("tabindex", 0);
        e.activateADA()
    }, e.prototype.initArrowEvents = function() {
        var i = this;
        !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.off("click.slick").on("click.slick", {
            message: "previous"
        }, i.changeSlide), i.$nextArrow.off("click.slick").on("click.slick", {
            message: "next"
        }, i.changeSlide), !0 === i.options.accessibility && (i.$prevArrow.on("keydown.slick", i.keyHandler), i.$nextArrow.on("keydown.slick", i.keyHandler)))
    }, e.prototype.initDotEvents = function() {
        var e = this;
        !0 === e.options.dots && (i("li", e.$dots).on("click.slick", {
            message: "index"
        }, e.changeSlide), !0 === e.options.accessibility && e.$dots.on("keydown.slick", e.keyHandler)), !0 === e.options.dots && !0 === e.options.pauseOnDotsHover && i("li", e.$dots).on("mouseenter.slick", i.proxy(e.interrupt, e, !0)).on("mouseleave.slick", i.proxy(e.interrupt, e, !1))
    }, e.prototype.initSlideEvents = function() {
        var e = this;
        e.options.pauseOnHover && (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)))
    }, e.prototype.initializeEvents = function() {
        var e = this;
        e.initArrowEvents(), e.initDotEvents(), e.initSlideEvents(), e.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, e.swipeHandler), e.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, e.swipeHandler), e.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, e.swipeHandler), e.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, e.swipeHandler), e.$list.on("click.slick", e.clickHandler), i(document).on(e.visibilityChange, i.proxy(e.visibility, e)), !0 === e.options.accessibility && e.$list.on("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), i(window).on("orientationchange.slick.slick-" + e.instanceUid, i.proxy(e.orientationChange, e)), i(window).on("resize.slick.slick-" + e.instanceUid, i.proxy(e.resize, e)), i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault), i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition), i(e.setPosition)
    }, e.prototype.initUI = function() {
        var i = this;
        !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.show(), i.$nextArrow.show()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.show()
    }, e.prototype.keyHandler = function(i) {
        var e = this;
        i.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === i.keyCode && !0 === e.options.accessibility ? e.changeSlide({
            data: {
                message: !0 === e.options.rtl ? "next" : "previous"
            }
        }) : 39 === i.keyCode && !0 === e.options.accessibility && e.changeSlide({
            data: {
                message: !0 === e.options.rtl ? "previous" : "next"
            }
        }))
    }, e.prototype.lazyLoad = function() {
        function e(e) {
            i("img[data-lazy]", e).each(function() {
                var e = i(this),
                    t = i(this).attr("data-lazy"),
                    o = i(this).attr("data-srcset"),
                    s = i(this).attr("data-sizes") || n.$slider.attr("data-sizes"),
                    r = document.createElement("img");
                r.onload = function() {
                    e.animate({
                        opacity: 0
                    }, 100, function() {
                        o && (e.attr("srcset", o), s && e.attr("sizes", s)), e.attr("src", t).animate({
                            opacity: 1
                        }, 200, function() {
                            e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")
                        }), n.$slider.trigger("lazyLoaded", [n, e, t])
                    })
                }, r.onerror = function() {
                    e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), n.$slider.trigger("lazyLoadError", [n, e, t])
                }, r.src = t
            })
        }
        var t, o, s, n = this;
        if (!0 === n.options.centerMode ? !0 === n.options.infinite ? s = (o = n.currentSlide + (n.options.slidesToShow / 2 + 1)) + n.options.slidesToShow + 2 : (o = Math.max(0, n.currentSlide - (n.options.slidesToShow / 2 + 1)), s = n.options.slidesToShow / 2 + 1 + 2 + n.currentSlide) : (o = n.options.infinite ? n.options.slidesToShow + n.currentSlide : n.currentSlide, s = Math.ceil(o + n.options.slidesToShow), !0 === n.options.fade && (o > 0 && o--, s <= n.slideCount && s++)), t = n.$slider.find(".slick-slide").slice(o, s), "anticipated" === n.options.lazyLoad)
            for (var r = o - 1, l = s, d = n.$slider.find(".slick-slide"), a = 0; a < n.options.slidesToScroll; a++) r < 0 && (r = n.slideCount - 1), t = (t = t.add(d.eq(r))).add(d.eq(l)), r--, l++;
        e(t), n.slideCount <= n.options.slidesToShow ? e(n.$slider.find(".slick-slide")) : n.currentSlide >= n.slideCount - n.options.slidesToShow ? e(n.$slider.find(".slick-cloned").slice(0, n.options.slidesToShow)) : 0 === n.currentSlide && e(n.$slider.find(".slick-cloned").slice(-1 * n.options.slidesToShow))
    }, e.prototype.loadSlider = function() {
        var i = this;
        i.setPosition(), i.$slideTrack.css({
            opacity: 1
        }), i.$slider.removeClass("slick-loading"), i.initUI(), "progressive" === i.options.lazyLoad && i.progressiveLazyLoad()
    }, e.prototype.next = e.prototype.slickNext = function() {
        this.changeSlide({
            data: {
                message: "next"
            }
        })
    }, e.prototype.orientationChange = function() {
        var i = this;
        i.checkResponsive(), i.setPosition()
    }, e.prototype.pause = e.prototype.slickPause = function() {
        var i = this;
        i.autoPlayClear(), i.paused = !0
    }, e.prototype.play = e.prototype.slickPlay = function() {
        var i = this;
        i.autoPlay(), i.options.autoplay = !0, i.paused = !1, i.focussed = !1, i.interrupted = !1
    }, e.prototype.postSlide = function(e) {
        var t = this;
        t.unslicked || (t.$slider.trigger("afterChange", [t, e]), t.animating = !1, t.slideCount > t.options.slidesToShow && t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), !0 === t.options.accessibility && (t.initADA(), t.options.focusOnChange && i(t.$slides.get(t.currentSlide)).attr("tabindex", 0).focus()))
    }, e.prototype.prev = e.prototype.slickPrev = function() {
        this.changeSlide({
            data: {
                message: "previous"
            }
        })
    }, e.prototype.preventDefault = function(i) {
        i.preventDefault()
    }, e.prototype.progressiveLazyLoad = function(e) {
        e = e || 1;
        var t, o, s, n, r, l = this,
            d = i("img[data-lazy]", l.$slider);
        d.length ? (t = d.first(), o = t.attr("data-lazy"), s = t.attr("data-srcset"), n = t.attr("data-sizes") || l.$slider.attr("data-sizes"), (r = document.createElement("img")).onload = function() {
            s && (t.attr("srcset", s), n && t.attr("sizes", n)), t.attr("src", o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"), !0 === l.options.adaptiveHeight && l.setPosition(), l.$slider.trigger("lazyLoaded", [l, t, o]), l.progressiveLazyLoad()
        }, r.onerror = function() {
            e < 3 ? setTimeout(function() {
                l.progressiveLazyLoad(e + 1)
            }, 500) : (t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), l.$slider.trigger("lazyLoadError", [l, t, o]), l.progressiveLazyLoad())
        }, r.src = o) : l.$slider.trigger("allImagesLoaded", [l])
    }, e.prototype.refresh = function(e) {
        var t, o, s = this;
        o = s.slideCount - s.options.slidesToShow, !s.options.infinite && s.currentSlide > o && (s.currentSlide = o), s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0), t = s.currentSlide, s.destroy(!0), i.extend(s, s.initials, {
            currentSlide: t
        }), s.init(), e || s.changeSlide({
            data: {
                message: "index",
                index: t
            }
        }, !1)
    }, e.prototype.registerBreakpoints = function() {
        var e, t, o, s = this,
            n = s.options.responsive || null;
        if ("array" === i.type(n) && n.length) {
            s.respondTo = s.options.respondTo || "window";
            for (e in n)
                if (o = s.breakpoints.length - 1, n.hasOwnProperty(e)) {
                    for (t = n[e].breakpoint; o >= 0;) s.breakpoints[o] && s.breakpoints[o] === t && s.breakpoints.splice(o, 1), o--;
                    s.breakpoints.push(t), s.breakpointSettings[t] = n[e].settings
                }
            s.breakpoints.sort(function(i, e) {
                return s.options.mobileFirst ? i - e : e - i
            })
        }
    }, e.prototype.reinit = function() {
        var e = this;
        e.$slides = e.$slideTrack.children(e.options.slide).addClass("slick-slide"), e.slideCount = e.$slides.length, e.currentSlide >= e.slideCount && 0 !== e.currentSlide && (e.currentSlide = e.currentSlide - e.options.slidesToScroll), e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0), e.registerBreakpoints(), e.setProps(), e.setupInfinite(), e.buildArrows(), e.updateArrows(), e.initArrowEvents(), e.buildDots(), e.updateDots(), e.initDotEvents(), e.cleanUpSlideEvents(), e.initSlideEvents(), e.checkResponsive(!1, !0), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), e.setPosition(), e.focusHandler(), e.paused = !e.options.autoplay, e.autoPlay(), e.$slider.trigger("reInit", [e])
    }, e.prototype.resize = function() {
        var e = this;
        i(window).width() !== e.windowWidth && (clearTimeout(e.windowDelay), e.windowDelay = window.setTimeout(function() {
            e.windowWidth = i(window).width(), e.checkResponsive(), e.unslicked || e.setPosition()
        }, 50))
    }, e.prototype.removeSlide = e.prototype.slickRemove = function(i, e, t) {
        var o = this;
        if (i = "boolean" == typeof i ? !0 === (e = i) ? 0 : o.slideCount - 1 : !0 === e ? --i : i, o.slideCount < 1 || i < 0 || i > o.slideCount - 1) return !1;
        o.unload(), !0 === t ? o.$slideTrack.children().remove() : o.$slideTrack.children(this.options.slide).eq(i).remove(), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slidesCache = o.$slides, o.reinit()
    }, e.prototype.setCSS = function(i) {
        var e, t, o = this,
            s = {};
        !0 === o.options.rtl && (i = -i), e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px", t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px", s[o.positionProp] = i, !1 === o.transformsEnabled ? o.$slideTrack.css(s) : (s = {}, !1 === o.cssTransitions ? (s[o.animType] = "translate(" + e + ", " + t + ")", o.$slideTrack.css(s)) : (s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)", o.$slideTrack.css(s)))
    }, e.prototype.setDimensions = function() {
        var i = this;
        !1 === i.options.vertical ? !0 === i.options.centerMode && i.$list.css({
            padding: "0px " + i.options.centerPadding
        }) : (i.$list.height(i.$slides.first().outerHeight(!0) * i.options.slidesToShow), !0 === i.options.centerMode && i.$list.css({
            padding: i.options.centerPadding + " 0px"
        })), i.listWidth = i.$list.width(), i.listHeight = i.$list.height(), !1 === i.options.vertical && !1 === i.options.variableWidth ? (i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow), i.$slideTrack.width(Math.ceil(i.slideWidth * i.$slideTrack.children(".slick-slide").length))) : !0 === i.options.variableWidth ? i.$slideTrack.width(5e3 * i.slideCount) : (i.slideWidth = Math.ceil(i.listWidth), i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0) * i.$slideTrack.children(".slick-slide").length)));
        var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width();
        !1 === i.options.variableWidth && i.$slideTrack.children(".slick-slide").width(i.slideWidth - e)
    }, e.prototype.setFade = function() {
        var e, t = this;
        t.$slides.each(function(o, s) {
            e = t.slideWidth * o * -1, !0 === t.options.rtl ? i(s).css({
                position: "relative",
                right: e,
                top: 0,
                zIndex: t.options.zIndex - 2,
                opacity: 0
            }) : i(s).css({
                position: "relative",
                left: e,
                top: 0,
                zIndex: t.options.zIndex - 2,
                opacity: 0
            })
        }), t.$slides.eq(t.currentSlide).css({
            zIndex: t.options.zIndex - 1,
            opacity: 1
        })
    }, e.prototype.setHeight = function() {
        var i = this;
        if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {
            var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
            i.$list.css("height", e)
        }
    }, e.prototype.setOption = e.prototype.slickSetOption = function() {
        var e, t, o, s, n, r = this,
            l = !1;
        if ("object" === i.type(arguments[0]) ? (o = arguments[0], l = arguments[1], n = "multiple") : "string" === i.type(arguments[0]) && (o = arguments[0], s = arguments[1], l = arguments[2], "responsive" === arguments[0] && "array" === i.type(arguments[1]) ? n = "responsive" : void 0 !== arguments[1] && (n = "single")), "single" === n) r.options[o] = s;
        else if ("multiple" === n) i.each(o, function(i, e) {
            r.options[i] = e
        });
        else if ("responsive" === n)
            for (t in s)
                if ("array" !== i.type(r.options.responsive)) r.options.responsive = [s[t]];
                else {
                    for (e = r.options.responsive.length - 1; e >= 0;) r.options.responsive[e].breakpoint === s[t].breakpoint && r.options.responsive.splice(e, 1), e--;
                    r.options.responsive.push(s[t])
                }
        l && (r.unload(), r.reinit())
    }, e.prototype.setPosition = function() {
        var i = this;
        i.setDimensions(), i.setHeight(), !1 === i.options.fade ? i.setCSS(i.getLeft(i.currentSlide)) : i.setFade(), i.$slider.trigger("setPosition", [i])
    }, e.prototype.setProps = function() {
        var i = this,
            e = document.body.style;
        i.positionProp = !0 === i.options.vertical ? "top" : "left", "top" === i.positionProp ? i.$slider.addClass("slick-vertical") : i.$slider.removeClass("slick-vertical"), void 0 === e.WebkitTransition && void 0 === e.MozTransition && void 0 === e.msTransition || !0 === i.options.useCSS && (i.cssTransitions = !0), i.options.fade && ("number" == typeof i.options.zIndex ? i.options.zIndex < 3 && (i.options.zIndex = 3) : i.options.zIndex = i.defaults.zIndex), void 0 !== e.OTransform && (i.animType = "OTransform", i.transformType = "-o-transform", i.transitionType = "OTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.MozTransform && (i.animType = "MozTransform", i.transformType = "-moz-transform", i.transitionType = "MozTransition", void 0 === e.perspectiveProperty && void 0 === e.MozPerspective && (i.animType = !1)), void 0 !== e.webkitTransform && (i.animType = "webkitTransform", i.transformType = "-webkit-transform", i.transitionType = "webkitTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.msTransform && (i.animType = "msTransform", i.transformType = "-ms-transform", i.transitionType = "msTransition", void 0 === e.msTransform && (i.animType = !1)), void 0 !== e.transform && !1 !== i.animType && (i.animType = "transform", i.transformType = "transform", i.transitionType = "transition"), i.transformsEnabled = i.options.useTransform && null !== i.animType && !1 !== i.animType
    }, e.prototype.setSlideClasses = function(i) {
        var e, t, o, s, n = this;
        if (t = n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), n.$slides.eq(i).addClass("slick-current"), !0 === n.options.centerMode) {
            var r = n.options.slidesToShow % 2 == 0 ? 1 : 0;
            e = Math.floor(n.options.slidesToShow / 2), !0 === n.options.infinite && (i >= e && i <= n.slideCount - 1 - e ? n.$slides.slice(i - e + r, i + e + 1).addClass("slick-active").attr("aria-hidden", "false") : (o = n.options.slidesToShow + i, t.slice(o - e + 1 + r, o + e + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === i ? t.eq(t.length - 1 - n.options.slidesToShow).addClass("slick-center") : i === n.slideCount - 1 && t.eq(n.options.slidesToShow).addClass("slick-center")), n.$slides.eq(i).addClass("slick-center")
        } else i >= 0 && i <= n.slideCount - n.options.slidesToShow ? n.$slides.slice(i, i + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : t.length <= n.options.slidesToShow ? t.addClass("slick-active").attr("aria-hidden", "false") : (s = n.slideCount % n.options.slidesToShow, o = !0 === n.options.infinite ? n.options.slidesToShow + i : i, n.options.slidesToShow == n.options.slidesToScroll && n.slideCount - i < n.options.slidesToShow ? t.slice(o - (n.options.slidesToShow - s), o + s).addClass("slick-active").attr("aria-hidden", "false") : t.slice(o, o + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false"));
        "ondemand" !== n.options.lazyLoad && "anticipated" !== n.options.lazyLoad || n.lazyLoad()
    }, e.prototype.setupInfinite = function() {
        var e, t, o, s = this;
        if (!0 === s.options.fade && (s.options.centerMode = !1), !0 === s.options.infinite && !1 === s.options.fade && (t = null, s.slideCount > s.options.slidesToShow)) {
            for (o = !0 === s.options.centerMode ? s.options.slidesToShow + 1 : s.options.slidesToShow, e = s.slideCount; e > s.slideCount - o; e -= 1) t = e - 1, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t - s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");
            for (e = 0; e < o + s.slideCount; e += 1) t = e, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t + s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");
            s.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                i(this).attr("id", "")
            })
        }
    }, e.prototype.interrupt = function(i) {
        var e = this;
        i || e.autoPlay(), e.interrupted = i
    }, e.prototype.selectHandler = function(e) {
        var t = this,
            o = i(e.target).is(".slick-slide") ? i(e.target) : i(e.target).parents(".slick-slide"),
            s = parseInt(o.attr("data-slick-index"));
        s || (s = 0), t.slideCount <= t.options.slidesToShow ? t.slideHandler(s, !1, !0) : t.slideHandler(s)
    }, e.prototype.slideHandler = function(i, e, t) {
        var o, s, n, r, l, d = null,
            a = this;
        if (e = e || !1, !(!0 === a.animating && !0 === a.options.waitForAnimate || !0 === a.options.fade && a.currentSlide === i))
            if (!1 === e && a.asNavFor(i), o = i, d = a.getLeft(o), r = a.getLeft(a.currentSlide), a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft, !1 === a.options.infinite && !1 === a.options.centerMode && (i < 0 || i > a.getDotCount() * a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function() {
                a.postSlide(o)
            }) : a.postSlide(o));
            else if (!1 === a.options.infinite && !0 === a.options.centerMode && (i < 0 || i > a.slideCount - a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function() {
            a.postSlide(o)
        }) : a.postSlide(o));
        else {
            if (a.options.autoplay && clearInterval(a.autoPlayTimer), s = o < 0 ? a.slideCount % a.options.slidesToScroll != 0 ? a.slideCount - a.slideCount % a.options.slidesToScroll : a.slideCount + o : o >= a.slideCount ? a.slideCount % a.options.slidesToScroll != 0 ? 0 : o - a.slideCount : o, a.animating = !0, a.$slider.trigger("beforeChange", [a, a.currentSlide, s]), n = a.currentSlide, a.currentSlide = s, a.setSlideClasses(a.currentSlide), a.options.asNavFor && (l = (l = a.getNavTarget()).slick("getSlick")).slideCount <= l.options.slidesToShow && l.setSlideClasses(a.currentSlide), a.updateDots(), a.updateArrows(), !0 === a.options.fade) return !0 !== t ? (a.fadeSlideOut(n), a.fadeSlide(s, function() {
                a.postSlide(s)
            })) : a.postSlide(s), void a.animateHeight();
            !0 !== t ? a.animateSlide(d, function() {
                a.postSlide(s)
            }) : a.postSlide(s)
        }
    }, e.prototype.startLoad = function() {
        var i = this;
        !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.hide(), i.$nextArrow.hide()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.hide(), i.$slider.addClass("slick-loading")
    }, e.prototype.swipeDirection = function() {
        var i, e, t, o, s = this;
        return i = s.touchObject.startX - s.touchObject.curX, e = s.touchObject.startY - s.touchObject.curY, t = Math.atan2(e, i), (o = Math.round(180 * t / Math.PI)) < 0 && (o = 360 - Math.abs(o)), o <= 45 && o >= 0 ? !1 === s.options.rtl ? "left" : "right" : o <= 360 && o >= 315 ? !1 === s.options.rtl ? "left" : "right" : o >= 135 && o <= 225 ? !1 === s.options.rtl ? "right" : "left" : !0 === s.options.verticalSwiping ? o >= 35 && o <= 135 ? "down" : "up" : "vertical"
    }, e.prototype.swipeEnd = function(i) {
        var e, t, o = this;
        if (o.dragging = !1, o.swiping = !1, o.scrolling) return o.scrolling = !1, !1;
        if (o.interrupted = !1, o.shouldClick = !(o.touchObject.swipeLength > 10), void 0 === o.touchObject.curX) return !1;
        if (!0 === o.touchObject.edgeHit && o.$slider.trigger("edge", [o, o.swipeDirection()]), o.touchObject.swipeLength >= o.touchObject.minSwipe) {
            switch (t = o.swipeDirection()) {
                case "left":
                case "down":
                    e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide + o.getSlideCount()) : o.currentSlide + o.getSlideCount(), o.currentDirection = 0;
                    break;
                case "right":
                case "up":
                    e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide - o.getSlideCount()) : o.currentSlide - o.getSlideCount(), o.currentDirection = 1
            }
            "vertical" != t && (o.slideHandler(e), o.touchObject = {}, o.$slider.trigger("swipe", [o, t]))
        } else o.touchObject.startX !== o.touchObject.curX && (o.slideHandler(o.currentSlide), o.touchObject = {})
    }, e.prototype.swipeHandler = function(i) {
        var e = this;
        if (!(!1 === e.options.swipe || "ontouchend" in document && !1 === e.options.swipe || !1 === e.options.draggable && -1 !== i.type.indexOf("mouse"))) switch (e.touchObject.fingerCount = i.originalEvent && void 0 !== i.originalEvent.touches ? i.originalEvent.touches.length : 1, e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold, !0 === e.options.verticalSwiping && (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold), i.data.action) {
            case "start":
                e.swipeStart(i);
                break;
            case "move":
                e.swipeMove(i);
                break;
            case "end":
                e.swipeEnd(i)
        }
    }, e.prototype.swipeMove = function(i) {
        var e, t, o, s, n, r, l = this;
        return n = void 0 !== i.originalEvent ? i.originalEvent.touches : null, !(!l.dragging || l.scrolling || n && 1 !== n.length) && (e = l.getLeft(l.currentSlide), l.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX, l.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY, l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))), r = Math.round(Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2))), !l.options.verticalSwiping && !l.swiping && r > 4 ? (l.scrolling = !0, !1) : (!0 === l.options.verticalSwiping && (l.touchObject.swipeLength = r), t = l.swipeDirection(), void 0 !== i.originalEvent && l.touchObject.swipeLength > 4 && (l.swiping = !0, i.preventDefault()), s = (!1 === l.options.rtl ? 1 : -1) * (l.touchObject.curX > l.touchObject.startX ? 1 : -1), !0 === l.options.verticalSwiping && (s = l.touchObject.curY > l.touchObject.startY ? 1 : -1), o = l.touchObject.swipeLength, l.touchObject.edgeHit = !1, !1 === l.options.infinite && (0 === l.currentSlide && "right" === t || l.currentSlide >= l.getDotCount() && "left" === t) && (o = l.touchObject.swipeLength * l.options.edgeFriction, l.touchObject.edgeHit = !0), !1 === l.options.vertical ? l.swipeLeft = e + o * s : l.swipeLeft = e + o * (l.$list.height() / l.listWidth) * s, !0 === l.options.verticalSwiping && (l.swipeLeft = e + o * s), !0 !== l.options.fade && !1 !== l.options.touchMove && (!0 === l.animating ? (l.swipeLeft = null, !1) : void l.setCSS(l.swipeLeft))))
    }, e.prototype.swipeStart = function(i) {
        var e, t = this;
        if (t.interrupted = !0, 1 !== t.touchObject.fingerCount || t.slideCount <= t.options.slidesToShow) return t.touchObject = {}, !1;
        void 0 !== i.originalEvent && void 0 !== i.originalEvent.touches && (e = i.originalEvent.touches[0]), t.touchObject.startX = t.touchObject.curX = void 0 !== e ? e.pageX : i.clientX, t.touchObject.startY = t.touchObject.curY = void 0 !== e ? e.pageY : i.clientY, t.dragging = !0
    }, e.prototype.unfilterSlides = e.prototype.slickUnfilter = function() {
        var i = this;
        null !== i.$slidesCache && (i.unload(), i.$slideTrack.children(this.options.slide).detach(), i.$slidesCache.appendTo(i.$slideTrack), i.reinit())
    }, e.prototype.unload = function() {
        var e = this;
        i(".slick-cloned", e.$slider).remove(), e.$dots && e.$dots.remove(), e.$prevArrow && e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.remove(), e.$nextArrow && e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.remove(), e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "")
    }, e.prototype.unslick = function(i) {
        var e = this;
        e.$slider.trigger("unslick", [e, i]), e.destroy()
    }, e.prototype.updateArrows = function() {
        var i = this;
        Math.floor(i.options.slidesToShow / 2), !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && !i.options.infinite && (i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === i.currentSlide ? (i.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - i.options.slidesToShow && !1 === i.options.centerMode ? (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - 1 && !0 === i.options.centerMode && (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")))
    }, e.prototype.updateDots = function() {
        var i = this;
        null !== i.$dots && (i.$dots.find("li").removeClass("slick-active").end(), i.$dots.find("li").eq(Math.floor(i.currentSlide / i.options.slidesToScroll)).addClass("slick-active"))
    }, e.prototype.visibility = function() {
        var i = this;
        i.options.autoplay && (document[i.hidden] ? i.interrupted = !0 : i.interrupted = !1)
    }, i.fn.slick = function() {
        var i, t, o = this,
            s = arguments[0],
            n = Array.prototype.slice.call(arguments, 1),
            r = o.length;
        for (i = 0; i < r; i++)
            if ("object" == typeof s || void 0 === s ? o[i].slick = new e(o[i], s) : t = o[i].slick[s].apply(o[i].slick, n), void 0 !== t) return t;
        return o
    }
});;
/**
 * @file
 * The Born Group module.
 *
 *
 * @category JS
 * @copyright 2018 Copyright BORN Commerce Pvt Ltd, https://www.borngroup.com/
 * @license https://www.borngroup.com/ Private
 * @link http://digi.com.my/
 */
(function($, Drupal, drupalSettings) {
    "use strict";
    Drupal.behaviors.searchBehavior = {
        attach: function(context, settings) {

            var $searchMobile = $(".quick-links-mobile.search-box-mobile .editable-span-for-search-mobile > span"),
                $searchInitialBlocks = $(".search-global #auto_suggest_static_content"),
                $searchResultsCont,
                initialHeight = $searchInitialBlocks.innerHeight(), //initial height of the pre populated search results("i want to" and "top sellers")
                $editSearch,
                $productSearchBlock,
                searchTypeTimer,
                min_key_length,
                input_data,
                instance_id,
                ajax_calls,
                searchTypingInterval = 500;


            function openSearchPanel($modalSelector) {
                $productSearchBlock = $(".search-global .products-auto-suggestion");
                $modalSelector.on("show.bs.modal", function() {
                    $("body").addClass("search-modal-open");
                    $productSearchBlock.remove();
                }).on("shown.bs.modal", function() {
                    $editSearch = $(".search-global input.digi-search-box ");
                    $searchInitialBlocks = $(".search-global #auto_suggest_static_content");
                    $editSearch.val("").focus();
                    $searchInitialBlocks.css("display", "block");
                    $(".search-global .search-modal").removeClass("fade");
                    $(".hamburger-menu .nav-collapse.collapse").addClass("in");

                }).on("hide.bs.modal", function() {
                    $.scrollify.enable();
                    $("body").removeClass("search-modal-open");
                    $productSearchBlock.remove();
                }).modal({
                    show: true,
                    backdrop: "static",
                    keyboard: false
                });
            }

            $(".menu--account > li:first-child > a").on("click", function(e) {
                e.preventDefault();
                openSearchPanel($(".main-container .modal.search-modal"));
            });

            $searchMobile.once().on("focus", function() {
                openSearchPanel($(".main-container .modal.search-modal"));
            });

            min_key_length = parseInt(drupalSettings.born_search_autocomplete.min_keyword_length);
            if (min_key_length === "" || min_key_length === undefined) {
                min_key_length = 3;
            }

            $(".search-global .born-site-search-form").on("submit", function(e) {
                $editSearch = $(".search-global input.digi-search-box ");
                input_data = $editSearch.val().length;
                if (input_data === 0 || input_data < min_key_length) {
                    e.preventDefault();
                    $(".born_autosuggest_form .alert").removeClass("hidden");
                }
            });

            $.fn.autoSuggestScrollCallback = function() {
                $searchResultsCont = $("#search_auto_suggest_container .searh-panel-main-container");
                if (initialHeight && ($searchResultsCont.find("#born_auto_suggest_results_wrapper").innerHeight() >= initialHeight)) {
                    if ($(".search-global .products-auto-suggestion").css("display") === "block") {
                        $.scrollify.disable(); // disable the scrolify of homepage to avoid background scroll when search pop up is open
                        $searchResultsCont.slimScroll({ //add scroll bar to the container when there are more results
                            size: "3px",
                            height: "calc(90vh - 196px)",
                            railVisible: true,
                            alwaysVisible: false,
                            disableFadeOut: true
                        });

                    }
                }
            }


            $("body").off("keyup", ".search-global .digi-search-box").on("keyup", ".search-global .digi-search-box", function(e) {

                $searchInitialBlocks = $(".search-global #auto_suggest_static_content");
                $productSearchBlock = $(".search-global .products-auto-suggestion");

                $searchResultsCont = $("#search_auto_suggest_container .searh-panel-main-container");
                clearTimeout(searchTypeTimer);

                if (e.keyCode === 27) { //clear the input box on click of esc key
                    $(this).val("");
                }
                input_data = $(this).val().length;
                if (input_data !== 0 && input_data >= min_key_length) {
                    $(".born_autosuggest_form .alert .close").trigger("click"); // close the error alert message
                    var $searchbox = $(this);
                    $searchInitialBlocks.css("display", "none");
                    searchTypeTimer = setTimeout(function() {
                        $searchbox.triggerHandler("finishedinput");
                    }, searchTypingInterval);
                } else {
                    $searchInitialBlocks.css("display", "block");
                    $productSearchBlock.remove();
                    $searchResultsCont.slimScroll({
                        "destroy": "true"
                    });
                    $searchResultsCont.css("height", "auto");
                }
            });

            /**header and footer code ends here*/
            $(window).resize(function() {
                if (window.innerWidth >= 768) {
                    $searchMobile.once().addClass("hidden");
                } else {
                    $searchMobile.once().removeClass("hidden");
                }
            });
        }
    };
})(jQuery, Drupal, drupalSettings);;
/*!
 * jQuery Form Plugin
 * version: 4.2.2
 * Requires jQuery v1.7.2 or later
 * Project repository: https://github.com/jquery-form/form

 * Copyright 2017 Kevin Morris
 * Copyright 2006 M. Alsup

 * Dual licensed under the LGPL-2.1+ or MIT licenses
 * https://github.com/jquery-form/form#license

 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 */
! function(e) {
    "function" == typeof define && define.amd ? define(["jquery"], e) : "object" == typeof module && module.exports ? module.exports = function(t, r) {
        return void 0 === r && (r = "undefined" != typeof window ? require("jquery") : require("jquery")(t)), e(r), r
    } : e(jQuery)
}(function(e) {
    "use strict";

    function t(t) {
        var r = t.data;
        t.isDefaultPrevented() || (t.preventDefault(), e(t.target).closest("form").ajaxSubmit(r))
    }

    function r(t) {
        var r = t.target,
            a = e(r);
        if (!a.is("[type=submit],[type=image]")) {
            var n = a.closest("[type=submit]");
            if (0 === n.length) return;
            r = n[0]
        }
        var i = r.form;
        if (i.clk = r, "image" === r.type)
            if (void 0 !== t.offsetX) i.clk_x = t.offsetX, i.clk_y = t.offsetY;
            else if ("function" == typeof e.fn.offset) {
            var o = a.offset();
            i.clk_x = t.pageX - o.left, i.clk_y = t.pageY - o.top
        } else i.clk_x = t.pageX - r.offsetLeft, i.clk_y = t.pageY - r.offsetTop;
        setTimeout(function() {
            i.clk = i.clk_x = i.clk_y = null
        }, 100)
    }

    function a() {
        if (e.fn.ajaxSubmit.debug) {
            var t = "[jquery.form] " + Array.prototype.join.call(arguments, "");
            window.console && window.console.log ? window.console.log(t) : window.opera && window.opera.postError && window.opera.postError(t)
        }
    }
    var n = /\r?\n/g,
        i = {};
    i.fileapi = void 0 !== e('<input type="file">').get(0).files, i.formdata = void 0 !== window.FormData;
    var o = !!e.fn.prop;
    e.fn.attr2 = function() {
        if (!o) return this.attr.apply(this, arguments);
        var e = this.prop.apply(this, arguments);
        return e && e.jquery || "string" == typeof e ? e : this.attr.apply(this, arguments)
    }, e.fn.ajaxSubmit = function(t, r, n, s) {
        function u(r) {
            var a, n, i = e.param(r, t.traditional).split("&"),
                o = i.length,
                s = [];
            for (a = 0; a < o; a++) i[a] = i[a].replace(/\+/g, " "), n = i[a].split("="), s.push([decodeURIComponent(n[0]), decodeURIComponent(n[1])]);
            return s
        }

        function c(r) {
            function n(e) {
                var t = null;
                try {
                    e.contentWindow && (t = e.contentWindow.document)
                } catch (e) {
                    a("cannot get iframe.contentWindow document: " + e)
                }
                if (t) return t;
                try {
                    t = e.contentDocument ? e.contentDocument : e.document
                } catch (r) {
                    a("cannot get iframe.contentDocument: " + r), t = e.document
                }
                return t
            }

            function i() {
                function t() {
                    try {
                        var e = n(v).readyState;
                        a("state = " + e), e && "uninitialized" === e.toLowerCase() && setTimeout(t, 50)
                    } catch (e) {
                        a("Server abort: ", e, " (", e.name, ")"), s(L), j && clearTimeout(j), j = void 0
                    }
                }
                var r = p.attr2("target"),
                    i = p.attr2("action"),
                    o = p.attr("enctype") || p.attr("encoding") || "multipart/form-data";
                w.setAttribute("target", m), l && !/post/i.test(l) || w.setAttribute("method", "POST"), i !== f.url && w.setAttribute("action", f.url), f.skipEncodingOverride || l && !/post/i.test(l) || p.attr({
                    encoding: "multipart/form-data",
                    enctype: "multipart/form-data"
                }), f.timeout && (j = setTimeout(function() {
                    T = !0, s(A)
                }, f.timeout));
                var u = [];
                try {
                    if (f.extraData)
                        for (var c in f.extraData) f.extraData.hasOwnProperty(c) && (e.isPlainObject(f.extraData[c]) && f.extraData[c].hasOwnProperty("name") && f.extraData[c].hasOwnProperty("value") ? u.push(e('<input type="hidden" name="' + f.extraData[c].name + '">', k).val(f.extraData[c].value).appendTo(w)[0]) : u.push(e('<input type="hidden" name="' + c + '">', k).val(f.extraData[c]).appendTo(w)[0]));
                    f.iframeTarget || h.appendTo(D), v.attachEvent ? v.attachEvent("onload", s) : v.addEventListener("load", s, !1), setTimeout(t, 15);
                    try {
                        w.submit()
                    } catch (e) {
                        document.createElement("form").submit.apply(w)
                    }
                } finally {
                    w.setAttribute("action", i), w.setAttribute("enctype", o), r ? w.setAttribute("target", r) : p.removeAttr("target"), e(u).remove()
                }
            }

            function s(t) {
                if (!x.aborted && !X) {
                    if ((O = n(v)) || (a("cannot access response document"), t = L), t === A && x) return x.abort("timeout"), void S.reject(x, "timeout");
                    if (t === L && x) return x.abort("server abort"), void S.reject(x, "error", "server abort");
                    if (O && O.location.href !== f.iframeSrc || T) {
                        v.detachEvent ? v.detachEvent("onload", s) : v.removeEventListener("load", s, !1);
                        var r, i = "success";
                        try {
                            if (T) throw "timeout";
                            var o = "xml" === f.dataType || O.XMLDocument || e.isXMLDoc(O);
                            if (a("isXml=" + o), !o && window.opera && (null === O.body || !O.body.innerHTML) && --C) return a("requeing onLoad callback, DOM not available"), void setTimeout(s, 250);
                            var u = O.body ? O.body : O.documentElement;
                            x.responseText = u ? u.innerHTML : null, x.responseXML = O.XMLDocument ? O.XMLDocument : O, o && (f.dataType = "xml"), x.getResponseHeader = function(e) {
                                return {
                                    "content-type": f.dataType
                                }[e.toLowerCase()]
                            }, u && (x.status = Number(u.getAttribute("status")) || x.status, x.statusText = u.getAttribute("statusText") || x.statusText);
                            var c = (f.dataType || "").toLowerCase(),
                                l = /(json|script|text)/.test(c);
                            if (l || f.textarea) {
                                var p = O.getElementsByTagName("textarea")[0];
                                if (p) x.responseText = p.value, x.status = Number(p.getAttribute("status")) || x.status, x.statusText = p.getAttribute("statusText") || x.statusText;
                                else if (l) {
                                    var m = O.getElementsByTagName("pre")[0],
                                        g = O.getElementsByTagName("body")[0];
                                    m ? x.responseText = m.textContent ? m.textContent : m.innerText : g && (x.responseText = g.textContent ? g.textContent : g.innerText)
                                }
                            } else "xml" === c && !x.responseXML && x.responseText && (x.responseXML = q(x.responseText));
                            try {
                                M = N(x, c, f)
                            } catch (e) {
                                i = "parsererror", x.error = r = e || i
                            }
                        } catch (e) {
                            a("error caught: ", e), i = "error", x.error = r = e || i
                        }
                        x.aborted && (a("upload aborted"), i = null), x.status && (i = x.status >= 200 && x.status < 300 || 304 === x.status ? "success" : "error"), "success" === i ? (f.success && f.success.call(f.context, M, "success", x), S.resolve(x.responseText, "success", x), d && e.event.trigger("ajaxSuccess", [x, f])) : i && (void 0 === r && (r = x.statusText), f.error && f.error.call(f.context, x, i, r), S.reject(x, "error", r), d && e.event.trigger("ajaxError", [x, f, r])), d && e.event.trigger("ajaxComplete", [x, f]), d && !--e.active && e.event.trigger("ajaxStop"), f.complete && f.complete.call(f.context, x, i), X = !0, f.timeout && clearTimeout(j), setTimeout(function() {
                            f.iframeTarget ? h.attr("src", f.iframeSrc) : h.remove(), x.responseXML = null
                        }, 100)
                    }
                }
            }
            var u, c, f, d, m, h, v, x, y, b, T, j, w = p[0],
                S = e.Deferred();
            if (S.abort = function(e) {
                    x.abort(e)
                }, r)
                for (c = 0; c < g.length; c++) u = e(g[c]), o ? u.prop("disabled", !1) : u.removeAttr("disabled");
            (f = e.extend(!0, {}, e.ajaxSettings, t)).context = f.context || f, m = "jqFormIO" + (new Date).getTime();
            var k = w.ownerDocument,
                D = p.closest("body");
            if (f.iframeTarget ? (b = (h = e(f.iframeTarget, k)).attr2("name")) ? m = b : h.attr2("name", m) : (h = e('<iframe name="' + m + '" src="' + f.iframeSrc + '" />', k)).css({
                    position: "absolute",
                    top: "-1000px",
                    left: "-1000px"
                }), v = h[0], x = {
                    aborted: 0,
                    responseText: null,
                    responseXML: null,
                    status: 0,
                    statusText: "n/a",
                    getAllResponseHeaders: function() {},
                    getResponseHeader: function() {},
                    setRequestHeader: function() {},
                    abort: function(t) {
                        var r = "timeout" === t ? "timeout" : "aborted";
                        a("aborting upload... " + r), this.aborted = 1;
                        try {
                            v.contentWindow.document.execCommand && v.contentWindow.document.execCommand("Stop")
                        } catch (e) {}
                        h.attr("src", f.iframeSrc), x.error = r, f.error && f.error.call(f.context, x, r, t), d && e.event.trigger("ajaxError", [x, f, r]), f.complete && f.complete.call(f.context, x, r)
                    }
                }, (d = f.global) && 0 == e.active++ && e.event.trigger("ajaxStart"), d && e.event.trigger("ajaxSend", [x, f]), f.beforeSend && !1 === f.beforeSend.call(f.context, x, f)) return f.global && e.active--, S.reject(), S;
            if (x.aborted) return S.reject(), S;
            (y = w.clk) && (b = y.name) && !y.disabled && (f.extraData = f.extraData || {}, f.extraData[b] = y.value, "image" === y.type && (f.extraData[b + ".x"] = w.clk_x, f.extraData[b + ".y"] = w.clk_y));
            var A = 1,
                L = 2,
                F = e("meta[name=csrf-token]").attr("content"),
                E = e("meta[name=csrf-param]").attr("content");
            E && F && (f.extraData = f.extraData || {}, f.extraData[E] = F), f.forceSync ? i() : setTimeout(i, 10);
            var M, O, X, C = 50,
                q = e.parseXML || function(e, t) {
                    return window.ActiveXObject ? ((t = new ActiveXObject("Microsoft.XMLDOM")).async = "false", t.loadXML(e)) : t = (new DOMParser).parseFromString(e, "text/xml"), t && t.documentElement && "parsererror" !== t.documentElement.nodeName ? t : null
                },
                _ = e.parseJSON || function(e) {
                    return window.eval("(" + e + ")")
                },
                N = function(t, r, a) {
                    var n = t.getResponseHeader("content-type") || "",
                        i = ("xml" === r || !r) && n.indexOf("xml") >= 0,
                        o = i ? t.responseXML : t.responseText;
                    return i && "parsererror" === o.documentElement.nodeName && e.error && e.error("parsererror"), a && a.dataFilter && (o = a.dataFilter(o, r)), "string" == typeof o && (("json" === r || !r) && n.indexOf("json") >= 0 ? o = _(o) : ("script" === r || !r) && n.indexOf("javascript") >= 0 && e.globalEval(o)), o
                };
            return S
        }
        if (!this.length) return a("ajaxSubmit: skipping submit process - no element selected"), this;
        var l, f, d, p = this;
        "function" == typeof t ? t = {
            success: t
        } : "string" == typeof t || !1 === t && arguments.length > 0 ? (t = {
            url: t,
            data: r,
            dataType: n
        }, "function" == typeof s && (t.success = s)) : void 0 === t && (t = {}), l = t.method || t.type || this.attr2("method"), (d = (d = "string" == typeof(f = t.url || this.attr2("action")) ? e.trim(f) : "") || window.location.href || "") && (d = (d.match(/^([^#]+)/) || [])[1]), t = e.extend(!0, {
            url: d,
            success: e.ajaxSettings.success,
            type: l || e.ajaxSettings.type,
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
        }, t);
        var m = {};
        if (this.trigger("form-pre-serialize", [this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), this;
        if (t.beforeSerialize && !1 === t.beforeSerialize(this, t)) return a("ajaxSubmit: submit aborted via beforeSerialize callback"), this;
        var h = t.traditional;
        void 0 === h && (h = e.ajaxSettings.traditional);
        var v, g = [],
            x = this.formToArray(t.semantic, g, t.filtering);
        if (t.data) {
            var y = e.isFunction(t.data) ? t.data(x) : t.data;
            t.extraData = y, v = e.param(y, h)
        }
        if (t.beforeSubmit && !1 === t.beforeSubmit(x, this, t)) return a("ajaxSubmit: submit aborted via beforeSubmit callback"), this;
        if (this.trigger("form-submit-validate", [x, this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-submit-validate trigger"), this;
        var b = e.param(x, h);
        v && (b = b ? b + "&" + v : v), "GET" === t.type.toUpperCase() ? (t.url += (t.url.indexOf("?") >= 0 ? "&" : "?") + b, t.data = null) : t.data = b;
        var T = [];
        if (t.resetForm && T.push(function() {
                p.resetForm()
            }), t.clearForm && T.push(function() {
                p.clearForm(t.includeHidden)
            }), !t.dataType && t.target) {
            var j = t.success || function() {};
            T.push(function(r, a, n) {
                var i = arguments,
                    o = t.replaceTarget ? "replaceWith" : "html";
                e(t.target)[o](r).each(function() {
                    j.apply(this, i)
                })
            })
        } else t.success && (e.isArray(t.success) ? e.merge(T, t.success) : T.push(t.success));
        if (t.success = function(e, r, a) {
                for (var n = t.context || this, i = 0, o = T.length; i < o; i++) T[i].apply(n, [e, r, a || p, p])
            }, t.error) {
            var w = t.error;
            t.error = function(e, r, a) {
                var n = t.context || this;
                w.apply(n, [e, r, a, p])
            }
        }
        if (t.complete) {
            var S = t.complete;
            t.complete = function(e, r) {
                var a = t.context || this;
                S.apply(a, [e, r, p])
            }
        }
        var k = e("input[type=file]:enabled", this).filter(function() {
                return "" !== e(this).val()
            }).length > 0,
            D = "multipart/form-data",
            A = p.attr("enctype") === D || p.attr("encoding") === D,
            L = i.fileapi && i.formdata;
        a("fileAPI :" + L);
        var F, E = (k || A) && !L;
        !1 !== t.iframe && (t.iframe || E) ? t.closeKeepAlive ? e.get(t.closeKeepAlive, function() {
            F = c(x)
        }) : F = c(x) : F = (k || A) && L ? function(r) {
            for (var a = new FormData, n = 0; n < r.length; n++) a.append(r[n].name, r[n].value);
            if (t.extraData) {
                var i = u(t.extraData);
                for (n = 0; n < i.length; n++) i[n] && a.append(i[n][0], i[n][1])
            }
            t.data = null;
            var o = e.extend(!0, {}, e.ajaxSettings, t, {
                contentType: !1,
                processData: !1,
                cache: !1,
                type: l || "POST"
            });
            t.uploadProgress && (o.xhr = function() {
                var r = e.ajaxSettings.xhr();
                return r.upload && r.upload.addEventListener("progress", function(e) {
                    var r = 0,
                        a = e.loaded || e.position,
                        n = e.total;
                    e.lengthComputable && (r = Math.ceil(a / n * 100)), t.uploadProgress(e, a, n, r)
                }, !1), r
            }), o.data = null;
            var s = o.beforeSend;
            return o.beforeSend = function(e, r) {
                t.formData ? r.data = t.formData : r.data = a, s && s.call(this, e, r)
            }, e.ajax(o)
        }(x) : e.ajax(t), p.removeData("jqxhr").data("jqxhr", F);
        for (var M = 0; M < g.length; M++) g[M] = null;
        return this.trigger("form-submit-notify", [this, t]), this
    }, e.fn.ajaxForm = function(n, i, o, s) {
        if (("string" == typeof n || !1 === n && arguments.length > 0) && (n = {
                url: n,
                data: i,
                dataType: o
            }, "function" == typeof s && (n.success = s)), n = n || {}, n.delegation = n.delegation && e.isFunction(e.fn.on), !n.delegation && 0 === this.length) {
            var u = {
                s: this.selector,
                c: this.context
            };
            return !e.isReady && u.s ? (a("DOM not ready, queuing ajaxForm"), e(function() {
                e(u.s, u.c).ajaxForm(n)
            }), this) : (a("terminating; zero elements found by selector" + (e.isReady ? "" : " (DOM not ready)")), this)
        }
        return n.delegation ? (e(document).off("submit.form-plugin", this.selector, t).off("click.form-plugin", this.selector, r).on("submit.form-plugin", this.selector, n, t).on("click.form-plugin", this.selector, n, r), this) : this.ajaxFormUnbind().on("submit.form-plugin", n, t).on("click.form-plugin", n, r)
    }, e.fn.ajaxFormUnbind = function() {
        return this.off("submit.form-plugin click.form-plugin")
    }, e.fn.formToArray = function(t, r, a) {
        var n = [];
        if (0 === this.length) return n;
        var o, s = this[0],
            u = this.attr("id"),
            c = t || void 0 === s.elements ? s.getElementsByTagName("*") : s.elements;
        if (c && (c = e.makeArray(c)), u && (t || /(Edge|Trident)\//.test(navigator.userAgent)) && (o = e(':input[form="' + u + '"]').get()).length && (c = (c || []).concat(o)), !c || !c.length) return n;
        e.isFunction(a) && (c = e.map(c, a));
        var l, f, d, p, m, h, v;
        for (l = 0, h = c.length; l < h; l++)
            if (m = c[l], (d = m.name) && !m.disabled)
                if (t && s.clk && "image" === m.type) s.clk === m && (n.push({
                    name: d,
                    value: e(m).val(),
                    type: m.type
                }), n.push({
                    name: d + ".x",
                    value: s.clk_x
                }, {
                    name: d + ".y",
                    value: s.clk_y
                }));
                else if ((p = e.fieldValue(m, !0)) && p.constructor === Array)
            for (r && r.push(m), f = 0, v = p.length; f < v; f++) n.push({
                name: d,
                value: p[f]
            });
        else if (i.fileapi && "file" === m.type) {
            r && r.push(m);
            var g = m.files;
            if (g.length)
                for (f = 0; f < g.length; f++) n.push({
                    name: d,
                    value: g[f],
                    type: m.type
                });
            else n.push({
                name: d,
                value: "",
                type: m.type
            })
        } else null !== p && void 0 !== p && (r && r.push(m), n.push({
            name: d,
            value: p,
            type: m.type,
            required: m.required
        }));
        if (!t && s.clk) {
            var x = e(s.clk),
                y = x[0];
            (d = y.name) && !y.disabled && "image" === y.type && (n.push({
                name: d,
                value: x.val()
            }), n.push({
                name: d + ".x",
                value: s.clk_x
            }, {
                name: d + ".y",
                value: s.clk_y
            }))
        }
        return n
    }, e.fn.formSerialize = function(t) {
        return e.param(this.formToArray(t))
    }, e.fn.fieldSerialize = function(t) {
        var r = [];
        return this.each(function() {
            var a = this.name;
            if (a) {
                var n = e.fieldValue(this, t);
                if (n && n.constructor === Array)
                    for (var i = 0, o = n.length; i < o; i++) r.push({
                        name: a,
                        value: n[i]
                    });
                else null !== n && void 0 !== n && r.push({
                    name: this.name,
                    value: n
                })
            }
        }), e.param(r)
    }, e.fn.fieldValue = function(t) {
        for (var r = [], a = 0, n = this.length; a < n; a++) {
            var i = this[a],
                o = e.fieldValue(i, t);
            null === o || void 0 === o || o.constructor === Array && !o.length || (o.constructor === Array ? e.merge(r, o) : r.push(o))
        }
        return r
    }, e.fieldValue = function(t, r) {
        var a = t.name,
            i = t.type,
            o = t.tagName.toLowerCase();
        if (void 0 === r && (r = !0), r && (!a || t.disabled || "reset" === i || "button" === i || ("checkbox" === i || "radio" === i) && !t.checked || ("submit" === i || "image" === i) && t.form && t.form.clk !== t || "select" === o && -1 === t.selectedIndex)) return null;
        if ("select" === o) {
            var s = t.selectedIndex;
            if (s < 0) return null;
            for (var u = [], c = t.options, l = "select-one" === i, f = l ? s + 1 : c.length, d = l ? s : 0; d < f; d++) {
                var p = c[d];
                if (p.selected && !p.disabled) {
                    var m = p.value;
                    if (m || (m = p.attributes && p.attributes.value && !p.attributes.value.specified ? p.text : p.value), l) return m;
                    u.push(m)
                }
            }
            return u
        }
        return e(t).val().replace(n, "\r\n")
    }, e.fn.clearForm = function(t) {
        return this.each(function() {
            e("input,select,textarea", this).clearFields(t)
        })
    }, e.fn.clearFields = e.fn.clearInputs = function(t) {
        var r = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
        return this.each(function() {
            var a = this.type,
                n = this.tagName.toLowerCase();
            r.test(a) || "textarea" === n ? this.value = "" : "checkbox" === a || "radio" === a ? this.checked = !1 : "select" === n ? this.selectedIndex = -1 : "file" === a ? /MSIE/.test(navigator.userAgent) ? e(this).replaceWith(e(this).clone(!0)) : e(this).val("") : t && (!0 === t && /hidden/.test(a) || "string" == typeof t && e(this).is(t)) && (this.value = "")
        })
    }, e.fn.resetForm = function() {
        return this.each(function() {
            var t = e(this),
                r = this.tagName.toLowerCase();
            switch (r) {
                case "input":
                    this.checked = this.defaultChecked;
                case "textarea":
                    return this.value = this.defaultValue, !0;
                case "option":
                case "optgroup":
                    var a = t.parents("select");
                    return a.length && a[0].multiple ? "option" === r ? this.selected = this.defaultSelected : t.find("option").resetForm() : a.resetForm(), !0;
                case "select":
                    return t.find("option").each(function(e) {
                        if (this.selected = this.defaultSelected, this.defaultSelected && !t[0].multiple) return t[0].selectedIndex = e, !1
                    }), !0;
                case "label":
                    var n = e(t.attr("for")),
                        i = t.find("input,select,textarea");
                    return n[0] && i.unshift(n[0]), i.resetForm(), !0;
                case "form":
                    return ("function" == typeof this.reset || "object" == typeof this.reset && !this.reset.nodeType) && this.reset(), !0;
                default:
                    return t.find("form,input,label,select,textarea").resetForm(), !0
            }
        })
    }, e.fn.enable = function(e) {
        return void 0 === e && (e = !0), this.each(function() {
            this.disabled = !e
        })
    }, e.fn.selected = function(t) {
        return void 0 === t && (t = !0), this.each(function() {
            var r = this.type;
            if ("checkbox" === r || "radio" === r) this.checked = t;
            else if ("option" === this.tagName.toLowerCase()) {
                var a = e(this).parent("select");
                t && a[0] && "select-one" === a[0].type && a.find("option").selected(!1), this.selected = t
            }
        })
    }, e.fn.ajaxSubmit.debug = !1
});

;